//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     Mass flow is the ratio of the mass change to the time during which the change occurred (value of mass changes per unit time).
    /// </summary>
    public struct  MassFlow
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly MassFlowUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public MassFlowUnit Unit => _unit;

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public MassFlow(double value, MassFlowUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of Duration, which is Second. All conversions go via this value.
        /// </summary>
        public static MassFlowUnit BaseUnit { get; } = MassFlowUnit.GramPerSecond;

        /// <summary>
        /// Represents the largest possible value of Duration
        /// </summary>
        public static MassFlow MaxValue { get; } = new MassFlow(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Duration
        /// </summary>
        public static MassFlow MinValue { get; } = new MassFlow(double.MinValue, BaseUnit);

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static MassFlow Zero { get; } = new MassFlow(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFlowUnit.CentigramPerDay"/>
        /// </summary>
        public double CentigramsPerDay => As(MassFlowUnit.CentigramPerDay);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFlowUnit.CentigramPerSecond"/>
        /// </summary>
        public double CentigramsPerSecond => As(MassFlowUnit.CentigramPerSecond);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFlowUnit.DecagramPerDay"/>
        /// </summary>
        public double DecagramsPerDay => As(MassFlowUnit.DecagramPerDay);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFlowUnit.DecagramPerSecond"/>
        /// </summary>
        public double DecagramsPerSecond => As(MassFlowUnit.DecagramPerSecond);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFlowUnit.DecigramPerDay"/>
        /// </summary>
        public double DecigramsPerDay => As(MassFlowUnit.DecigramPerDay);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFlowUnit.DecigramPerSecond"/>
        /// </summary>
        public double DecigramsPerSecond => As(MassFlowUnit.DecigramPerSecond);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFlowUnit.GramPerDay"/>
        /// </summary>
        public double GramsPerDay => As(MassFlowUnit.GramPerDay);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFlowUnit.GramPerHour"/>
        /// </summary>
        public double GramsPerHour => As(MassFlowUnit.GramPerHour);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFlowUnit.GramPerSecond"/>
        /// </summary>
        public double GramsPerSecond => As(MassFlowUnit.GramPerSecond);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFlowUnit.HectogramPerDay"/>
        /// </summary>
        public double HectogramsPerDay => As(MassFlowUnit.HectogramPerDay);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFlowUnit.HectogramPerSecond"/>
        /// </summary>
        public double HectogramsPerSecond => As(MassFlowUnit.HectogramPerSecond);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFlowUnit.KilogramPerDay"/>
        /// </summary>
        public double KilogramsPerDay => As(MassFlowUnit.KilogramPerDay);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFlowUnit.KilogramPerHour"/>
        /// </summary>
        public double KilogramsPerHour => As(MassFlowUnit.KilogramPerHour);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFlowUnit.KilogramPerMinute"/>
        /// </summary>
        public double KilogramsPerMinute => As(MassFlowUnit.KilogramPerMinute);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFlowUnit.KilogramPerSecond"/>
        /// </summary>
        public double KilogramsPerSecond => As(MassFlowUnit.KilogramPerSecond);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFlowUnit.MegagramPerDay"/>
        /// </summary>
        public double MegagramsPerDay => As(MassFlowUnit.MegagramPerDay);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFlowUnit.MegapoundPerDay"/>
        /// </summary>
        public double MegapoundsPerDay => As(MassFlowUnit.MegapoundPerDay);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFlowUnit.MegapoundPerHour"/>
        /// </summary>
        public double MegapoundsPerHour => As(MassFlowUnit.MegapoundPerHour);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFlowUnit.MegapoundPerMinute"/>
        /// </summary>
        public double MegapoundsPerMinute => As(MassFlowUnit.MegapoundPerMinute);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFlowUnit.MegapoundPerSecond"/>
        /// </summary>
        public double MegapoundsPerSecond => As(MassFlowUnit.MegapoundPerSecond);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFlowUnit.MicrogramPerDay"/>
        /// </summary>
        public double MicrogramsPerDay => As(MassFlowUnit.MicrogramPerDay);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFlowUnit.MicrogramPerSecond"/>
        /// </summary>
        public double MicrogramsPerSecond => As(MassFlowUnit.MicrogramPerSecond);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFlowUnit.MilligramPerDay"/>
        /// </summary>
        public double MilligramsPerDay => As(MassFlowUnit.MilligramPerDay);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFlowUnit.MilligramPerSecond"/>
        /// </summary>
        public double MilligramsPerSecond => As(MassFlowUnit.MilligramPerSecond);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFlowUnit.NanogramPerDay"/>
        /// </summary>
        public double NanogramsPerDay => As(MassFlowUnit.NanogramPerDay);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFlowUnit.NanogramPerSecond"/>
        /// </summary>
        public double NanogramsPerSecond => As(MassFlowUnit.NanogramPerSecond);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFlowUnit.PoundPerDay"/>
        /// </summary>
        public double PoundsPerDay => As(MassFlowUnit.PoundPerDay);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFlowUnit.PoundPerHour"/>
        /// </summary>
        public double PoundsPerHour => As(MassFlowUnit.PoundPerHour);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFlowUnit.PoundPerMinute"/>
        /// </summary>
        public double PoundsPerMinute => As(MassFlowUnit.PoundPerMinute);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFlowUnit.PoundPerSecond"/>
        /// </summary>
        public double PoundsPerSecond => As(MassFlowUnit.PoundPerSecond);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFlowUnit.ShortTonPerHour"/>
        /// </summary>
        public double ShortTonsPerHour => As(MassFlowUnit.ShortTonPerHour);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFlowUnit.TonnePerDay"/>
        /// </summary>
        public double TonnesPerDay => As(MassFlowUnit.TonnePerDay);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MassFlowUnit.TonnePerHour"/>
        /// </summary>
        public double TonnesPerHour => As(MassFlowUnit.TonnePerHour);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="MassFlow"/> from <see cref="MassFlowUnit.CentigramPerDay"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFlow FromCentigramsPerDay(double centigramsperday) => new MassFlow(centigramsperday, MassFlowUnit.CentigramPerDay);

        /// <summary>
        ///     Creates a <see cref="MassFlow"/> from <see cref="MassFlowUnit.CentigramPerSecond"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFlow FromCentigramsPerSecond(double centigramspersecond) => new MassFlow(centigramspersecond, MassFlowUnit.CentigramPerSecond);

        /// <summary>
        ///     Creates a <see cref="MassFlow"/> from <see cref="MassFlowUnit.DecagramPerDay"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFlow FromDecagramsPerDay(double decagramsperday) => new MassFlow(decagramsperday, MassFlowUnit.DecagramPerDay);

        /// <summary>
        ///     Creates a <see cref="MassFlow"/> from <see cref="MassFlowUnit.DecagramPerSecond"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFlow FromDecagramsPerSecond(double decagramspersecond) => new MassFlow(decagramspersecond, MassFlowUnit.DecagramPerSecond);

        /// <summary>
        ///     Creates a <see cref="MassFlow"/> from <see cref="MassFlowUnit.DecigramPerDay"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFlow FromDecigramsPerDay(double decigramsperday) => new MassFlow(decigramsperday, MassFlowUnit.DecigramPerDay);

        /// <summary>
        ///     Creates a <see cref="MassFlow"/> from <see cref="MassFlowUnit.DecigramPerSecond"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFlow FromDecigramsPerSecond(double decigramspersecond) => new MassFlow(decigramspersecond, MassFlowUnit.DecigramPerSecond);

        /// <summary>
        ///     Creates a <see cref="MassFlow"/> from <see cref="MassFlowUnit.GramPerDay"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFlow FromGramsPerDay(double gramsperday) => new MassFlow(gramsperday, MassFlowUnit.GramPerDay);

        /// <summary>
        ///     Creates a <see cref="MassFlow"/> from <see cref="MassFlowUnit.GramPerHour"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFlow FromGramsPerHour(double gramsperhour) => new MassFlow(gramsperhour, MassFlowUnit.GramPerHour);

        /// <summary>
        ///     Creates a <see cref="MassFlow"/> from <see cref="MassFlowUnit.GramPerSecond"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFlow FromGramsPerSecond(double gramspersecond) => new MassFlow(gramspersecond, MassFlowUnit.GramPerSecond);

        /// <summary>
        ///     Creates a <see cref="MassFlow"/> from <see cref="MassFlowUnit.HectogramPerDay"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFlow FromHectogramsPerDay(double hectogramsperday) => new MassFlow(hectogramsperday, MassFlowUnit.HectogramPerDay);

        /// <summary>
        ///     Creates a <see cref="MassFlow"/> from <see cref="MassFlowUnit.HectogramPerSecond"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFlow FromHectogramsPerSecond(double hectogramspersecond) => new MassFlow(hectogramspersecond, MassFlowUnit.HectogramPerSecond);

        /// <summary>
        ///     Creates a <see cref="MassFlow"/> from <see cref="MassFlowUnit.KilogramPerDay"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFlow FromKilogramsPerDay(double kilogramsperday) => new MassFlow(kilogramsperday, MassFlowUnit.KilogramPerDay);

        /// <summary>
        ///     Creates a <see cref="MassFlow"/> from <see cref="MassFlowUnit.KilogramPerHour"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFlow FromKilogramsPerHour(double kilogramsperhour) => new MassFlow(kilogramsperhour, MassFlowUnit.KilogramPerHour);

        /// <summary>
        ///     Creates a <see cref="MassFlow"/> from <see cref="MassFlowUnit.KilogramPerMinute"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFlow FromKilogramsPerMinute(double kilogramsperminute) => new MassFlow(kilogramsperminute, MassFlowUnit.KilogramPerMinute);

        /// <summary>
        ///     Creates a <see cref="MassFlow"/> from <see cref="MassFlowUnit.KilogramPerSecond"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFlow FromKilogramsPerSecond(double kilogramspersecond) => new MassFlow(kilogramspersecond, MassFlowUnit.KilogramPerSecond);

        /// <summary>
        ///     Creates a <see cref="MassFlow"/> from <see cref="MassFlowUnit.MegagramPerDay"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFlow FromMegagramsPerDay(double megagramsperday) => new MassFlow(megagramsperday, MassFlowUnit.MegagramPerDay);

        /// <summary>
        ///     Creates a <see cref="MassFlow"/> from <see cref="MassFlowUnit.MegapoundPerDay"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFlow FromMegapoundsPerDay(double megapoundsperday) => new MassFlow(megapoundsperday, MassFlowUnit.MegapoundPerDay);

        /// <summary>
        ///     Creates a <see cref="MassFlow"/> from <see cref="MassFlowUnit.MegapoundPerHour"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFlow FromMegapoundsPerHour(double megapoundsperhour) => new MassFlow(megapoundsperhour, MassFlowUnit.MegapoundPerHour);

        /// <summary>
        ///     Creates a <see cref="MassFlow"/> from <see cref="MassFlowUnit.MegapoundPerMinute"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFlow FromMegapoundsPerMinute(double megapoundsperminute) => new MassFlow(megapoundsperminute, MassFlowUnit.MegapoundPerMinute);

        /// <summary>
        ///     Creates a <see cref="MassFlow"/> from <see cref="MassFlowUnit.MegapoundPerSecond"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFlow FromMegapoundsPerSecond(double megapoundspersecond) => new MassFlow(megapoundspersecond, MassFlowUnit.MegapoundPerSecond);

        /// <summary>
        ///     Creates a <see cref="MassFlow"/> from <see cref="MassFlowUnit.MicrogramPerDay"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFlow FromMicrogramsPerDay(double microgramsperday) => new MassFlow(microgramsperday, MassFlowUnit.MicrogramPerDay);

        /// <summary>
        ///     Creates a <see cref="MassFlow"/> from <see cref="MassFlowUnit.MicrogramPerSecond"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFlow FromMicrogramsPerSecond(double microgramspersecond) => new MassFlow(microgramspersecond, MassFlowUnit.MicrogramPerSecond);

        /// <summary>
        ///     Creates a <see cref="MassFlow"/> from <see cref="MassFlowUnit.MilligramPerDay"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFlow FromMilligramsPerDay(double milligramsperday) => new MassFlow(milligramsperday, MassFlowUnit.MilligramPerDay);

        /// <summary>
        ///     Creates a <see cref="MassFlow"/> from <see cref="MassFlowUnit.MilligramPerSecond"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFlow FromMilligramsPerSecond(double milligramspersecond) => new MassFlow(milligramspersecond, MassFlowUnit.MilligramPerSecond);

        /// <summary>
        ///     Creates a <see cref="MassFlow"/> from <see cref="MassFlowUnit.NanogramPerDay"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFlow FromNanogramsPerDay(double nanogramsperday) => new MassFlow(nanogramsperday, MassFlowUnit.NanogramPerDay);

        /// <summary>
        ///     Creates a <see cref="MassFlow"/> from <see cref="MassFlowUnit.NanogramPerSecond"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFlow FromNanogramsPerSecond(double nanogramspersecond) => new MassFlow(nanogramspersecond, MassFlowUnit.NanogramPerSecond);

        /// <summary>
        ///     Creates a <see cref="MassFlow"/> from <see cref="MassFlowUnit.PoundPerDay"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFlow FromPoundsPerDay(double poundsperday) => new MassFlow(poundsperday, MassFlowUnit.PoundPerDay);

        /// <summary>
        ///     Creates a <see cref="MassFlow"/> from <see cref="MassFlowUnit.PoundPerHour"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFlow FromPoundsPerHour(double poundsperhour) => new MassFlow(poundsperhour, MassFlowUnit.PoundPerHour);

        /// <summary>
        ///     Creates a <see cref="MassFlow"/> from <see cref="MassFlowUnit.PoundPerMinute"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFlow FromPoundsPerMinute(double poundsperminute) => new MassFlow(poundsperminute, MassFlowUnit.PoundPerMinute);

        /// <summary>
        ///     Creates a <see cref="MassFlow"/> from <see cref="MassFlowUnit.PoundPerSecond"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFlow FromPoundsPerSecond(double poundspersecond) => new MassFlow(poundspersecond, MassFlowUnit.PoundPerSecond);

        /// <summary>
        ///     Creates a <see cref="MassFlow"/> from <see cref="MassFlowUnit.ShortTonPerHour"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFlow FromShortTonsPerHour(double shorttonsperhour) => new MassFlow(shorttonsperhour, MassFlowUnit.ShortTonPerHour);

        /// <summary>
        ///     Creates a <see cref="MassFlow"/> from <see cref="MassFlowUnit.TonnePerDay"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFlow FromTonnesPerDay(double tonnesperday) => new MassFlow(tonnesperday, MassFlowUnit.TonnePerDay);

        /// <summary>
        ///     Creates a <see cref="MassFlow"/> from <see cref="MassFlowUnit.TonnePerHour"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MassFlow FromTonnesPerHour(double tonnesperhour) => new MassFlow(tonnesperhour, MassFlowUnit.TonnePerHour);

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="MassFlowUnit" /> to <see cref="MassFlow" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>MassFlow unit value.</returns>
        public static MassFlow From(double value, MassFlowUnit fromUnit)
        {
            return new MassFlow(value, fromUnit);
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(MassFlowUnit unit) => GetValueAs(unit);

        /// <summary>
        ///     Converts this Duration to another Duration with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Duration with the specified unit.</returns>
        public MassFlow ToUnit(MassFlowUnit unit)
        {
            var convertedValue = GetValueAs(unit);
            return new MassFlow(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double GetValueInBaseUnit()
        {
            return Unit switch
            {
                MassFlowUnit.CentigramPerDay => (_value / 86400) * 1e-2d,
                MassFlowUnit.CentigramPerSecond => (_value) * 1e-2d,
                MassFlowUnit.DecagramPerDay => (_value / 86400) * 1e1d,
                MassFlowUnit.DecagramPerSecond => (_value) * 1e1d,
                MassFlowUnit.DecigramPerDay => (_value / 86400) * 1e-1d,
                MassFlowUnit.DecigramPerSecond => (_value) * 1e-1d,
                MassFlowUnit.GramPerDay => _value / 86400,
                MassFlowUnit.GramPerHour => _value / 3600,
                MassFlowUnit.GramPerSecond => _value,
                MassFlowUnit.HectogramPerDay => (_value / 86400) * 1e2d,
                MassFlowUnit.HectogramPerSecond => (_value) * 1e2d,
                MassFlowUnit.KilogramPerDay => (_value / 86400) * 1e3d,
                MassFlowUnit.KilogramPerHour => _value / 3.6,
                MassFlowUnit.KilogramPerMinute => _value / 0.06,
                MassFlowUnit.KilogramPerSecond => (_value) * 1e3d,
                MassFlowUnit.MegagramPerDay => (_value / 86400) * 1e6d,
                MassFlowUnit.MegapoundPerDay => (_value / 190.47936) * 1e6d,
                MassFlowUnit.MegapoundPerHour => (_value / 7.93664) * 1e6d,
                MassFlowUnit.MegapoundPerMinute => (_value / 0.132277) * 1e6d,
                MassFlowUnit.MegapoundPerSecond => (_value * 453.59237) * 1e6d,
                MassFlowUnit.MicrogramPerDay => (_value / 86400) * 1e-6d,
                MassFlowUnit.MicrogramPerSecond => (_value) * 1e-6d,
                MassFlowUnit.MilligramPerDay => (_value / 86400) * 1e-3d,
                MassFlowUnit.MilligramPerSecond => (_value) * 1e-3d,
                MassFlowUnit.NanogramPerDay => (_value / 86400) * 1e-9d,
                MassFlowUnit.NanogramPerSecond => (_value) * 1e-9d,
                MassFlowUnit.PoundPerDay => _value / 190.47936,
                MassFlowUnit.PoundPerHour => _value / 7.93664,
                MassFlowUnit.PoundPerMinute => _value / 0.132277,
                MassFlowUnit.PoundPerSecond => _value * 453.59237,
                MassFlowUnit.ShortTonPerHour => _value * 251.9957611,
                MassFlowUnit.TonnePerDay => _value / 0.0864000,
                MassFlowUnit.TonnePerHour => 1000 * _value / 3.6,
                _ => throw new NotImplementedException($"Can not convert {Unit} to base units.")
            };
        }

        private double GetValueAs(MassFlowUnit unit)
        {
            if (Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            return unit switch
            {
                MassFlowUnit.CentigramPerDay => (baseUnitValue * 86400) / 1e-2d,
                MassFlowUnit.CentigramPerSecond => (baseUnitValue) / 1e-2d,
                MassFlowUnit.DecagramPerDay => (baseUnitValue * 86400) / 1e1d,
                MassFlowUnit.DecagramPerSecond => (baseUnitValue) / 1e1d,
                MassFlowUnit.DecigramPerDay => (baseUnitValue * 86400) / 1e-1d,
                MassFlowUnit.DecigramPerSecond => (baseUnitValue) / 1e-1d,
                MassFlowUnit.GramPerDay => baseUnitValue * 86400,
                MassFlowUnit.GramPerHour => baseUnitValue * 3600,
                MassFlowUnit.GramPerSecond => baseUnitValue,
                MassFlowUnit.HectogramPerDay => (baseUnitValue * 86400) / 1e2d,
                MassFlowUnit.HectogramPerSecond => (baseUnitValue) / 1e2d,
                MassFlowUnit.KilogramPerDay => (baseUnitValue * 86400) / 1e3d,
                MassFlowUnit.KilogramPerHour => baseUnitValue * 3.6,
                MassFlowUnit.KilogramPerMinute => baseUnitValue * 0.06,
                MassFlowUnit.KilogramPerSecond => (baseUnitValue) / 1e3d,
                MassFlowUnit.MegagramPerDay => (baseUnitValue * 86400) / 1e6d,
                MassFlowUnit.MegapoundPerDay => (baseUnitValue * 190.47936) / 1e6d,
                MassFlowUnit.MegapoundPerHour => (baseUnitValue * 7.93664) / 1e6d,
                MassFlowUnit.MegapoundPerMinute => (baseUnitValue * 0.132277) / 1e6d,
                MassFlowUnit.MegapoundPerSecond => (baseUnitValue / 453.59237) / 1e6d,
                MassFlowUnit.MicrogramPerDay => (baseUnitValue * 86400) / 1e-6d,
                MassFlowUnit.MicrogramPerSecond => (baseUnitValue) / 1e-6d,
                MassFlowUnit.MilligramPerDay => (baseUnitValue * 86400) / 1e-3d,
                MassFlowUnit.MilligramPerSecond => (baseUnitValue) / 1e-3d,
                MassFlowUnit.NanogramPerDay => (baseUnitValue * 86400) / 1e-9d,
                MassFlowUnit.NanogramPerSecond => (baseUnitValue) / 1e-9d,
                MassFlowUnit.PoundPerDay => baseUnitValue * 190.47936,
                MassFlowUnit.PoundPerHour => baseUnitValue * 7.93664,
                MassFlowUnit.PoundPerMinute => baseUnitValue * 0.132277,
                MassFlowUnit.PoundPerSecond => baseUnitValue / 453.59237,
                MassFlowUnit.ShortTonPerHour => baseUnitValue / 251.9957611,
                MassFlowUnit.TonnePerDay => baseUnitValue * 0.0864000,
                MassFlowUnit.TonnePerHour => baseUnitValue * 3.6 / 1000,
                _ => throw new NotImplementedException($"Can not convert {Unit} to {unit}.")
            };
        }

        #endregion
    }
}

