//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToPressureChangeRate
{
    /// <summary>
    /// A number to PressureChangeRate Extensions
    /// </summary>
    public static class NumberToPressureChangeRateExtensions
    {
        /// <inheritdoc cref="PressureChangeRate.FromAtmospheresPerSecond(UnitsNet.QuantityValue)" />
        public static PressureChangeRate AtmospheresPerSecond<T>(this T value) =>
            PressureChangeRate.FromAtmospheresPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="PressureChangeRate.FromKilopascalsPerMinute(UnitsNet.QuantityValue)" />
        public static PressureChangeRate KilopascalsPerMinute<T>(this T value) =>
            PressureChangeRate.FromKilopascalsPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="PressureChangeRate.FromKilopascalsPerSecond(UnitsNet.QuantityValue)" />
        public static PressureChangeRate KilopascalsPerSecond<T>(this T value) =>
            PressureChangeRate.FromKilopascalsPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="PressureChangeRate.FromKilopoundsForcePerSquareInchPerMinute(UnitsNet.QuantityValue)" />
        public static PressureChangeRate KilopoundsForcePerSquareInchPerMinute<T>(this T value) =>
            PressureChangeRate.FromKilopoundsForcePerSquareInchPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="PressureChangeRate.FromKilopoundsForcePerSquareInchPerSecond(UnitsNet.QuantityValue)" />
        public static PressureChangeRate KilopoundsForcePerSquareInchPerSecond<T>(this T value) =>
            PressureChangeRate.FromKilopoundsForcePerSquareInchPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="PressureChangeRate.FromMegapascalsPerMinute(UnitsNet.QuantityValue)" />
        public static PressureChangeRate MegapascalsPerMinute<T>(this T value) =>
            PressureChangeRate.FromMegapascalsPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="PressureChangeRate.FromMegapascalsPerSecond(UnitsNet.QuantityValue)" />
        public static PressureChangeRate MegapascalsPerSecond<T>(this T value) =>
            PressureChangeRate.FromMegapascalsPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="PressureChangeRate.FromMegapoundsForcePerSquareInchPerMinute(UnitsNet.QuantityValue)" />
        public static PressureChangeRate MegapoundsForcePerSquareInchPerMinute<T>(this T value) =>
            PressureChangeRate.FromMegapoundsForcePerSquareInchPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="PressureChangeRate.FromMegapoundsForcePerSquareInchPerSecond(UnitsNet.QuantityValue)" />
        public static PressureChangeRate MegapoundsForcePerSquareInchPerSecond<T>(this T value) =>
            PressureChangeRate.FromMegapoundsForcePerSquareInchPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="PressureChangeRate.FromMillimetersOfMercuryPerSecond(UnitsNet.QuantityValue)" />
        public static PressureChangeRate MillimetersOfMercuryPerSecond<T>(this T value) =>
            PressureChangeRate.FromMillimetersOfMercuryPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="PressureChangeRate.FromPascalsPerMinute(UnitsNet.QuantityValue)" />
        public static PressureChangeRate PascalsPerMinute<T>(this T value) =>
            PressureChangeRate.FromPascalsPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="PressureChangeRate.FromPascalsPerSecond(UnitsNet.QuantityValue)" />
        public static PressureChangeRate PascalsPerSecond<T>(this T value) =>
            PressureChangeRate.FromPascalsPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="PressureChangeRate.FromPoundsForcePerSquareInchPerMinute(UnitsNet.QuantityValue)" />
        public static PressureChangeRate PoundsForcePerSquareInchPerMinute<T>(this T value) =>
            PressureChangeRate.FromPoundsForcePerSquareInchPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="PressureChangeRate.FromPoundsForcePerSquareInchPerSecond(UnitsNet.QuantityValue)" />
        public static PressureChangeRate PoundsForcePerSquareInchPerSecond<T>(this T value) =>
            PressureChangeRate.FromPoundsForcePerSquareInchPerSecond(Convert.ToDouble(value));

    }
}
