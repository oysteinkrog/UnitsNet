//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToEnergy
{
    /// <summary>
    /// A number to Energy Extensions
    /// </summary>
    public static class NumberToEnergyExtensions
    {
        /// <inheritdoc cref="Energy.FromBritishThermalUnits(UnitsNet.QuantityValue)" />
        public static Energy BritishThermalUnits<T>(this T value) =>
            Energy.FromBritishThermalUnits(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromCalories(UnitsNet.QuantityValue)" />
        public static Energy Calories<T>(this T value) =>
            Energy.FromCalories(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromDecathermsEc(UnitsNet.QuantityValue)" />
        public static Energy DecathermsEc<T>(this T value) =>
            Energy.FromDecathermsEc(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromDecathermsImperial(UnitsNet.QuantityValue)" />
        public static Energy DecathermsImperial<T>(this T value) =>
            Energy.FromDecathermsImperial(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromDecathermsUs(UnitsNet.QuantityValue)" />
        public static Energy DecathermsUs<T>(this T value) =>
            Energy.FromDecathermsUs(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromElectronVolts(UnitsNet.QuantityValue)" />
        public static Energy ElectronVolts<T>(this T value) =>
            Energy.FromElectronVolts(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromErgs(UnitsNet.QuantityValue)" />
        public static Energy Ergs<T>(this T value) =>
            Energy.FromErgs(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromFootPounds(UnitsNet.QuantityValue)" />
        public static Energy FootPounds<T>(this T value) =>
            Energy.FromFootPounds(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromGigabritishThermalUnits(UnitsNet.QuantityValue)" />
        public static Energy GigabritishThermalUnits<T>(this T value) =>
            Energy.FromGigabritishThermalUnits(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromGigaelectronVolts(UnitsNet.QuantityValue)" />
        public static Energy GigaelectronVolts<T>(this T value) =>
            Energy.FromGigaelectronVolts(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromGigajoules(UnitsNet.QuantityValue)" />
        public static Energy Gigajoules<T>(this T value) =>
            Energy.FromGigajoules(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromGigawattDays(UnitsNet.QuantityValue)" />
        public static Energy GigawattDays<T>(this T value) =>
            Energy.FromGigawattDays(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromGigawattHours(UnitsNet.QuantityValue)" />
        public static Energy GigawattHours<T>(this T value) =>
            Energy.FromGigawattHours(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromHorsepowerHours(UnitsNet.QuantityValue)" />
        public static Energy HorsepowerHours<T>(this T value) =>
            Energy.FromHorsepowerHours(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromJoules(UnitsNet.QuantityValue)" />
        public static Energy Joules<T>(this T value) =>
            Energy.FromJoules(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromKilobritishThermalUnits(UnitsNet.QuantityValue)" />
        public static Energy KilobritishThermalUnits<T>(this T value) =>
            Energy.FromKilobritishThermalUnits(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromKilocalories(UnitsNet.QuantityValue)" />
        public static Energy Kilocalories<T>(this T value) =>
            Energy.FromKilocalories(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromKiloelectronVolts(UnitsNet.QuantityValue)" />
        public static Energy KiloelectronVolts<T>(this T value) =>
            Energy.FromKiloelectronVolts(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromKilojoules(UnitsNet.QuantityValue)" />
        public static Energy Kilojoules<T>(this T value) =>
            Energy.FromKilojoules(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromKilowattDays(UnitsNet.QuantityValue)" />
        public static Energy KilowattDays<T>(this T value) =>
            Energy.FromKilowattDays(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromKilowattHours(UnitsNet.QuantityValue)" />
        public static Energy KilowattHours<T>(this T value) =>
            Energy.FromKilowattHours(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromMegabritishThermalUnits(UnitsNet.QuantityValue)" />
        public static Energy MegabritishThermalUnits<T>(this T value) =>
            Energy.FromMegabritishThermalUnits(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromMegacalories(UnitsNet.QuantityValue)" />
        public static Energy Megacalories<T>(this T value) =>
            Energy.FromMegacalories(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromMegaelectronVolts(UnitsNet.QuantityValue)" />
        public static Energy MegaelectronVolts<T>(this T value) =>
            Energy.FromMegaelectronVolts(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromMegajoules(UnitsNet.QuantityValue)" />
        public static Energy Megajoules<T>(this T value) =>
            Energy.FromMegajoules(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromMegawattDays(UnitsNet.QuantityValue)" />
        public static Energy MegawattDays<T>(this T value) =>
            Energy.FromMegawattDays(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromMegawattHours(UnitsNet.QuantityValue)" />
        public static Energy MegawattHours<T>(this T value) =>
            Energy.FromMegawattHours(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromMillijoules(UnitsNet.QuantityValue)" />
        public static Energy Millijoules<T>(this T value) =>
            Energy.FromMillijoules(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromTeraelectronVolts(UnitsNet.QuantityValue)" />
        public static Energy TeraelectronVolts<T>(this T value) =>
            Energy.FromTeraelectronVolts(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromTerawattDays(UnitsNet.QuantityValue)" />
        public static Energy TerawattDays<T>(this T value) =>
            Energy.FromTerawattDays(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromTerawattHours(UnitsNet.QuantityValue)" />
        public static Energy TerawattHours<T>(this T value) =>
            Energy.FromTerawattHours(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromThermsEc(UnitsNet.QuantityValue)" />
        public static Energy ThermsEc<T>(this T value) =>
            Energy.FromThermsEc(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromThermsImperial(UnitsNet.QuantityValue)" />
        public static Energy ThermsImperial<T>(this T value) =>
            Energy.FromThermsImperial(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromThermsUs(UnitsNet.QuantityValue)" />
        public static Energy ThermsUs<T>(this T value) =>
            Energy.FromThermsUs(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromWattDays(UnitsNet.QuantityValue)" />
        public static Energy WattDays<T>(this T value) =>
            Energy.FromWattDays(Convert.ToDouble(value));

        /// <inheritdoc cref="Energy.FromWattHours(UnitsNet.QuantityValue)" />
        public static Energy WattHours<T>(this T value) =>
            Energy.FromWattHours(Convert.ToDouble(value));

    }
}
