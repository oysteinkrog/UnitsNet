//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToSpeed
{
    /// <summary>
    /// A number to Speed Extensions
    /// </summary>
    public static class NumberToSpeedExtensions
    {
        /// <inheritdoc cref="Speed.FromCentimetersPerHour(UnitsNet.QuantityValue)" />
        public static Speed CentimetersPerHour<T>(this T value) =>
            Speed.FromCentimetersPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromCentimetersPerMinutes(UnitsNet.QuantityValue)" />
        public static Speed CentimetersPerMinutes<T>(this T value) =>
            Speed.FromCentimetersPerMinutes(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromCentimetersPerSecond(UnitsNet.QuantityValue)" />
        public static Speed CentimetersPerSecond<T>(this T value) =>
            Speed.FromCentimetersPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromDecimetersPerMinutes(UnitsNet.QuantityValue)" />
        public static Speed DecimetersPerMinutes<T>(this T value) =>
            Speed.FromDecimetersPerMinutes(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromDecimetersPerSecond(UnitsNet.QuantityValue)" />
        public static Speed DecimetersPerSecond<T>(this T value) =>
            Speed.FromDecimetersPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromFeetPerHour(UnitsNet.QuantityValue)" />
        public static Speed FeetPerHour<T>(this T value) =>
            Speed.FromFeetPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromFeetPerMinute(UnitsNet.QuantityValue)" />
        public static Speed FeetPerMinute<T>(this T value) =>
            Speed.FromFeetPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromFeetPerSecond(UnitsNet.QuantityValue)" />
        public static Speed FeetPerSecond<T>(this T value) =>
            Speed.FromFeetPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromInchesPerHour(UnitsNet.QuantityValue)" />
        public static Speed InchesPerHour<T>(this T value) =>
            Speed.FromInchesPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromInchesPerMinute(UnitsNet.QuantityValue)" />
        public static Speed InchesPerMinute<T>(this T value) =>
            Speed.FromInchesPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromInchesPerSecond(UnitsNet.QuantityValue)" />
        public static Speed InchesPerSecond<T>(this T value) =>
            Speed.FromInchesPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromKilometersPerHour(UnitsNet.QuantityValue)" />
        public static Speed KilometersPerHour<T>(this T value) =>
            Speed.FromKilometersPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromKilometersPerMinutes(UnitsNet.QuantityValue)" />
        public static Speed KilometersPerMinutes<T>(this T value) =>
            Speed.FromKilometersPerMinutes(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromKilometersPerSecond(UnitsNet.QuantityValue)" />
        public static Speed KilometersPerSecond<T>(this T value) =>
            Speed.FromKilometersPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromKnots(UnitsNet.QuantityValue)" />
        public static Speed Knots<T>(this T value) =>
            Speed.FromKnots(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromMach(UnitsNet.QuantityValue)" />
        public static Speed Mach<T>(this T value) =>
            Speed.FromMach(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromMetersPerHour(UnitsNet.QuantityValue)" />
        public static Speed MetersPerHour<T>(this T value) =>
            Speed.FromMetersPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromMetersPerMinutes(UnitsNet.QuantityValue)" />
        public static Speed MetersPerMinutes<T>(this T value) =>
            Speed.FromMetersPerMinutes(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromMetersPerSecond(UnitsNet.QuantityValue)" />
        public static Speed MetersPerSecond<T>(this T value) =>
            Speed.FromMetersPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromMicrometersPerMinutes(UnitsNet.QuantityValue)" />
        public static Speed MicrometersPerMinutes<T>(this T value) =>
            Speed.FromMicrometersPerMinutes(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromMicrometersPerSecond(UnitsNet.QuantityValue)" />
        public static Speed MicrometersPerSecond<T>(this T value) =>
            Speed.FromMicrometersPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromMilesPerHour(UnitsNet.QuantityValue)" />
        public static Speed MilesPerHour<T>(this T value) =>
            Speed.FromMilesPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromMillimetersPerHour(UnitsNet.QuantityValue)" />
        public static Speed MillimetersPerHour<T>(this T value) =>
            Speed.FromMillimetersPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromMillimetersPerMinutes(UnitsNet.QuantityValue)" />
        public static Speed MillimetersPerMinutes<T>(this T value) =>
            Speed.FromMillimetersPerMinutes(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromMillimetersPerSecond(UnitsNet.QuantityValue)" />
        public static Speed MillimetersPerSecond<T>(this T value) =>
            Speed.FromMillimetersPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromNanometersPerMinutes(UnitsNet.QuantityValue)" />
        public static Speed NanometersPerMinutes<T>(this T value) =>
            Speed.FromNanometersPerMinutes(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromNanometersPerSecond(UnitsNet.QuantityValue)" />
        public static Speed NanometersPerSecond<T>(this T value) =>
            Speed.FromNanometersPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromUsSurveyFeetPerHour(UnitsNet.QuantityValue)" />
        public static Speed UsSurveyFeetPerHour<T>(this T value) =>
            Speed.FromUsSurveyFeetPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromUsSurveyFeetPerMinute(UnitsNet.QuantityValue)" />
        public static Speed UsSurveyFeetPerMinute<T>(this T value) =>
            Speed.FromUsSurveyFeetPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromUsSurveyFeetPerSecond(UnitsNet.QuantityValue)" />
        public static Speed UsSurveyFeetPerSecond<T>(this T value) =>
            Speed.FromUsSurveyFeetPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromYardsPerHour(UnitsNet.QuantityValue)" />
        public static Speed YardsPerHour<T>(this T value) =>
            Speed.FromYardsPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromYardsPerMinute(UnitsNet.QuantityValue)" />
        public static Speed YardsPerMinute<T>(this T value) =>
            Speed.FromYardsPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="Speed.FromYardsPerSecond(UnitsNet.QuantityValue)" />
        public static Speed YardsPerSecond<T>(this T value) =>
            Speed.FromYardsPerSecond(Convert.ToDouble(value));

    }
}
