//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;
using UnitsNet.InternalHelpers;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     The SpecificEnergy
    /// </summary>
    /// <remarks>
    ///     https://en.wikipedia.org/wiki/Specific_energy
    /// </remarks>
    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
    public sealed partial class SpecificEnergy : IQuantity
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly SpecificEnergyUnit? _unit;

        static SpecificEnergy()
        {
            BaseDimensions = new BaseDimensions(2, 0, -2, 0, 0, 0, 0);
            BaseUnit = SpecificEnergyUnit.JoulePerKilogram;
            MaxValue = new SpecificEnergy(double.MaxValue, BaseUnit);
            MinValue = new SpecificEnergy(double.MinValue, BaseUnit);
            QuantityType = QuantityType.SpecificEnergy;
            Units = Enum.GetValues(typeof(SpecificEnergyUnit)).Cast<SpecificEnergyUnit>().Except(new SpecificEnergyUnit[]{ SpecificEnergyUnit.Undefined }).ToArray();
            Zero = new SpecificEnergy(0, BaseUnit);
            Info = new QuantityInfo(QuantityType.SpecificEnergy, Units.Cast<Enum>().ToArray(), BaseUnit, Zero, BaseDimensions);
        }

        /// <summary>
        ///     Creates the quantity with a value of 0 in the base unit JoulePerKilogram.
        /// </summary>
        /// <remarks>
        ///     Windows Runtime Component requires a default constructor.
        /// </remarks>
        public SpecificEnergy()
        {
            _value = 0;
            _unit = BaseUnit;
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        private SpecificEnergy(double value, SpecificEnergyUnit unit)
        {
            if (unit == SpecificEnergyUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(value, nameof(value));
            _unit = unit;
        }

        #region Static Properties

        /// <summary>
        ///     Information about the quantity type, such as unit values and names.
        /// </summary>
        internal static QuantityInfo Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of SpecificEnergy, which is JoulePerKilogram. All conversions go via this value.
        /// </summary>
        public static SpecificEnergyUnit BaseUnit { get; }

        /// <summary>
        /// Represents the largest possible value of SpecificEnergy
        /// </summary>
        public static SpecificEnergy MaxValue { get; }

        /// <summary>
        /// Represents the smallest possible value of SpecificEnergy
        /// </summary>
        public static SpecificEnergy MinValue { get; }

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        [Obsolete("QuantityType will be removed in the future. Use the Info property instead.")]
        public static QuantityType QuantityType { get; }

        /// <summary>
        ///     All units of measurement for the SpecificEnergy quantity.
        /// </summary>
        public static SpecificEnergyUnit[] Units { get; }

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit JoulePerKilogram.
        /// </summary>
        public static SpecificEnergy Zero { get; }

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => Convert.ToDouble(_value);

        /// <inheritdoc cref="IQuantity.Unit"/>
        object IQuantity.Unit => Unit;

        /// <summary>
        ///     The unit this quantity was constructed with -or- <see cref="BaseUnit" /> if default ctor was used.
        /// </summary>
        public SpecificEnergyUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        internal QuantityInfo QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        [Obsolete("QuantityType will be removed in the future. Use the Info property instead.")]
        public QuantityType Type => SpecificEnergy.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => SpecificEnergy.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="SpecificEnergyUnit.BtuPerPound"/>
        /// </summary>
        public double BtuPerPound => As(SpecificEnergyUnit.BtuPerPound);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="SpecificEnergyUnit.CaloriePerGram"/>
        /// </summary>
        public double CaloriesPerGram => As(SpecificEnergyUnit.CaloriePerGram);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="SpecificEnergyUnit.GigawattDayPerKilogram"/>
        /// </summary>
        public double GigawattDaysPerKilogram => As(SpecificEnergyUnit.GigawattDayPerKilogram);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="SpecificEnergyUnit.GigawattDayPerShortTon"/>
        /// </summary>
        public double GigawattDaysPerShortTon => As(SpecificEnergyUnit.GigawattDayPerShortTon);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="SpecificEnergyUnit.GigawattDayPerTonne"/>
        /// </summary>
        public double GigawattDaysPerTonne => As(SpecificEnergyUnit.GigawattDayPerTonne);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="SpecificEnergyUnit.GigawattHourPerKilogram"/>
        /// </summary>
        public double GigawattHoursPerKilogram => As(SpecificEnergyUnit.GigawattHourPerKilogram);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="SpecificEnergyUnit.GigawattHourPerPound"/>
        /// </summary>
        public double GigawattHoursPerPound => As(SpecificEnergyUnit.GigawattHourPerPound);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="SpecificEnergyUnit.JoulePerKilogram"/>
        /// </summary>
        public double JoulesPerKilogram => As(SpecificEnergyUnit.JoulePerKilogram);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="SpecificEnergyUnit.KilocaloriePerGram"/>
        /// </summary>
        public double KilocaloriesPerGram => As(SpecificEnergyUnit.KilocaloriePerGram);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="SpecificEnergyUnit.KilojoulePerKilogram"/>
        /// </summary>
        public double KilojoulesPerKilogram => As(SpecificEnergyUnit.KilojoulePerKilogram);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="SpecificEnergyUnit.KilowattDayPerKilogram"/>
        /// </summary>
        public double KilowattDaysPerKilogram => As(SpecificEnergyUnit.KilowattDayPerKilogram);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="SpecificEnergyUnit.KilowattDayPerShortTon"/>
        /// </summary>
        public double KilowattDaysPerShortTon => As(SpecificEnergyUnit.KilowattDayPerShortTon);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="SpecificEnergyUnit.KilowattDayPerTonne"/>
        /// </summary>
        public double KilowattDaysPerTonne => As(SpecificEnergyUnit.KilowattDayPerTonne);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="SpecificEnergyUnit.KilowattHourPerKilogram"/>
        /// </summary>
        public double KilowattHoursPerKilogram => As(SpecificEnergyUnit.KilowattHourPerKilogram);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="SpecificEnergyUnit.KilowattHourPerPound"/>
        /// </summary>
        public double KilowattHoursPerPound => As(SpecificEnergyUnit.KilowattHourPerPound);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="SpecificEnergyUnit.MegajoulePerKilogram"/>
        /// </summary>
        public double MegajoulesPerKilogram => As(SpecificEnergyUnit.MegajoulePerKilogram);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="SpecificEnergyUnit.MegawattDayPerKilogram"/>
        /// </summary>
        public double MegawattDaysPerKilogram => As(SpecificEnergyUnit.MegawattDayPerKilogram);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="SpecificEnergyUnit.MegawattDayPerShortTon"/>
        /// </summary>
        public double MegawattDaysPerShortTon => As(SpecificEnergyUnit.MegawattDayPerShortTon);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="SpecificEnergyUnit.MegawattDayPerTonne"/>
        /// </summary>
        public double MegawattDaysPerTonne => As(SpecificEnergyUnit.MegawattDayPerTonne);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="SpecificEnergyUnit.MegawattHourPerKilogram"/>
        /// </summary>
        public double MegawattHoursPerKilogram => As(SpecificEnergyUnit.MegawattHourPerKilogram);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="SpecificEnergyUnit.MegawattHourPerPound"/>
        /// </summary>
        public double MegawattHoursPerPound => As(SpecificEnergyUnit.MegawattHourPerPound);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="SpecificEnergyUnit.TerawattDayPerKilogram"/>
        /// </summary>
        public double TerawattDaysPerKilogram => As(SpecificEnergyUnit.TerawattDayPerKilogram);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="SpecificEnergyUnit.TerawattDayPerShortTon"/>
        /// </summary>
        public double TerawattDaysPerShortTon => As(SpecificEnergyUnit.TerawattDayPerShortTon);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="SpecificEnergyUnit.TerawattDayPerTonne"/>
        /// </summary>
        public double TerawattDaysPerTonne => As(SpecificEnergyUnit.TerawattDayPerTonne);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="SpecificEnergyUnit.WattDayPerKilogram"/>
        /// </summary>
        public double WattDaysPerKilogram => As(SpecificEnergyUnit.WattDayPerKilogram);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="SpecificEnergyUnit.WattDayPerShortTon"/>
        /// </summary>
        public double WattDaysPerShortTon => As(SpecificEnergyUnit.WattDayPerShortTon);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="SpecificEnergyUnit.WattDayPerTonne"/>
        /// </summary>
        public double WattDaysPerTonne => As(SpecificEnergyUnit.WattDayPerTonne);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="SpecificEnergyUnit.WattHourPerKilogram"/>
        /// </summary>
        public double WattHoursPerKilogram => As(SpecificEnergyUnit.WattHourPerKilogram);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="SpecificEnergyUnit.WattHourPerPound"/>
        /// </summary>
        public double WattHoursPerPound => As(SpecificEnergyUnit.WattHourPerPound);

        #endregion

        #region Static Methods

        internal static void MapGeneratedLocalizations(UnitAbbreviationsCache unitAbbreviationsCache)
        {
            unitAbbreviationsCache.PerformAbbreviationMapping(SpecificEnergyUnit.BtuPerPound, new CultureInfo("en-US"), false, true, new string[]{"btu/lb"});
            unitAbbreviationsCache.PerformAbbreviationMapping(SpecificEnergyUnit.CaloriePerGram, new CultureInfo("en-US"), false, true, new string[]{"cal/g"});
            unitAbbreviationsCache.PerformAbbreviationMapping(SpecificEnergyUnit.GigawattDayPerKilogram, new CultureInfo("en-US"), false, true, new string[]{"GWd/kg"});
            unitAbbreviationsCache.PerformAbbreviationMapping(SpecificEnergyUnit.GigawattDayPerShortTon, new CultureInfo("en-US"), false, true, new string[]{"GWd/ST"});
            unitAbbreviationsCache.PerformAbbreviationMapping(SpecificEnergyUnit.GigawattDayPerTonne, new CultureInfo("en-US"), false, true, new string[]{"GWd/t"});
            unitAbbreviationsCache.PerformAbbreviationMapping(SpecificEnergyUnit.GigawattHourPerKilogram, new CultureInfo("en-US"), false, true, new string[]{"GWh/kg"});
            unitAbbreviationsCache.PerformAbbreviationMapping(SpecificEnergyUnit.GigawattHourPerPound, new CultureInfo("en-US"), false, true, new string[]{"GWh/lbs"});
            unitAbbreviationsCache.PerformAbbreviationMapping(SpecificEnergyUnit.JoulePerKilogram, new CultureInfo("en-US"), false, true, new string[]{"J/kg"});
            unitAbbreviationsCache.PerformAbbreviationMapping(SpecificEnergyUnit.KilocaloriePerGram, new CultureInfo("en-US"), false, true, new string[]{"kcal/g"});
            unitAbbreviationsCache.PerformAbbreviationMapping(SpecificEnergyUnit.KilojoulePerKilogram, new CultureInfo("en-US"), false, true, new string[]{"kJ/kg"});
            unitAbbreviationsCache.PerformAbbreviationMapping(SpecificEnergyUnit.KilowattDayPerKilogram, new CultureInfo("en-US"), false, true, new string[]{"kWd/kg"});
            unitAbbreviationsCache.PerformAbbreviationMapping(SpecificEnergyUnit.KilowattDayPerShortTon, new CultureInfo("en-US"), false, true, new string[]{"kWd/ST"});
            unitAbbreviationsCache.PerformAbbreviationMapping(SpecificEnergyUnit.KilowattDayPerTonne, new CultureInfo("en-US"), false, true, new string[]{"kWd/t"});
            unitAbbreviationsCache.PerformAbbreviationMapping(SpecificEnergyUnit.KilowattHourPerKilogram, new CultureInfo("en-US"), false, true, new string[]{"kWh/kg"});
            unitAbbreviationsCache.PerformAbbreviationMapping(SpecificEnergyUnit.KilowattHourPerPound, new CultureInfo("en-US"), false, true, new string[]{"kWh/lbs"});
            unitAbbreviationsCache.PerformAbbreviationMapping(SpecificEnergyUnit.MegajoulePerKilogram, new CultureInfo("en-US"), false, true, new string[]{"MJ/kg"});
            unitAbbreviationsCache.PerformAbbreviationMapping(SpecificEnergyUnit.MegawattDayPerKilogram, new CultureInfo("en-US"), false, true, new string[]{"MWd/kg"});
            unitAbbreviationsCache.PerformAbbreviationMapping(SpecificEnergyUnit.MegawattDayPerShortTon, new CultureInfo("en-US"), false, true, new string[]{"MWd/ST"});
            unitAbbreviationsCache.PerformAbbreviationMapping(SpecificEnergyUnit.MegawattDayPerTonne, new CultureInfo("en-US"), false, true, new string[]{"MWd/t"});
            unitAbbreviationsCache.PerformAbbreviationMapping(SpecificEnergyUnit.MegawattHourPerKilogram, new CultureInfo("en-US"), false, true, new string[]{"MWh/kg"});
            unitAbbreviationsCache.PerformAbbreviationMapping(SpecificEnergyUnit.MegawattHourPerPound, new CultureInfo("en-US"), false, true, new string[]{"MWh/lbs"});
            unitAbbreviationsCache.PerformAbbreviationMapping(SpecificEnergyUnit.TerawattDayPerKilogram, new CultureInfo("en-US"), false, true, new string[]{"TWd/kg"});
            unitAbbreviationsCache.PerformAbbreviationMapping(SpecificEnergyUnit.TerawattDayPerShortTon, new CultureInfo("en-US"), false, true, new string[]{"TWd/ST"});
            unitAbbreviationsCache.PerformAbbreviationMapping(SpecificEnergyUnit.TerawattDayPerTonne, new CultureInfo("en-US"), false, true, new string[]{"TWd/t"});
            unitAbbreviationsCache.PerformAbbreviationMapping(SpecificEnergyUnit.WattDayPerKilogram, new CultureInfo("en-US"), false, true, new string[]{"Wd/kg"});
            unitAbbreviationsCache.PerformAbbreviationMapping(SpecificEnergyUnit.WattDayPerShortTon, new CultureInfo("en-US"), false, true, new string[]{"Wd/ST"});
            unitAbbreviationsCache.PerformAbbreviationMapping(SpecificEnergyUnit.WattDayPerTonne, new CultureInfo("en-US"), false, true, new string[]{"Wd/t"});
            unitAbbreviationsCache.PerformAbbreviationMapping(SpecificEnergyUnit.WattHourPerKilogram, new CultureInfo("en-US"), false, true, new string[]{"Wh/kg"});
            unitAbbreviationsCache.PerformAbbreviationMapping(SpecificEnergyUnit.WattHourPerPound, new CultureInfo("en-US"), false, true, new string[]{"Wh/lbs"});
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(SpecificEnergyUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static string GetAbbreviation(SpecificEnergyUnit unit, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="SpecificEnergy"/> from <see cref="SpecificEnergyUnit.BtuPerPound"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEnergy FromBtuPerPound(double btuperpound)
        {
            double value = (double) btuperpound;
            return new SpecificEnergy(value, SpecificEnergyUnit.BtuPerPound);
        }

        /// <summary>
        ///     Creates a <see cref="SpecificEnergy"/> from <see cref="SpecificEnergyUnit.CaloriePerGram"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEnergy FromCaloriesPerGram(double caloriespergram)
        {
            double value = (double) caloriespergram;
            return new SpecificEnergy(value, SpecificEnergyUnit.CaloriePerGram);
        }

        /// <summary>
        ///     Creates a <see cref="SpecificEnergy"/> from <see cref="SpecificEnergyUnit.GigawattDayPerKilogram"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEnergy FromGigawattDaysPerKilogram(double gigawattdaysperkilogram)
        {
            double value = (double) gigawattdaysperkilogram;
            return new SpecificEnergy(value, SpecificEnergyUnit.GigawattDayPerKilogram);
        }

        /// <summary>
        ///     Creates a <see cref="SpecificEnergy"/> from <see cref="SpecificEnergyUnit.GigawattDayPerShortTon"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEnergy FromGigawattDaysPerShortTon(double gigawattdayspershortton)
        {
            double value = (double) gigawattdayspershortton;
            return new SpecificEnergy(value, SpecificEnergyUnit.GigawattDayPerShortTon);
        }

        /// <summary>
        ///     Creates a <see cref="SpecificEnergy"/> from <see cref="SpecificEnergyUnit.GigawattDayPerTonne"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEnergy FromGigawattDaysPerTonne(double gigawattdayspertonne)
        {
            double value = (double) gigawattdayspertonne;
            return new SpecificEnergy(value, SpecificEnergyUnit.GigawattDayPerTonne);
        }

        /// <summary>
        ///     Creates a <see cref="SpecificEnergy"/> from <see cref="SpecificEnergyUnit.GigawattHourPerKilogram"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEnergy FromGigawattHoursPerKilogram(double gigawatthoursperkilogram)
        {
            double value = (double) gigawatthoursperkilogram;
            return new SpecificEnergy(value, SpecificEnergyUnit.GigawattHourPerKilogram);
        }

        /// <summary>
        ///     Creates a <see cref="SpecificEnergy"/> from <see cref="SpecificEnergyUnit.GigawattHourPerPound"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEnergy FromGigawattHoursPerPound(double gigawatthoursperpound)
        {
            double value = (double) gigawatthoursperpound;
            return new SpecificEnergy(value, SpecificEnergyUnit.GigawattHourPerPound);
        }

        /// <summary>
        ///     Creates a <see cref="SpecificEnergy"/> from <see cref="SpecificEnergyUnit.JoulePerKilogram"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEnergy FromJoulesPerKilogram(double joulesperkilogram)
        {
            double value = (double) joulesperkilogram;
            return new SpecificEnergy(value, SpecificEnergyUnit.JoulePerKilogram);
        }

        /// <summary>
        ///     Creates a <see cref="SpecificEnergy"/> from <see cref="SpecificEnergyUnit.KilocaloriePerGram"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEnergy FromKilocaloriesPerGram(double kilocaloriespergram)
        {
            double value = (double) kilocaloriespergram;
            return new SpecificEnergy(value, SpecificEnergyUnit.KilocaloriePerGram);
        }

        /// <summary>
        ///     Creates a <see cref="SpecificEnergy"/> from <see cref="SpecificEnergyUnit.KilojoulePerKilogram"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEnergy FromKilojoulesPerKilogram(double kilojoulesperkilogram)
        {
            double value = (double) kilojoulesperkilogram;
            return new SpecificEnergy(value, SpecificEnergyUnit.KilojoulePerKilogram);
        }

        /// <summary>
        ///     Creates a <see cref="SpecificEnergy"/> from <see cref="SpecificEnergyUnit.KilowattDayPerKilogram"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEnergy FromKilowattDaysPerKilogram(double kilowattdaysperkilogram)
        {
            double value = (double) kilowattdaysperkilogram;
            return new SpecificEnergy(value, SpecificEnergyUnit.KilowattDayPerKilogram);
        }

        /// <summary>
        ///     Creates a <see cref="SpecificEnergy"/> from <see cref="SpecificEnergyUnit.KilowattDayPerShortTon"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEnergy FromKilowattDaysPerShortTon(double kilowattdayspershortton)
        {
            double value = (double) kilowattdayspershortton;
            return new SpecificEnergy(value, SpecificEnergyUnit.KilowattDayPerShortTon);
        }

        /// <summary>
        ///     Creates a <see cref="SpecificEnergy"/> from <see cref="SpecificEnergyUnit.KilowattDayPerTonne"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEnergy FromKilowattDaysPerTonne(double kilowattdayspertonne)
        {
            double value = (double) kilowattdayspertonne;
            return new SpecificEnergy(value, SpecificEnergyUnit.KilowattDayPerTonne);
        }

        /// <summary>
        ///     Creates a <see cref="SpecificEnergy"/> from <see cref="SpecificEnergyUnit.KilowattHourPerKilogram"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEnergy FromKilowattHoursPerKilogram(double kilowatthoursperkilogram)
        {
            double value = (double) kilowatthoursperkilogram;
            return new SpecificEnergy(value, SpecificEnergyUnit.KilowattHourPerKilogram);
        }

        /// <summary>
        ///     Creates a <see cref="SpecificEnergy"/> from <see cref="SpecificEnergyUnit.KilowattHourPerPound"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEnergy FromKilowattHoursPerPound(double kilowatthoursperpound)
        {
            double value = (double) kilowatthoursperpound;
            return new SpecificEnergy(value, SpecificEnergyUnit.KilowattHourPerPound);
        }

        /// <summary>
        ///     Creates a <see cref="SpecificEnergy"/> from <see cref="SpecificEnergyUnit.MegajoulePerKilogram"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEnergy FromMegajoulesPerKilogram(double megajoulesperkilogram)
        {
            double value = (double) megajoulesperkilogram;
            return new SpecificEnergy(value, SpecificEnergyUnit.MegajoulePerKilogram);
        }

        /// <summary>
        ///     Creates a <see cref="SpecificEnergy"/> from <see cref="SpecificEnergyUnit.MegawattDayPerKilogram"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEnergy FromMegawattDaysPerKilogram(double megawattdaysperkilogram)
        {
            double value = (double) megawattdaysperkilogram;
            return new SpecificEnergy(value, SpecificEnergyUnit.MegawattDayPerKilogram);
        }

        /// <summary>
        ///     Creates a <see cref="SpecificEnergy"/> from <see cref="SpecificEnergyUnit.MegawattDayPerShortTon"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEnergy FromMegawattDaysPerShortTon(double megawattdayspershortton)
        {
            double value = (double) megawattdayspershortton;
            return new SpecificEnergy(value, SpecificEnergyUnit.MegawattDayPerShortTon);
        }

        /// <summary>
        ///     Creates a <see cref="SpecificEnergy"/> from <see cref="SpecificEnergyUnit.MegawattDayPerTonne"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEnergy FromMegawattDaysPerTonne(double megawattdayspertonne)
        {
            double value = (double) megawattdayspertonne;
            return new SpecificEnergy(value, SpecificEnergyUnit.MegawattDayPerTonne);
        }

        /// <summary>
        ///     Creates a <see cref="SpecificEnergy"/> from <see cref="SpecificEnergyUnit.MegawattHourPerKilogram"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEnergy FromMegawattHoursPerKilogram(double megawatthoursperkilogram)
        {
            double value = (double) megawatthoursperkilogram;
            return new SpecificEnergy(value, SpecificEnergyUnit.MegawattHourPerKilogram);
        }

        /// <summary>
        ///     Creates a <see cref="SpecificEnergy"/> from <see cref="SpecificEnergyUnit.MegawattHourPerPound"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEnergy FromMegawattHoursPerPound(double megawatthoursperpound)
        {
            double value = (double) megawatthoursperpound;
            return new SpecificEnergy(value, SpecificEnergyUnit.MegawattHourPerPound);
        }

        /// <summary>
        ///     Creates a <see cref="SpecificEnergy"/> from <see cref="SpecificEnergyUnit.TerawattDayPerKilogram"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEnergy FromTerawattDaysPerKilogram(double terawattdaysperkilogram)
        {
            double value = (double) terawattdaysperkilogram;
            return new SpecificEnergy(value, SpecificEnergyUnit.TerawattDayPerKilogram);
        }

        /// <summary>
        ///     Creates a <see cref="SpecificEnergy"/> from <see cref="SpecificEnergyUnit.TerawattDayPerShortTon"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEnergy FromTerawattDaysPerShortTon(double terawattdayspershortton)
        {
            double value = (double) terawattdayspershortton;
            return new SpecificEnergy(value, SpecificEnergyUnit.TerawattDayPerShortTon);
        }

        /// <summary>
        ///     Creates a <see cref="SpecificEnergy"/> from <see cref="SpecificEnergyUnit.TerawattDayPerTonne"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEnergy FromTerawattDaysPerTonne(double terawattdayspertonne)
        {
            double value = (double) terawattdayspertonne;
            return new SpecificEnergy(value, SpecificEnergyUnit.TerawattDayPerTonne);
        }

        /// <summary>
        ///     Creates a <see cref="SpecificEnergy"/> from <see cref="SpecificEnergyUnit.WattDayPerKilogram"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEnergy FromWattDaysPerKilogram(double wattdaysperkilogram)
        {
            double value = (double) wattdaysperkilogram;
            return new SpecificEnergy(value, SpecificEnergyUnit.WattDayPerKilogram);
        }

        /// <summary>
        ///     Creates a <see cref="SpecificEnergy"/> from <see cref="SpecificEnergyUnit.WattDayPerShortTon"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEnergy FromWattDaysPerShortTon(double wattdayspershortton)
        {
            double value = (double) wattdayspershortton;
            return new SpecificEnergy(value, SpecificEnergyUnit.WattDayPerShortTon);
        }

        /// <summary>
        ///     Creates a <see cref="SpecificEnergy"/> from <see cref="SpecificEnergyUnit.WattDayPerTonne"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEnergy FromWattDaysPerTonne(double wattdayspertonne)
        {
            double value = (double) wattdayspertonne;
            return new SpecificEnergy(value, SpecificEnergyUnit.WattDayPerTonne);
        }

        /// <summary>
        ///     Creates a <see cref="SpecificEnergy"/> from <see cref="SpecificEnergyUnit.WattHourPerKilogram"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEnergy FromWattHoursPerKilogram(double watthoursperkilogram)
        {
            double value = (double) watthoursperkilogram;
            return new SpecificEnergy(value, SpecificEnergyUnit.WattHourPerKilogram);
        }

        /// <summary>
        ///     Creates a <see cref="SpecificEnergy"/> from <see cref="SpecificEnergyUnit.WattHourPerPound"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static SpecificEnergy FromWattHoursPerPound(double watthoursperpound)
        {
            double value = (double) watthoursperpound;
            return new SpecificEnergy(value, SpecificEnergyUnit.WattHourPerPound);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="SpecificEnergyUnit" /> to <see cref="SpecificEnergy" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>SpecificEnergy unit value.</returns>
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static SpecificEnergy From(double value, SpecificEnergyUnit fromUnit)
        {
            return new SpecificEnergy((double)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static SpecificEnergy Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static SpecificEnergy Parse(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.Parse<SpecificEnergy, SpecificEnergyUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out SpecificEnergy result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] string cultureName, out SpecificEnergy result)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.TryParse<SpecificEnergy, SpecificEnergyUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static SpecificEnergyUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static SpecificEnergyUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.Parse<SpecificEnergyUnit>(str, provider);
        }

        public static bool TryParseUnit(string str, out SpecificEnergyUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParseUnit(string str, [CanBeNull] string cultureName, out SpecificEnergyUnit unit)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.TryParse<SpecificEnergyUnit>(str, provider, out unit);
        }

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if (obj is null) throw new ArgumentNullException(nameof(obj));
            if (!(obj is SpecificEnergy objSpecificEnergy)) throw new ArgumentException("Expected type SpecificEnergy.", nameof(obj));

            return CompareTo(objSpecificEnergy);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        internal int CompareTo(SpecificEnergy other)
        {
            return _value.CompareTo(other.AsBaseNumericType(this.Unit));
        }

        [Windows.Foundation.Metadata.DefaultOverload]
        public override bool Equals(object obj)
        {
            if (obj is null || !(obj is SpecificEnergy objSpecificEnergy))
                return false;

            return Equals(objSpecificEnergy);
        }

        public bool Equals(SpecificEnergy other)
        {
            return _value.Equals(other.AsBaseNumericType(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another SpecificEnergy within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(SpecificEnergy other, double tolerance, ComparisonType comparisonType)
        {
            if (tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current SpecificEnergy.</returns>
        public override int GetHashCode()
        {
            return new { Info.Name, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        double IQuantity.As(object unit) => As((SpecificEnergyUnit)unit);

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(SpecificEnergyUnit unit)
        {
            if (Unit == unit)
                return Convert.ToDouble(Value);

            var converted = AsBaseNumericType(unit);
            return Convert.ToDouble(converted);
        }

        /// <summary>
        ///     Converts this SpecificEnergy to another SpecificEnergy with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A SpecificEnergy with the specified unit.</returns>
        public SpecificEnergy ToUnit(SpecificEnergyUnit unit)
        {
            var convertedValue = AsBaseNumericType(unit);
            return new SpecificEnergy(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double AsBaseUnit()
        {
            switch(Unit)
            {
                case SpecificEnergyUnit.BtuPerPound: return _value * 2326.000075362;
                case SpecificEnergyUnit.CaloriePerGram: return _value * 4.184e3;
                case SpecificEnergyUnit.GigawattDayPerKilogram: return (_value * (24 * 3.6e3)) * 1e9d;
                case SpecificEnergyUnit.GigawattDayPerShortTon: return (_value * ((24 * 3.6e3) / 9.0718474e2)) * 1e9d;
                case SpecificEnergyUnit.GigawattDayPerTonne: return (_value * ((24 * 3.6e3) / 1e3)) * 1e9d;
                case SpecificEnergyUnit.GigawattHourPerKilogram: return (_value * 3.6e3) * 1e9d;
                case SpecificEnergyUnit.GigawattHourPerPound: return (_value * 7.93664e3) * 1e9d;
                case SpecificEnergyUnit.JoulePerKilogram: return _value;
                case SpecificEnergyUnit.KilocaloriePerGram: return (_value * 4.184e3) * 1e3d;
                case SpecificEnergyUnit.KilojoulePerKilogram: return (_value) * 1e3d;
                case SpecificEnergyUnit.KilowattDayPerKilogram: return (_value * (24 * 3.6e3)) * 1e3d;
                case SpecificEnergyUnit.KilowattDayPerShortTon: return (_value * ((24 * 3.6e3) / 9.0718474e2)) * 1e3d;
                case SpecificEnergyUnit.KilowattDayPerTonne: return (_value * ((24 * 3.6e3) / 1e3)) * 1e3d;
                case SpecificEnergyUnit.KilowattHourPerKilogram: return (_value * 3.6e3) * 1e3d;
                case SpecificEnergyUnit.KilowattHourPerPound: return (_value * 7.93664e3) * 1e3d;
                case SpecificEnergyUnit.MegajoulePerKilogram: return (_value) * 1e6d;
                case SpecificEnergyUnit.MegawattDayPerKilogram: return (_value * (24 * 3.6e3)) * 1e6d;
                case SpecificEnergyUnit.MegawattDayPerShortTon: return (_value * ((24 * 3.6e3) / 9.0718474e2)) * 1e6d;
                case SpecificEnergyUnit.MegawattDayPerTonne: return (_value * ((24 * 3.6e3) / 1e3)) * 1e6d;
                case SpecificEnergyUnit.MegawattHourPerKilogram: return (_value * 3.6e3) * 1e6d;
                case SpecificEnergyUnit.MegawattHourPerPound: return (_value * 7.93664e3) * 1e6d;
                case SpecificEnergyUnit.TerawattDayPerKilogram: return (_value * (24 * 3.6e3)) * 1e12d;
                case SpecificEnergyUnit.TerawattDayPerShortTon: return (_value * ((24 * 3.6e3) / 9.0718474e2)) * 1e12d;
                case SpecificEnergyUnit.TerawattDayPerTonne: return (_value * ((24 * 3.6e3) / 1e3)) * 1e12d;
                case SpecificEnergyUnit.WattDayPerKilogram: return _value * (24 * 3.6e3);
                case SpecificEnergyUnit.WattDayPerShortTon: return _value * ((24 * 3.6e3) / 9.0718474e2);
                case SpecificEnergyUnit.WattDayPerTonne: return _value * ((24 * 3.6e3) / 1e3);
                case SpecificEnergyUnit.WattHourPerKilogram: return _value * 3.6e3;
                case SpecificEnergyUnit.WattHourPerPound: return _value * 7.93664e3;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double AsBaseNumericType(SpecificEnergyUnit unit)
        {
            if (Unit == unit)
                return _value;

            var baseUnitValue = AsBaseUnit();

            switch(unit)
            {
                case SpecificEnergyUnit.BtuPerPound: return baseUnitValue / 2326.000075362;
                case SpecificEnergyUnit.CaloriePerGram: return baseUnitValue / 4.184e3;
                case SpecificEnergyUnit.GigawattDayPerKilogram: return (baseUnitValue / (24 * 3.6e3)) / 1e9d;
                case SpecificEnergyUnit.GigawattDayPerShortTon: return (baseUnitValue / ((24 * 3.6e3) / 9.0718474e2)) / 1e9d;
                case SpecificEnergyUnit.GigawattDayPerTonne: return (baseUnitValue / ((24 * 3.6e3) / 1e3)) / 1e9d;
                case SpecificEnergyUnit.GigawattHourPerKilogram: return (baseUnitValue / 3.6e3) / 1e9d;
                case SpecificEnergyUnit.GigawattHourPerPound: return (baseUnitValue / 7.93664e3) / 1e9d;
                case SpecificEnergyUnit.JoulePerKilogram: return baseUnitValue;
                case SpecificEnergyUnit.KilocaloriePerGram: return (baseUnitValue / 4.184e3) / 1e3d;
                case SpecificEnergyUnit.KilojoulePerKilogram: return (baseUnitValue) / 1e3d;
                case SpecificEnergyUnit.KilowattDayPerKilogram: return (baseUnitValue / (24 * 3.6e3)) / 1e3d;
                case SpecificEnergyUnit.KilowattDayPerShortTon: return (baseUnitValue / ((24 * 3.6e3) / 9.0718474e2)) / 1e3d;
                case SpecificEnergyUnit.KilowattDayPerTonne: return (baseUnitValue / ((24 * 3.6e3) / 1e3)) / 1e3d;
                case SpecificEnergyUnit.KilowattHourPerKilogram: return (baseUnitValue / 3.6e3) / 1e3d;
                case SpecificEnergyUnit.KilowattHourPerPound: return (baseUnitValue / 7.93664e3) / 1e3d;
                case SpecificEnergyUnit.MegajoulePerKilogram: return (baseUnitValue) / 1e6d;
                case SpecificEnergyUnit.MegawattDayPerKilogram: return (baseUnitValue / (24 * 3.6e3)) / 1e6d;
                case SpecificEnergyUnit.MegawattDayPerShortTon: return (baseUnitValue / ((24 * 3.6e3) / 9.0718474e2)) / 1e6d;
                case SpecificEnergyUnit.MegawattDayPerTonne: return (baseUnitValue / ((24 * 3.6e3) / 1e3)) / 1e6d;
                case SpecificEnergyUnit.MegawattHourPerKilogram: return (baseUnitValue / 3.6e3) / 1e6d;
                case SpecificEnergyUnit.MegawattHourPerPound: return (baseUnitValue / 7.93664e3) / 1e6d;
                case SpecificEnergyUnit.TerawattDayPerKilogram: return (baseUnitValue / (24 * 3.6e3)) / 1e12d;
                case SpecificEnergyUnit.TerawattDayPerShortTon: return (baseUnitValue / ((24 * 3.6e3) / 9.0718474e2)) / 1e12d;
                case SpecificEnergyUnit.TerawattDayPerTonne: return (baseUnitValue / ((24 * 3.6e3) / 1e3)) / 1e12d;
                case SpecificEnergyUnit.WattDayPerKilogram: return baseUnitValue / (24 * 3.6e3);
                case SpecificEnergyUnit.WattDayPerShortTon: return baseUnitValue / ((24 * 3.6e3) / 9.0718474e2);
                case SpecificEnergyUnit.WattDayPerTonne: return baseUnitValue / ((24 * 3.6e3) / 1e3);
                case SpecificEnergyUnit.WattHourPerKilogram: return baseUnitValue / 3.6e3;
                case SpecificEnergyUnit.WattHourPerPound: return baseUnitValue / 7.93664e3;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(null);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName)
        {
            var provider = cultureName;
            return ToString(provider, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString(string cultureName, int significantDigitsAfterRadix)
        {
            var provider = cultureName;
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName, [NotNull] string format, [NotNull] params object[] args)
        {
            var provider = GetFormatProviderFromCultureName(cultureName);
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? GlobalConfiguration.DefaultCulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        #endregion

        private static IFormatProvider GetFormatProviderFromCultureName([CanBeNull] string cultureName)
        {
            return cultureName != null ? new CultureInfo(cultureName) : (IFormatProvider)null;
        }
    }
}
