//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;
using UnitsNet.InternalHelpers;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     Volume is the quantity of three-dimensional space enclosed by some closed boundary, for example, the space that a substance (solid, liquid, gas, or plasma) or shape occupies or contains.[1] Volume is often quantified numerically using the SI derived unit, the cubic metre. The volume of a container is generally understood to be the capacity of the container, i. e. the amount of fluid (gas or liquid) that the container could hold, rather than the amount of space the container itself displaces.
    /// </summary>
    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
    public sealed partial class Volume : IQuantity
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly VolumeUnit? _unit;

        static Volume()
        {
            BaseDimensions = new BaseDimensions(3, 0, 0, 0, 0, 0, 0);
            BaseUnit = VolumeUnit.CubicMeter;
            MaxValue = new Volume(double.MaxValue, BaseUnit);
            MinValue = new Volume(double.MinValue, BaseUnit);
            QuantityType = QuantityType.Volume;
            Units = Enum.GetValues(typeof(VolumeUnit)).Cast<VolumeUnit>().Except(new VolumeUnit[]{ VolumeUnit.Undefined }).ToArray();
            Zero = new Volume(0, BaseUnit);
            Info = new QuantityInfo(QuantityType.Volume, Units.Cast<Enum>().ToArray(), BaseUnit, Zero, BaseDimensions);
        }

        /// <summary>
        ///     Creates the quantity with a value of 0 in the base unit CubicMeter.
        /// </summary>
        /// <remarks>
        ///     Windows Runtime Component requires a default constructor.
        /// </remarks>
        public Volume()
        {
            _value = 0;
            _unit = BaseUnit;
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        private Volume(double value, VolumeUnit unit)
        {
            if (unit == VolumeUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(value, nameof(value));
            _unit = unit;
        }

        #region Static Properties

        /// <summary>
        ///     Information about the quantity type, such as unit values and names.
        /// </summary>
        internal static QuantityInfo Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of Volume, which is CubicMeter. All conversions go via this value.
        /// </summary>
        public static VolumeUnit BaseUnit { get; }

        /// <summary>
        /// Represents the largest possible value of Volume
        /// </summary>
        public static Volume MaxValue { get; }

        /// <summary>
        /// Represents the smallest possible value of Volume
        /// </summary>
        public static Volume MinValue { get; }

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        [Obsolete("QuantityType will be removed in the future. Use the Info property instead.")]
        public static QuantityType QuantityType { get; }

        /// <summary>
        ///     All units of measurement for the Volume quantity.
        /// </summary>
        public static VolumeUnit[] Units { get; }

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit CubicMeter.
        /// </summary>
        public static Volume Zero { get; }

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => Convert.ToDouble(_value);

        /// <inheritdoc cref="IQuantity.Unit"/>
        object IQuantity.Unit => Unit;

        /// <summary>
        ///     The unit this quantity was constructed with -or- <see cref="BaseUnit" /> if default ctor was used.
        /// </summary>
        public VolumeUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        internal QuantityInfo QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        [Obsolete("QuantityType will be removed in the future. Use the Info property instead.")]
        public QuantityType Type => Volume.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => Volume.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.AcreFoot"/>
        /// </summary>
        public double AcreFeet => As(VolumeUnit.AcreFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.AuTablespoon"/>
        /// </summary>
        public double AuTablespoons => As(VolumeUnit.AuTablespoon);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.BoardFoot"/>
        /// </summary>
        public double BoardFeet => As(VolumeUnit.BoardFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.Centiliter"/>
        /// </summary>
        public double Centiliters => As(VolumeUnit.Centiliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.CubicCentimeter"/>
        /// </summary>
        public double CubicCentimeters => As(VolumeUnit.CubicCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.CubicDecimeter"/>
        /// </summary>
        public double CubicDecimeters => As(VolumeUnit.CubicDecimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.CubicFoot"/>
        /// </summary>
        public double CubicFeet => As(VolumeUnit.CubicFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.CubicHectometer"/>
        /// </summary>
        public double CubicHectometers => As(VolumeUnit.CubicHectometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.CubicInch"/>
        /// </summary>
        public double CubicInches => As(VolumeUnit.CubicInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.CubicKilometer"/>
        /// </summary>
        public double CubicKilometers => As(VolumeUnit.CubicKilometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.CubicMeter"/>
        /// </summary>
        public double CubicMeters => As(VolumeUnit.CubicMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.CubicMicrometer"/>
        /// </summary>
        public double CubicMicrometers => As(VolumeUnit.CubicMicrometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.CubicMile"/>
        /// </summary>
        public double CubicMiles => As(VolumeUnit.CubicMile);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.CubicMillimeter"/>
        /// </summary>
        public double CubicMillimeters => As(VolumeUnit.CubicMillimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.CubicYard"/>
        /// </summary>
        public double CubicYards => As(VolumeUnit.CubicYard);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.Decaliter"/>
        /// </summary>
        public double Decaliters => As(VolumeUnit.Decaliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.DecausGallon"/>
        /// </summary>
        public double DecausGallons => As(VolumeUnit.DecausGallon);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.Deciliter"/>
        /// </summary>
        public double Deciliters => As(VolumeUnit.Deciliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.DeciusGallon"/>
        /// </summary>
        public double DeciusGallons => As(VolumeUnit.DeciusGallon);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.HectocubicFoot"/>
        /// </summary>
        public double HectocubicFeet => As(VolumeUnit.HectocubicFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.HectocubicMeter"/>
        /// </summary>
        public double HectocubicMeters => As(VolumeUnit.HectocubicMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.Hectoliter"/>
        /// </summary>
        public double Hectoliters => As(VolumeUnit.Hectoliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.HectousGallon"/>
        /// </summary>
        public double HectousGallons => As(VolumeUnit.HectousGallon);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.ImperialBeerBarrel"/>
        /// </summary>
        public double ImperialBeerBarrels => As(VolumeUnit.ImperialBeerBarrel);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.ImperialGallon"/>
        /// </summary>
        public double ImperialGallons => As(VolumeUnit.ImperialGallon);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.ImperialOunce"/>
        /// </summary>
        public double ImperialOunces => As(VolumeUnit.ImperialOunce);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.ImperialPint"/>
        /// </summary>
        public double ImperialPints => As(VolumeUnit.ImperialPint);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.KilocubicFoot"/>
        /// </summary>
        public double KilocubicFeet => As(VolumeUnit.KilocubicFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.KilocubicMeter"/>
        /// </summary>
        public double KilocubicMeters => As(VolumeUnit.KilocubicMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.KiloimperialGallon"/>
        /// </summary>
        public double KiloimperialGallons => As(VolumeUnit.KiloimperialGallon);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.Kiloliter"/>
        /// </summary>
        public double Kiloliters => As(VolumeUnit.Kiloliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.KilousGallon"/>
        /// </summary>
        public double KilousGallons => As(VolumeUnit.KilousGallon);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.Liter"/>
        /// </summary>
        public double Liters => As(VolumeUnit.Liter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.MegacubicFoot"/>
        /// </summary>
        public double MegacubicFeet => As(VolumeUnit.MegacubicFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.MegaimperialGallon"/>
        /// </summary>
        public double MegaimperialGallons => As(VolumeUnit.MegaimperialGallon);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.Megaliter"/>
        /// </summary>
        public double Megaliters => As(VolumeUnit.Megaliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.MegausGallon"/>
        /// </summary>
        public double MegausGallons => As(VolumeUnit.MegausGallon);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.MetricCup"/>
        /// </summary>
        public double MetricCups => As(VolumeUnit.MetricCup);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.MetricTeaspoon"/>
        /// </summary>
        public double MetricTeaspoons => As(VolumeUnit.MetricTeaspoon);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.Microliter"/>
        /// </summary>
        public double Microliters => As(VolumeUnit.Microliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.Milliliter"/>
        /// </summary>
        public double Milliliters => As(VolumeUnit.Milliliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.OilBarrel"/>
        /// </summary>
        public double OilBarrels => As(VolumeUnit.OilBarrel);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.UkTablespoon"/>
        /// </summary>
        public double UkTablespoons => As(VolumeUnit.UkTablespoon);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.UsBeerBarrel"/>
        /// </summary>
        public double UsBeerBarrels => As(VolumeUnit.UsBeerBarrel);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.UsCustomaryCup"/>
        /// </summary>
        public double UsCustomaryCups => As(VolumeUnit.UsCustomaryCup);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.UsGallon"/>
        /// </summary>
        public double UsGallons => As(VolumeUnit.UsGallon);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.UsLegalCup"/>
        /// </summary>
        public double UsLegalCups => As(VolumeUnit.UsLegalCup);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.UsOunce"/>
        /// </summary>
        public double UsOunces => As(VolumeUnit.UsOunce);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.UsPint"/>
        /// </summary>
        public double UsPints => As(VolumeUnit.UsPint);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.UsQuart"/>
        /// </summary>
        public double UsQuarts => As(VolumeUnit.UsQuart);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.UsTablespoon"/>
        /// </summary>
        public double UsTablespoons => As(VolumeUnit.UsTablespoon);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.UsTeaspoon"/>
        /// </summary>
        public double UsTeaspoons => As(VolumeUnit.UsTeaspoon);

        #endregion

        #region Static Methods

        internal static void MapGeneratedLocalizations(UnitAbbreviationsCache unitAbbreviationsCache)
        {
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.AcreFoot, new CultureInfo("en-US"), false, true, new string[]{"ac-ft", "acre-foot", "acre-feet"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.AuTablespoon, new CultureInfo("en-US"), false, true, new string[]{""});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.AuTablespoon, new CultureInfo("ru-RU"), false, true, new string[]{""});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.AuTablespoon, new CultureInfo("nb-NO"), false, true, new string[]{""});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.BoardFoot, new CultureInfo("en-US"), false, true, new string[]{"bf", "board foot", "board feet"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.BoardFoot, new CultureInfo("fr-CA"), false, true, new string[]{"pmp", "pied-planche", "pied de planche"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.Centiliter, new CultureInfo("en-US"), false, true, new string[]{"cl"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.Centiliter, new CultureInfo("ru-RU"), false, true, new string[]{"сл"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.CubicCentimeter, new CultureInfo("en-US"), false, true, new string[]{"cm³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.CubicCentimeter, new CultureInfo("ru-RU"), false, true, new string[]{"см³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.CubicDecimeter, new CultureInfo("en-US"), false, true, new string[]{"dm³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.CubicDecimeter, new CultureInfo("ru-RU"), false, true, new string[]{"дм³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.CubicFoot, new CultureInfo("en-US"), false, true, new string[]{"ft³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.CubicFoot, new CultureInfo("ru-RU"), false, true, new string[]{"фут³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.CubicHectometer, new CultureInfo("en-US"), false, true, new string[]{"hm³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.CubicHectometer, new CultureInfo("ru-RU"), false, true, new string[]{"гм³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.CubicInch, new CultureInfo("en-US"), false, true, new string[]{"in³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.CubicInch, new CultureInfo("ru-RU"), false, true, new string[]{"дюйм³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.CubicKilometer, new CultureInfo("en-US"), false, true, new string[]{"km³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.CubicKilometer, new CultureInfo("ru-RU"), false, true, new string[]{"км³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.CubicMeter, new CultureInfo("en-US"), false, true, new string[]{"m³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.CubicMeter, new CultureInfo("ru-RU"), false, true, new string[]{"м³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.CubicMicrometer, new CultureInfo("en-US"), false, true, new string[]{"µm³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.CubicMicrometer, new CultureInfo("ru-RU"), false, true, new string[]{"мкм³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.CubicMile, new CultureInfo("en-US"), false, true, new string[]{"mi³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.CubicMile, new CultureInfo("ru-RU"), false, true, new string[]{"миля³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.CubicMillimeter, new CultureInfo("en-US"), false, true, new string[]{"mm³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.CubicMillimeter, new CultureInfo("ru-RU"), false, true, new string[]{"мм³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.CubicYard, new CultureInfo("en-US"), false, true, new string[]{"yd³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.CubicYard, new CultureInfo("ru-RU"), false, true, new string[]{"ярд³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.Decaliter, new CultureInfo("en-US"), false, true, new string[]{"dal"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.Decaliter, new CultureInfo("ru-RU"), false, true, new string[]{"дал"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.DecausGallon, new CultureInfo("en-US"), false, true, new string[]{"dagal (U.S.)"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.DecausGallon, new CultureInfo("ru-RU"), false, true, new string[]{"даАмериканский галлон"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.Deciliter, new CultureInfo("en-US"), false, true, new string[]{"dl"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.Deciliter, new CultureInfo("ru-RU"), false, true, new string[]{"дл"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.DeciusGallon, new CultureInfo("en-US"), false, true, new string[]{"dgal (U.S.)"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.DeciusGallon, new CultureInfo("ru-RU"), false, true, new string[]{"дАмериканский галлон"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.HectocubicFoot, new CultureInfo("en-US"), false, true, new string[]{"hft³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.HectocubicFoot, new CultureInfo("ru-RU"), false, true, new string[]{"гфут³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.HectocubicMeter, new CultureInfo("en-US"), false, true, new string[]{"hm³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.HectocubicMeter, new CultureInfo("ru-RU"), false, true, new string[]{"гм³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.Hectoliter, new CultureInfo("en-US"), false, true, new string[]{"hl"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.Hectoliter, new CultureInfo("ru-RU"), false, true, new string[]{"гл"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.HectousGallon, new CultureInfo("en-US"), false, true, new string[]{"hgal (U.S.)"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.HectousGallon, new CultureInfo("ru-RU"), false, true, new string[]{"гАмериканский галлон"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.ImperialBeerBarrel, new CultureInfo("en-US"), false, true, new string[]{"bl (imp.)"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.ImperialGallon, new CultureInfo("en-US"), false, true, new string[]{"gal (imp.)"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.ImperialGallon, new CultureInfo("ru-RU"), false, true, new string[]{"Английский галлон"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.ImperialOunce, new CultureInfo("en-US"), false, true, new string[]{"oz (imp.)"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.ImperialOunce, new CultureInfo("ru-RU"), false, true, new string[]{"Английская унция"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.ImperialPint, new CultureInfo("en-US"), false, true, new string[]{"pt (imp.)", "UK pt", "pt", "p"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.KilocubicFoot, new CultureInfo("en-US"), false, true, new string[]{"kft³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.KilocubicFoot, new CultureInfo("ru-RU"), false, true, new string[]{"кфут³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.KilocubicMeter, new CultureInfo("en-US"), false, true, new string[]{"km³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.KilocubicMeter, new CultureInfo("ru-RU"), false, true, new string[]{"км³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.KiloimperialGallon, new CultureInfo("en-US"), false, true, new string[]{"kgal (imp.)"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.KiloimperialGallon, new CultureInfo("ru-RU"), false, true, new string[]{"кАнглийский галлон"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.Kiloliter, new CultureInfo("en-US"), false, true, new string[]{"kl"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.Kiloliter, new CultureInfo("ru-RU"), false, true, new string[]{"кл"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.KilousGallon, new CultureInfo("en-US"), false, true, new string[]{"kgal (U.S.)"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.KilousGallon, new CultureInfo("ru-RU"), false, true, new string[]{"кАмериканский галлон"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.Liter, new CultureInfo("en-US"), false, true, new string[]{"l"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.Liter, new CultureInfo("ru-RU"), false, true, new string[]{"л"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.MegacubicFoot, new CultureInfo("en-US"), false, true, new string[]{"Mft³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.MegacubicFoot, new CultureInfo("ru-RU"), false, true, new string[]{"Мфут³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.MegaimperialGallon, new CultureInfo("en-US"), false, true, new string[]{"Mgal (imp.)"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.MegaimperialGallon, new CultureInfo("ru-RU"), false, true, new string[]{"МАнглийский галлон"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.Megaliter, new CultureInfo("en-US"), false, true, new string[]{"Ml"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.Megaliter, new CultureInfo("ru-RU"), false, true, new string[]{"Мл"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.MegausGallon, new CultureInfo("en-US"), false, true, new string[]{"Mgal (U.S.)"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.MegausGallon, new CultureInfo("ru-RU"), false, true, new string[]{"МАмериканский галлон"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.MetricCup, new CultureInfo("en-US"), false, true, new string[]{""});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.MetricTeaspoon, new CultureInfo("en-US"), false, true, new string[]{"tsp", "t", "ts", "tspn", "t.", "ts.", "tsp.", "tspn.", "teaspoon"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.MetricTeaspoon, new CultureInfo("ru-RU"), false, true, new string[]{""});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.MetricTeaspoon, new CultureInfo("nb-NO"), false, true, new string[]{""});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.Microliter, new CultureInfo("en-US"), false, true, new string[]{"µl"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.Microliter, new CultureInfo("ru-RU"), false, true, new string[]{"мкл"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.Milliliter, new CultureInfo("en-US"), false, true, new string[]{"ml"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.Milliliter, new CultureInfo("ru-RU"), false, true, new string[]{"мл"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.OilBarrel, new CultureInfo("en-US"), false, true, new string[]{"bbl"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.UkTablespoon, new CultureInfo("en-US"), false, true, new string[]{""});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.UkTablespoon, new CultureInfo("ru-RU"), false, true, new string[]{""});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.UkTablespoon, new CultureInfo("nb-NO"), false, true, new string[]{""});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.UsBeerBarrel, new CultureInfo("en-US"), false, true, new string[]{"bl (U.S.)"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.UsCustomaryCup, new CultureInfo("en-US"), false, true, new string[]{""});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.UsGallon, new CultureInfo("en-US"), false, true, new string[]{"gal (U.S.)"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.UsGallon, new CultureInfo("ru-RU"), false, true, new string[]{"Американский галлон"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.UsLegalCup, new CultureInfo("en-US"), false, true, new string[]{""});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.UsOunce, new CultureInfo("en-US"), false, true, new string[]{"oz (U.S.)"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.UsOunce, new CultureInfo("ru-RU"), false, true, new string[]{"Американская унция"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.UsPint, new CultureInfo("en-US"), false, true, new string[]{"pt (U.S.)"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.UsQuart, new CultureInfo("en-US"), false, true, new string[]{"qt (U.S.)"});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.UsTablespoon, new CultureInfo("en-US"), false, true, new string[]{""});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.UsTablespoon, new CultureInfo("ru-RU"), false, true, new string[]{""});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.UsTablespoon, new CultureInfo("nb-NO"), false, true, new string[]{""});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.UsTeaspoon, new CultureInfo("en-US"), false, true, new string[]{""});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.UsTeaspoon, new CultureInfo("ru-RU"), false, true, new string[]{""});
            unitAbbreviationsCache.PerformAbbreviationMapping(VolumeUnit.UsTeaspoon, new CultureInfo("nb-NO"), false, true, new string[]{""});
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(VolumeUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static string GetAbbreviation(VolumeUnit unit, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.AcreFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromAcreFeet(double acrefeet)
        {
            double value = (double) acrefeet;
            return new Volume(value, VolumeUnit.AcreFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.AuTablespoon"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromAuTablespoons(double autablespoons)
        {
            double value = (double) autablespoons;
            return new Volume(value, VolumeUnit.AuTablespoon);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.BoardFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromBoardFeet(double boardfeet)
        {
            double value = (double) boardfeet;
            return new Volume(value, VolumeUnit.BoardFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.Centiliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCentiliters(double centiliters)
        {
            double value = (double) centiliters;
            return new Volume(value, VolumeUnit.Centiliter);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicCentimeters(double cubiccentimeters)
        {
            double value = (double) cubiccentimeters;
            return new Volume(value, VolumeUnit.CubicCentimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicDecimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicDecimeters(double cubicdecimeters)
        {
            double value = (double) cubicdecimeters;
            return new Volume(value, VolumeUnit.CubicDecimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicFeet(double cubicfeet)
        {
            double value = (double) cubicfeet;
            return new Volume(value, VolumeUnit.CubicFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicHectometer"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicHectometers(double cubichectometers)
        {
            double value = (double) cubichectometers;
            return new Volume(value, VolumeUnit.CubicHectometer);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicInches(double cubicinches)
        {
            double value = (double) cubicinches;
            return new Volume(value, VolumeUnit.CubicInch);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicKilometer"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicKilometers(double cubickilometers)
        {
            double value = (double) cubickilometers;
            return new Volume(value, VolumeUnit.CubicKilometer);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicMeters(double cubicmeters)
        {
            double value = (double) cubicmeters;
            return new Volume(value, VolumeUnit.CubicMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicMicrometer"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicMicrometers(double cubicmicrometers)
        {
            double value = (double) cubicmicrometers;
            return new Volume(value, VolumeUnit.CubicMicrometer);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicMile"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicMiles(double cubicmiles)
        {
            double value = (double) cubicmiles;
            return new Volume(value, VolumeUnit.CubicMile);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicMillimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicMillimeters(double cubicmillimeters)
        {
            double value = (double) cubicmillimeters;
            return new Volume(value, VolumeUnit.CubicMillimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicYard"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicYards(double cubicyards)
        {
            double value = (double) cubicyards;
            return new Volume(value, VolumeUnit.CubicYard);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.Decaliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromDecaliters(double decaliters)
        {
            double value = (double) decaliters;
            return new Volume(value, VolumeUnit.Decaliter);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.DecausGallon"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromDecausGallons(double decausgallons)
        {
            double value = (double) decausgallons;
            return new Volume(value, VolumeUnit.DecausGallon);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.Deciliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromDeciliters(double deciliters)
        {
            double value = (double) deciliters;
            return new Volume(value, VolumeUnit.Deciliter);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.DeciusGallon"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromDeciusGallons(double deciusgallons)
        {
            double value = (double) deciusgallons;
            return new Volume(value, VolumeUnit.DeciusGallon);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.HectocubicFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromHectocubicFeet(double hectocubicfeet)
        {
            double value = (double) hectocubicfeet;
            return new Volume(value, VolumeUnit.HectocubicFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.HectocubicMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromHectocubicMeters(double hectocubicmeters)
        {
            double value = (double) hectocubicmeters;
            return new Volume(value, VolumeUnit.HectocubicMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.Hectoliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromHectoliters(double hectoliters)
        {
            double value = (double) hectoliters;
            return new Volume(value, VolumeUnit.Hectoliter);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.HectousGallon"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromHectousGallons(double hectousgallons)
        {
            double value = (double) hectousgallons;
            return new Volume(value, VolumeUnit.HectousGallon);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.ImperialBeerBarrel"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromImperialBeerBarrels(double imperialbeerbarrels)
        {
            double value = (double) imperialbeerbarrels;
            return new Volume(value, VolumeUnit.ImperialBeerBarrel);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.ImperialGallon"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromImperialGallons(double imperialgallons)
        {
            double value = (double) imperialgallons;
            return new Volume(value, VolumeUnit.ImperialGallon);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.ImperialOunce"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromImperialOunces(double imperialounces)
        {
            double value = (double) imperialounces;
            return new Volume(value, VolumeUnit.ImperialOunce);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.ImperialPint"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromImperialPints(double imperialpints)
        {
            double value = (double) imperialpints;
            return new Volume(value, VolumeUnit.ImperialPint);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.KilocubicFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromKilocubicFeet(double kilocubicfeet)
        {
            double value = (double) kilocubicfeet;
            return new Volume(value, VolumeUnit.KilocubicFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.KilocubicMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromKilocubicMeters(double kilocubicmeters)
        {
            double value = (double) kilocubicmeters;
            return new Volume(value, VolumeUnit.KilocubicMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.KiloimperialGallon"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromKiloimperialGallons(double kiloimperialgallons)
        {
            double value = (double) kiloimperialgallons;
            return new Volume(value, VolumeUnit.KiloimperialGallon);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.Kiloliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromKiloliters(double kiloliters)
        {
            double value = (double) kiloliters;
            return new Volume(value, VolumeUnit.Kiloliter);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.KilousGallon"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromKilousGallons(double kilousgallons)
        {
            double value = (double) kilousgallons;
            return new Volume(value, VolumeUnit.KilousGallon);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.Liter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromLiters(double liters)
        {
            double value = (double) liters;
            return new Volume(value, VolumeUnit.Liter);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.MegacubicFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromMegacubicFeet(double megacubicfeet)
        {
            double value = (double) megacubicfeet;
            return new Volume(value, VolumeUnit.MegacubicFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.MegaimperialGallon"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromMegaimperialGallons(double megaimperialgallons)
        {
            double value = (double) megaimperialgallons;
            return new Volume(value, VolumeUnit.MegaimperialGallon);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.Megaliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromMegaliters(double megaliters)
        {
            double value = (double) megaliters;
            return new Volume(value, VolumeUnit.Megaliter);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.MegausGallon"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromMegausGallons(double megausgallons)
        {
            double value = (double) megausgallons;
            return new Volume(value, VolumeUnit.MegausGallon);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.MetricCup"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromMetricCups(double metriccups)
        {
            double value = (double) metriccups;
            return new Volume(value, VolumeUnit.MetricCup);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.MetricTeaspoon"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromMetricTeaspoons(double metricteaspoons)
        {
            double value = (double) metricteaspoons;
            return new Volume(value, VolumeUnit.MetricTeaspoon);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.Microliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromMicroliters(double microliters)
        {
            double value = (double) microliters;
            return new Volume(value, VolumeUnit.Microliter);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.Milliliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromMilliliters(double milliliters)
        {
            double value = (double) milliliters;
            return new Volume(value, VolumeUnit.Milliliter);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.OilBarrel"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromOilBarrels(double oilbarrels)
        {
            double value = (double) oilbarrels;
            return new Volume(value, VolumeUnit.OilBarrel);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.UkTablespoon"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromUkTablespoons(double uktablespoons)
        {
            double value = (double) uktablespoons;
            return new Volume(value, VolumeUnit.UkTablespoon);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.UsBeerBarrel"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromUsBeerBarrels(double usbeerbarrels)
        {
            double value = (double) usbeerbarrels;
            return new Volume(value, VolumeUnit.UsBeerBarrel);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.UsCustomaryCup"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromUsCustomaryCups(double uscustomarycups)
        {
            double value = (double) uscustomarycups;
            return new Volume(value, VolumeUnit.UsCustomaryCup);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.UsGallon"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromUsGallons(double usgallons)
        {
            double value = (double) usgallons;
            return new Volume(value, VolumeUnit.UsGallon);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.UsLegalCup"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromUsLegalCups(double uslegalcups)
        {
            double value = (double) uslegalcups;
            return new Volume(value, VolumeUnit.UsLegalCup);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.UsOunce"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromUsOunces(double usounces)
        {
            double value = (double) usounces;
            return new Volume(value, VolumeUnit.UsOunce);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.UsPint"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromUsPints(double uspints)
        {
            double value = (double) uspints;
            return new Volume(value, VolumeUnit.UsPint);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.UsQuart"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromUsQuarts(double usquarts)
        {
            double value = (double) usquarts;
            return new Volume(value, VolumeUnit.UsQuart);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.UsTablespoon"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromUsTablespoons(double ustablespoons)
        {
            double value = (double) ustablespoons;
            return new Volume(value, VolumeUnit.UsTablespoon);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.UsTeaspoon"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromUsTeaspoons(double usteaspoons)
        {
            double value = (double) usteaspoons;
            return new Volume(value, VolumeUnit.UsTeaspoon);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="VolumeUnit" /> to <see cref="Volume" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Volume unit value.</returns>
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static Volume From(double value, VolumeUnit fromUnit)
        {
            return new Volume((double)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Volume Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static Volume Parse(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.Parse<Volume, VolumeUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out Volume result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] string cultureName, out Volume result)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.TryParse<Volume, VolumeUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static VolumeUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static VolumeUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.Parse<VolumeUnit>(str, provider);
        }

        public static bool TryParseUnit(string str, out VolumeUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParseUnit(string str, [CanBeNull] string cultureName, out VolumeUnit unit)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.TryParse<VolumeUnit>(str, provider, out unit);
        }

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if (obj is null) throw new ArgumentNullException(nameof(obj));
            if (!(obj is Volume objVolume)) throw new ArgumentException("Expected type Volume.", nameof(obj));

            return CompareTo(objVolume);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        internal int CompareTo(Volume other)
        {
            return _value.CompareTo(other.AsBaseNumericType(this.Unit));
        }

        [Windows.Foundation.Metadata.DefaultOverload]
        public override bool Equals(object obj)
        {
            if (obj is null || !(obj is Volume objVolume))
                return false;

            return Equals(objVolume);
        }

        public bool Equals(Volume other)
        {
            return _value.Equals(other.AsBaseNumericType(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another Volume within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(Volume other, double tolerance, ComparisonType comparisonType)
        {
            if (tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current Volume.</returns>
        public override int GetHashCode()
        {
            return new { Info.Name, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        double IQuantity.As(object unit) => As((VolumeUnit)unit);

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(VolumeUnit unit)
        {
            if (Unit == unit)
                return Convert.ToDouble(Value);

            var converted = AsBaseNumericType(unit);
            return Convert.ToDouble(converted);
        }

        /// <summary>
        ///     Converts this Volume to another Volume with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Volume with the specified unit.</returns>
        public Volume ToUnit(VolumeUnit unit)
        {
            var convertedValue = AsBaseNumericType(unit);
            return new Volume(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double AsBaseUnit()
        {
            switch(Unit)
            {
                case VolumeUnit.AcreFoot: return _value / 0.000810714;
                case VolumeUnit.AuTablespoon: return _value * 2e-5;
                case VolumeUnit.BoardFoot: return _value * 2.3597372158e-3;
                case VolumeUnit.Centiliter: return (_value / 1e3) * 1e-2d;
                case VolumeUnit.CubicCentimeter: return _value / 1e6;
                case VolumeUnit.CubicDecimeter: return _value / 1e3;
                case VolumeUnit.CubicFoot: return _value * 2.8316846592e-2;
                case VolumeUnit.CubicHectometer: return _value * 1e6;
                case VolumeUnit.CubicInch: return _value * 1.6387 * 1e-5;
                case VolumeUnit.CubicKilometer: return _value * 1e9;
                case VolumeUnit.CubicMeter: return _value;
                case VolumeUnit.CubicMicrometer: return _value / 1e18;
                case VolumeUnit.CubicMile: return _value * 4.16818182544058e9;
                case VolumeUnit.CubicMillimeter: return _value / 1e9;
                case VolumeUnit.CubicYard: return _value * 0.764554858;
                case VolumeUnit.Decaliter: return (_value / 1e3) * 1e1d;
                case VolumeUnit.DecausGallon: return (_value * 0.00378541) * 1e1d;
                case VolumeUnit.Deciliter: return (_value / 1e3) * 1e-1d;
                case VolumeUnit.DeciusGallon: return (_value * 0.00378541) * 1e-1d;
                case VolumeUnit.HectocubicFoot: return (_value * 2.8316846592e-2) * 1e2d;
                case VolumeUnit.HectocubicMeter: return (_value) * 1e2d;
                case VolumeUnit.Hectoliter: return (_value / 1e3) * 1e2d;
                case VolumeUnit.HectousGallon: return (_value * 0.00378541) * 1e2d;
                case VolumeUnit.ImperialBeerBarrel: return _value * 0.16365924;
                case VolumeUnit.ImperialGallon: return _value * 0.00454609000000181429905810072407;
                case VolumeUnit.ImperialOunce: return _value * 2.8413062499962901241875439064617e-5;
                case VolumeUnit.ImperialPint: return _value * 5.6826125e-4;
                case VolumeUnit.KilocubicFoot: return (_value * 2.8316846592e-2) * 1e3d;
                case VolumeUnit.KilocubicMeter: return (_value) * 1e3d;
                case VolumeUnit.KiloimperialGallon: return (_value * 0.00454609000000181429905810072407) * 1e3d;
                case VolumeUnit.Kiloliter: return (_value / 1e3) * 1e3d;
                case VolumeUnit.KilousGallon: return (_value * 0.00378541) * 1e3d;
                case VolumeUnit.Liter: return _value / 1e3;
                case VolumeUnit.MegacubicFoot: return (_value * 2.8316846592e-2) * 1e6d;
                case VolumeUnit.MegaimperialGallon: return (_value * 0.00454609000000181429905810072407) * 1e6d;
                case VolumeUnit.Megaliter: return (_value / 1e3) * 1e6d;
                case VolumeUnit.MegausGallon: return (_value * 0.00378541) * 1e6d;
                case VolumeUnit.MetricCup: return _value * 0.00025;
                case VolumeUnit.MetricTeaspoon: return _value * 0.5e-5;
                case VolumeUnit.Microliter: return (_value / 1e3) * 1e-6d;
                case VolumeUnit.Milliliter: return (_value / 1e3) * 1e-3d;
                case VolumeUnit.OilBarrel: return _value * 0.158987294928;
                case VolumeUnit.UkTablespoon: return _value * 1.5e-5;
                case VolumeUnit.UsBeerBarrel: return _value * 0.1173477658;
                case VolumeUnit.UsCustomaryCup: return _value * 0.0002365882365;
                case VolumeUnit.UsGallon: return _value * 0.00378541;
                case VolumeUnit.UsLegalCup: return _value * 0.00024;
                case VolumeUnit.UsOunce: return _value * 2.957352956253760505068307980135e-5;
                case VolumeUnit.UsPint: return _value * 4.73176473e-4;
                case VolumeUnit.UsQuart: return _value * 9.46352946e-4;
                case VolumeUnit.UsTablespoon: return _value * 1.478676478125e-5;
                case VolumeUnit.UsTeaspoon: return _value * 4.92892159375e-6;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double AsBaseNumericType(VolumeUnit unit)
        {
            if (Unit == unit)
                return _value;

            var baseUnitValue = AsBaseUnit();

            switch(unit)
            {
                case VolumeUnit.AcreFoot: return baseUnitValue * 0.000810714;
                case VolumeUnit.AuTablespoon: return baseUnitValue / 2e-5;
                case VolumeUnit.BoardFoot: return baseUnitValue / 2.3597372158e-3;
                case VolumeUnit.Centiliter: return (baseUnitValue * 1e3) / 1e-2d;
                case VolumeUnit.CubicCentimeter: return baseUnitValue * 1e6;
                case VolumeUnit.CubicDecimeter: return baseUnitValue * 1e3;
                case VolumeUnit.CubicFoot: return baseUnitValue / 2.8316846592e-2;
                case VolumeUnit.CubicHectometer: return baseUnitValue / 1e6;
                case VolumeUnit.CubicInch: return baseUnitValue / (1.6387 * 1e-5);
                case VolumeUnit.CubicKilometer: return baseUnitValue / 1e9;
                case VolumeUnit.CubicMeter: return baseUnitValue;
                case VolumeUnit.CubicMicrometer: return baseUnitValue * 1e18;
                case VolumeUnit.CubicMile: return baseUnitValue / 4.16818182544058e9;
                case VolumeUnit.CubicMillimeter: return baseUnitValue * 1e9;
                case VolumeUnit.CubicYard: return baseUnitValue / 0.764554858;
                case VolumeUnit.Decaliter: return (baseUnitValue * 1e3) / 1e1d;
                case VolumeUnit.DecausGallon: return (baseUnitValue / 0.00378541) / 1e1d;
                case VolumeUnit.Deciliter: return (baseUnitValue * 1e3) / 1e-1d;
                case VolumeUnit.DeciusGallon: return (baseUnitValue / 0.00378541) / 1e-1d;
                case VolumeUnit.HectocubicFoot: return (baseUnitValue / 2.8316846592e-2) / 1e2d;
                case VolumeUnit.HectocubicMeter: return (baseUnitValue) / 1e2d;
                case VolumeUnit.Hectoliter: return (baseUnitValue * 1e3) / 1e2d;
                case VolumeUnit.HectousGallon: return (baseUnitValue / 0.00378541) / 1e2d;
                case VolumeUnit.ImperialBeerBarrel: return baseUnitValue / 0.16365924;
                case VolumeUnit.ImperialGallon: return baseUnitValue / 0.00454609000000181429905810072407;
                case VolumeUnit.ImperialOunce: return baseUnitValue / 2.8413062499962901241875439064617e-5;
                case VolumeUnit.ImperialPint: return baseUnitValue / 5.6826125e-4;
                case VolumeUnit.KilocubicFoot: return (baseUnitValue / 2.8316846592e-2) / 1e3d;
                case VolumeUnit.KilocubicMeter: return (baseUnitValue) / 1e3d;
                case VolumeUnit.KiloimperialGallon: return (baseUnitValue / 0.00454609000000181429905810072407) / 1e3d;
                case VolumeUnit.Kiloliter: return (baseUnitValue * 1e3) / 1e3d;
                case VolumeUnit.KilousGallon: return (baseUnitValue / 0.00378541) / 1e3d;
                case VolumeUnit.Liter: return baseUnitValue * 1e3;
                case VolumeUnit.MegacubicFoot: return (baseUnitValue / 2.8316846592e-2) / 1e6d;
                case VolumeUnit.MegaimperialGallon: return (baseUnitValue / 0.00454609000000181429905810072407) / 1e6d;
                case VolumeUnit.Megaliter: return (baseUnitValue * 1e3) / 1e6d;
                case VolumeUnit.MegausGallon: return (baseUnitValue / 0.00378541) / 1e6d;
                case VolumeUnit.MetricCup: return baseUnitValue / 0.00025;
                case VolumeUnit.MetricTeaspoon: return baseUnitValue / 0.5e-5;
                case VolumeUnit.Microliter: return (baseUnitValue * 1e3) / 1e-6d;
                case VolumeUnit.Milliliter: return (baseUnitValue * 1e3) / 1e-3d;
                case VolumeUnit.OilBarrel: return baseUnitValue / 0.158987294928;
                case VolumeUnit.UkTablespoon: return baseUnitValue / 1.5e-5;
                case VolumeUnit.UsBeerBarrel: return baseUnitValue / 0.1173477658;
                case VolumeUnit.UsCustomaryCup: return baseUnitValue / 0.0002365882365;
                case VolumeUnit.UsGallon: return baseUnitValue / 0.00378541;
                case VolumeUnit.UsLegalCup: return baseUnitValue / 0.00024;
                case VolumeUnit.UsOunce: return baseUnitValue / 2.957352956253760505068307980135e-5;
                case VolumeUnit.UsPint: return baseUnitValue / 4.73176473e-4;
                case VolumeUnit.UsQuart: return baseUnitValue / 9.46352946e-4;
                case VolumeUnit.UsTablespoon: return baseUnitValue / 1.478676478125e-5;
                case VolumeUnit.UsTeaspoon: return baseUnitValue / 4.92892159375e-6;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(null);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName)
        {
            var provider = cultureName;
            return ToString(provider, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString(string cultureName, int significantDigitsAfterRadix)
        {
            var provider = cultureName;
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName, [NotNull] string format, [NotNull] params object[] args)
        {
            var provider = GetFormatProviderFromCultureName(cultureName);
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? GlobalConfiguration.DefaultCulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        #endregion

        private static IFormatProvider GetFormatProviderFromCultureName([CanBeNull] string cultureName)
        {
            return cultureName != null ? new CultureInfo(cultureName) : (IFormatProvider)null;
        }
    }
}
