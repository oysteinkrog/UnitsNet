//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;
using UnitsNet.InternalHelpers;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     The density, or more precisely, the volumetric mass density, of a substance is its mass per unit volume.
    /// </summary>
    /// <remarks>
    ///     http://en.wikipedia.org/wiki/Density
    /// </remarks>
    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
    public sealed partial class Density : IQuantity
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly DensityUnit? _unit;

        static Density()
        {
            BaseDimensions = new BaseDimensions(-3, 1, 0, 0, 0, 0, 0);
            BaseUnit = DensityUnit.KilogramPerCubicMeter;
            MaxValue = new Density(double.MaxValue, BaseUnit);
            MinValue = new Density(double.MinValue, BaseUnit);
            QuantityType = QuantityType.Density;
            Units = Enum.GetValues(typeof(DensityUnit)).Cast<DensityUnit>().Except(new DensityUnit[]{ DensityUnit.Undefined }).ToArray();
            Zero = new Density(0, BaseUnit);
            Info = new QuantityInfo(QuantityType.Density, Units.Cast<Enum>().ToArray(), BaseUnit, Zero, BaseDimensions);
        }

        /// <summary>
        ///     Creates the quantity with a value of 0 in the base unit KilogramPerCubicMeter.
        /// </summary>
        /// <remarks>
        ///     Windows Runtime Component requires a default constructor.
        /// </remarks>
        public Density()
        {
            _value = 0;
            _unit = BaseUnit;
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        private Density(double value, DensityUnit unit)
        {
            if (unit == DensityUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(value, nameof(value));
            _unit = unit;
        }

        #region Static Properties

        /// <summary>
        ///     Information about the quantity type, such as unit values and names.
        /// </summary>
        internal static QuantityInfo Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of Density, which is KilogramPerCubicMeter. All conversions go via this value.
        /// </summary>
        public static DensityUnit BaseUnit { get; }

        /// <summary>
        /// Represents the largest possible value of Density
        /// </summary>
        public static Density MaxValue { get; }

        /// <summary>
        /// Represents the smallest possible value of Density
        /// </summary>
        public static Density MinValue { get; }

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        [Obsolete("QuantityType will be removed in the future. Use the Info property instead.")]
        public static QuantityType QuantityType { get; }

        /// <summary>
        ///     All units of measurement for the Density quantity.
        /// </summary>
        public static DensityUnit[] Units { get; }

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit KilogramPerCubicMeter.
        /// </summary>
        public static Density Zero { get; }

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => Convert.ToDouble(_value);

        /// <inheritdoc cref="IQuantity.Unit"/>
        object IQuantity.Unit => Unit;

        /// <summary>
        ///     The unit this quantity was constructed with -or- <see cref="BaseUnit" /> if default ctor was used.
        /// </summary>
        public DensityUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        internal QuantityInfo QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        [Obsolete("QuantityType will be removed in the future. Use the Info property instead.")]
        public QuantityType Type => Density.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => Density.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.CentigramPerDeciliter"/>
        /// </summary>
        public double CentigramsPerDeciLiter => As(DensityUnit.CentigramPerDeciliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.CentigramPerLiter"/>
        /// </summary>
        public double CentigramsPerLiter => As(DensityUnit.CentigramPerLiter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.CentigramPerMilliliter"/>
        /// </summary>
        public double CentigramsPerMilliliter => As(DensityUnit.CentigramPerMilliliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.DecigramPerDeciliter"/>
        /// </summary>
        public double DecigramsPerDeciLiter => As(DensityUnit.DecigramPerDeciliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.DecigramPerLiter"/>
        /// </summary>
        public double DecigramsPerLiter => As(DensityUnit.DecigramPerLiter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.DecigramPerMilliliter"/>
        /// </summary>
        public double DecigramsPerMilliliter => As(DensityUnit.DecigramPerMilliliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.GramPerCubicCentimeter"/>
        /// </summary>
        public double GramsPerCubicCentimeter => As(DensityUnit.GramPerCubicCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.GramPerCubicFoot"/>
        /// </summary>
        public double GramsPerCubicFoot => As(DensityUnit.GramPerCubicFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.GramPerCubicInch"/>
        /// </summary>
        public double GramsPerCubicInch => As(DensityUnit.GramPerCubicInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.GramPerCubicMeter"/>
        /// </summary>
        public double GramsPerCubicMeter => As(DensityUnit.GramPerCubicMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.GramPerCubicMillimeter"/>
        /// </summary>
        public double GramsPerCubicMillimeter => As(DensityUnit.GramPerCubicMillimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.GramPerDeciliter"/>
        /// </summary>
        public double GramsPerDeciLiter => As(DensityUnit.GramPerDeciliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.GramPerLiter"/>
        /// </summary>
        public double GramsPerLiter => As(DensityUnit.GramPerLiter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.GramPerMilliliter"/>
        /// </summary>
        public double GramsPerMilliliter => As(DensityUnit.GramPerMilliliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.KilogramPerCubicCentimeter"/>
        /// </summary>
        public double KilogramsPerCubicCentimeter => As(DensityUnit.KilogramPerCubicCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.KilogramPerCubicMeter"/>
        /// </summary>
        public double KilogramsPerCubicMeter => As(DensityUnit.KilogramPerCubicMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.KilogramPerCubicMillimeter"/>
        /// </summary>
        public double KilogramsPerCubicMillimeter => As(DensityUnit.KilogramPerCubicMillimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.KilogramPerLiter"/>
        /// </summary>
        public double KilogramsPerLiter => As(DensityUnit.KilogramPerLiter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.KilopoundPerCubicFoot"/>
        /// </summary>
        public double KilopoundsPerCubicFoot => As(DensityUnit.KilopoundPerCubicFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.KilopoundPerCubicInch"/>
        /// </summary>
        public double KilopoundsPerCubicInch => As(DensityUnit.KilopoundPerCubicInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.MicrogramPerCubicMeter"/>
        /// </summary>
        public double MicrogramsPerCubicMeter => As(DensityUnit.MicrogramPerCubicMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.MicrogramPerDeciliter"/>
        /// </summary>
        public double MicrogramsPerDeciLiter => As(DensityUnit.MicrogramPerDeciliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.MicrogramPerLiter"/>
        /// </summary>
        public double MicrogramsPerLiter => As(DensityUnit.MicrogramPerLiter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.MicrogramPerMilliliter"/>
        /// </summary>
        public double MicrogramsPerMilliliter => As(DensityUnit.MicrogramPerMilliliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.MilligramPerCubicMeter"/>
        /// </summary>
        public double MilligramsPerCubicMeter => As(DensityUnit.MilligramPerCubicMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.MilligramPerDeciliter"/>
        /// </summary>
        public double MilligramsPerDeciLiter => As(DensityUnit.MilligramPerDeciliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.MilligramPerLiter"/>
        /// </summary>
        public double MilligramsPerLiter => As(DensityUnit.MilligramPerLiter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.MilligramPerMilliliter"/>
        /// </summary>
        public double MilligramsPerMilliliter => As(DensityUnit.MilligramPerMilliliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.NanogramPerDeciliter"/>
        /// </summary>
        public double NanogramsPerDeciLiter => As(DensityUnit.NanogramPerDeciliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.NanogramPerLiter"/>
        /// </summary>
        public double NanogramsPerLiter => As(DensityUnit.NanogramPerLiter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.NanogramPerMilliliter"/>
        /// </summary>
        public double NanogramsPerMilliliter => As(DensityUnit.NanogramPerMilliliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.PicogramPerDeciliter"/>
        /// </summary>
        public double PicogramsPerDeciLiter => As(DensityUnit.PicogramPerDeciliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.PicogramPerLiter"/>
        /// </summary>
        public double PicogramsPerLiter => As(DensityUnit.PicogramPerLiter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.PicogramPerMilliliter"/>
        /// </summary>
        public double PicogramsPerMilliliter => As(DensityUnit.PicogramPerMilliliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.PoundPerCubicCentimeter"/>
        /// </summary>
        public double PoundsPerCubicCentimeter => As(DensityUnit.PoundPerCubicCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.PoundPerCubicFoot"/>
        /// </summary>
        public double PoundsPerCubicFoot => As(DensityUnit.PoundPerCubicFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.PoundPerCubicInch"/>
        /// </summary>
        public double PoundsPerCubicInch => As(DensityUnit.PoundPerCubicInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.PoundPerCubicMeter"/>
        /// </summary>
        public double PoundsPerCubicMeter => As(DensityUnit.PoundPerCubicMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.PoundPerCubicMillimeter"/>
        /// </summary>
        public double PoundsPerCubicMillimeter => As(DensityUnit.PoundPerCubicMillimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.PoundPerImperialGallon"/>
        /// </summary>
        public double PoundsPerImperialGallon => As(DensityUnit.PoundPerImperialGallon);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.PoundPerUSGallon"/>
        /// </summary>
        public double PoundsPerUSGallon => As(DensityUnit.PoundPerUSGallon);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.SlugPerCubicCentimeter"/>
        /// </summary>
        public double SlugsPerCubicCentimeter => As(DensityUnit.SlugPerCubicCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.SlugPerCubicFoot"/>
        /// </summary>
        public double SlugsPerCubicFoot => As(DensityUnit.SlugPerCubicFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.SlugPerCubicInch"/>
        /// </summary>
        public double SlugsPerCubicInch => As(DensityUnit.SlugPerCubicInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.SlugPerCubicMeter"/>
        /// </summary>
        public double SlugsPerCubicMeter => As(DensityUnit.SlugPerCubicMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.SlugPerCubicMillimeter"/>
        /// </summary>
        public double SlugsPerCubicMillimeter => As(DensityUnit.SlugPerCubicMillimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.TonnePerCubicCentimeter"/>
        /// </summary>
        public double TonnesPerCubicCentimeter => As(DensityUnit.TonnePerCubicCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.TonnePerCubicFoot"/>
        /// </summary>
        public double TonnesPerCubicFoot => As(DensityUnit.TonnePerCubicFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.TonnePerCubicInch"/>
        /// </summary>
        public double TonnesPerCubicInch => As(DensityUnit.TonnePerCubicInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.TonnePerCubicMeter"/>
        /// </summary>
        public double TonnesPerCubicMeter => As(DensityUnit.TonnePerCubicMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DensityUnit.TonnePerCubicMillimeter"/>
        /// </summary>
        public double TonnesPerCubicMillimeter => As(DensityUnit.TonnePerCubicMillimeter);

        #endregion

        #region Static Methods

        internal static void MapGeneratedLocalizations(UnitAbbreviationsCache unitAbbreviationsCache)
        {
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.CentigramPerDeciliter, new CultureInfo("en-US"), false, true, new string[]{"cg/dl"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.CentigramPerLiter, new CultureInfo("en-US"), false, true, new string[]{"cg/L"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.CentigramPerMilliliter, new CultureInfo("en-US"), false, true, new string[]{"cg/ml"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.DecigramPerDeciliter, new CultureInfo("en-US"), false, true, new string[]{"dg/dl"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.DecigramPerLiter, new CultureInfo("en-US"), false, true, new string[]{"dg/L"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.DecigramPerMilliliter, new CultureInfo("en-US"), false, true, new string[]{"dg/ml"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.GramPerCubicCentimeter, new CultureInfo("en-US"), false, true, new string[]{"g/cm³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.GramPerCubicFoot, new CultureInfo("en-US"), false, true, new string[]{"g/ft³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.GramPerCubicInch, new CultureInfo("en-US"), false, true, new string[]{"g/in³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.GramPerCubicMeter, new CultureInfo("en-US"), false, true, new string[]{"g/m³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.GramPerCubicMeter, new CultureInfo("ru-RU"), false, true, new string[]{"г/м³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.GramPerCubicMillimeter, new CultureInfo("en-US"), false, true, new string[]{"g/mm³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.GramPerDeciliter, new CultureInfo("en-US"), false, true, new string[]{"g/dl"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.GramPerLiter, new CultureInfo("en-US"), false, true, new string[]{"g/L"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.GramPerMilliliter, new CultureInfo("en-US"), false, true, new string[]{"g/ml"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.KilogramPerCubicCentimeter, new CultureInfo("en-US"), false, true, new string[]{"kg/cm³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.KilogramPerCubicMeter, new CultureInfo("en-US"), false, true, new string[]{"kg/m³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.KilogramPerCubicMeter, new CultureInfo("ru-RU"), false, true, new string[]{"кг/м³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.KilogramPerCubicMillimeter, new CultureInfo("en-US"), false, true, new string[]{"kg/mm³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.KilogramPerLiter, new CultureInfo("en-US"), false, true, new string[]{"kg/l"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.KilopoundPerCubicFoot, new CultureInfo("en-US"), false, true, new string[]{"kip/ft³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.KilopoundPerCubicInch, new CultureInfo("en-US"), false, true, new string[]{"kip/in³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.MicrogramPerCubicMeter, new CultureInfo("en-US"), false, true, new string[]{"µg/m³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.MicrogramPerCubicMeter, new CultureInfo("ru-RU"), false, true, new string[]{"мкг/м³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.MicrogramPerDeciliter, new CultureInfo("en-US"), false, true, new string[]{"µg/dl"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.MicrogramPerLiter, new CultureInfo("en-US"), false, true, new string[]{"µg/L"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.MicrogramPerMilliliter, new CultureInfo("en-US"), false, true, new string[]{"µg/ml"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.MilligramPerCubicMeter, new CultureInfo("en-US"), false, true, new string[]{"mg/m³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.MilligramPerCubicMeter, new CultureInfo("ru-RU"), false, true, new string[]{"мг/м³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.MilligramPerDeciliter, new CultureInfo("en-US"), false, true, new string[]{"mg/dl"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.MilligramPerLiter, new CultureInfo("en-US"), false, true, new string[]{"mg/L"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.MilligramPerMilliliter, new CultureInfo("en-US"), false, true, new string[]{"mg/ml"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.NanogramPerDeciliter, new CultureInfo("en-US"), false, true, new string[]{"ng/dl"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.NanogramPerLiter, new CultureInfo("en-US"), false, true, new string[]{"ng/L"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.NanogramPerMilliliter, new CultureInfo("en-US"), false, true, new string[]{"ng/ml"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.PicogramPerDeciliter, new CultureInfo("en-US"), false, true, new string[]{"pg/dl"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.PicogramPerLiter, new CultureInfo("en-US"), false, true, new string[]{"pg/L"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.PicogramPerMilliliter, new CultureInfo("en-US"), false, true, new string[]{"pg/ml"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.PoundPerCubicCentimeter, new CultureInfo("en-US"), false, true, new string[]{"lb/cm³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.PoundPerCubicFoot, new CultureInfo("en-US"), false, true, new string[]{"lb/ft³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.PoundPerCubicInch, new CultureInfo("en-US"), false, true, new string[]{"lb/in³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.PoundPerCubicMeter, new CultureInfo("en-US"), false, true, new string[]{"lb/m³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.PoundPerCubicMillimeter, new CultureInfo("en-US"), false, true, new string[]{"lb/mm³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.PoundPerImperialGallon, new CultureInfo("en-US"), false, true, new string[]{"ppg (imp.)"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.PoundPerUSGallon, new CultureInfo("en-US"), false, true, new string[]{"ppg (U.S.)"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.SlugPerCubicCentimeter, new CultureInfo("en-US"), false, true, new string[]{"slug/cm³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.SlugPerCubicFoot, new CultureInfo("en-US"), false, true, new string[]{"slug/ft³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.SlugPerCubicInch, new CultureInfo("en-US"), false, true, new string[]{"slug/in³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.SlugPerCubicMeter, new CultureInfo("en-US"), false, true, new string[]{"slug/m³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.SlugPerCubicMillimeter, new CultureInfo("en-US"), false, true, new string[]{"slug/mm³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.TonnePerCubicCentimeter, new CultureInfo("en-US"), false, true, new string[]{"t/cm³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.TonnePerCubicFoot, new CultureInfo("en-US"), false, true, new string[]{"t/ft³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.TonnePerCubicInch, new CultureInfo("en-US"), false, true, new string[]{"t/in³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.TonnePerCubicMeter, new CultureInfo("en-US"), false, true, new string[]{"t/m³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(DensityUnit.TonnePerCubicMillimeter, new CultureInfo("en-US"), false, true, new string[]{"t/mm³"});
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(DensityUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static string GetAbbreviation(DensityUnit unit, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.CentigramPerDeciliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromCentigramsPerDeciLiter(double centigramsperdeciliter)
        {
            double value = (double) centigramsperdeciliter;
            return new Density(value, DensityUnit.CentigramPerDeciliter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.CentigramPerLiter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromCentigramsPerLiter(double centigramsperliter)
        {
            double value = (double) centigramsperliter;
            return new Density(value, DensityUnit.CentigramPerLiter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.CentigramPerMilliliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromCentigramsPerMilliliter(double centigramspermilliliter)
        {
            double value = (double) centigramspermilliliter;
            return new Density(value, DensityUnit.CentigramPerMilliliter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.DecigramPerDeciliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromDecigramsPerDeciLiter(double decigramsperdeciliter)
        {
            double value = (double) decigramsperdeciliter;
            return new Density(value, DensityUnit.DecigramPerDeciliter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.DecigramPerLiter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromDecigramsPerLiter(double decigramsperliter)
        {
            double value = (double) decigramsperliter;
            return new Density(value, DensityUnit.DecigramPerLiter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.DecigramPerMilliliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromDecigramsPerMilliliter(double decigramspermilliliter)
        {
            double value = (double) decigramspermilliliter;
            return new Density(value, DensityUnit.DecigramPerMilliliter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.GramPerCubicCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromGramsPerCubicCentimeter(double gramspercubiccentimeter)
        {
            double value = (double) gramspercubiccentimeter;
            return new Density(value, DensityUnit.GramPerCubicCentimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.GramPerCubicFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromGramsPerCubicFoot(double gramspercubicfoot)
        {
            double value = (double) gramspercubicfoot;
            return new Density(value, DensityUnit.GramPerCubicFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.GramPerCubicInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromGramsPerCubicInch(double gramspercubicinch)
        {
            double value = (double) gramspercubicinch;
            return new Density(value, DensityUnit.GramPerCubicInch);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.GramPerCubicMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromGramsPerCubicMeter(double gramspercubicmeter)
        {
            double value = (double) gramspercubicmeter;
            return new Density(value, DensityUnit.GramPerCubicMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.GramPerCubicMillimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromGramsPerCubicMillimeter(double gramspercubicmillimeter)
        {
            double value = (double) gramspercubicmillimeter;
            return new Density(value, DensityUnit.GramPerCubicMillimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.GramPerDeciliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromGramsPerDeciLiter(double gramsperdeciliter)
        {
            double value = (double) gramsperdeciliter;
            return new Density(value, DensityUnit.GramPerDeciliter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.GramPerLiter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromGramsPerLiter(double gramsperliter)
        {
            double value = (double) gramsperliter;
            return new Density(value, DensityUnit.GramPerLiter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.GramPerMilliliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromGramsPerMilliliter(double gramspermilliliter)
        {
            double value = (double) gramspermilliliter;
            return new Density(value, DensityUnit.GramPerMilliliter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.KilogramPerCubicCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromKilogramsPerCubicCentimeter(double kilogramspercubiccentimeter)
        {
            double value = (double) kilogramspercubiccentimeter;
            return new Density(value, DensityUnit.KilogramPerCubicCentimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.KilogramPerCubicMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromKilogramsPerCubicMeter(double kilogramspercubicmeter)
        {
            double value = (double) kilogramspercubicmeter;
            return new Density(value, DensityUnit.KilogramPerCubicMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.KilogramPerCubicMillimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromKilogramsPerCubicMillimeter(double kilogramspercubicmillimeter)
        {
            double value = (double) kilogramspercubicmillimeter;
            return new Density(value, DensityUnit.KilogramPerCubicMillimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.KilogramPerLiter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromKilogramsPerLiter(double kilogramsperliter)
        {
            double value = (double) kilogramsperliter;
            return new Density(value, DensityUnit.KilogramPerLiter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.KilopoundPerCubicFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromKilopoundsPerCubicFoot(double kilopoundspercubicfoot)
        {
            double value = (double) kilopoundspercubicfoot;
            return new Density(value, DensityUnit.KilopoundPerCubicFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.KilopoundPerCubicInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromKilopoundsPerCubicInch(double kilopoundspercubicinch)
        {
            double value = (double) kilopoundspercubicinch;
            return new Density(value, DensityUnit.KilopoundPerCubicInch);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.MicrogramPerCubicMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromMicrogramsPerCubicMeter(double microgramspercubicmeter)
        {
            double value = (double) microgramspercubicmeter;
            return new Density(value, DensityUnit.MicrogramPerCubicMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.MicrogramPerDeciliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromMicrogramsPerDeciLiter(double microgramsperdeciliter)
        {
            double value = (double) microgramsperdeciliter;
            return new Density(value, DensityUnit.MicrogramPerDeciliter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.MicrogramPerLiter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromMicrogramsPerLiter(double microgramsperliter)
        {
            double value = (double) microgramsperliter;
            return new Density(value, DensityUnit.MicrogramPerLiter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.MicrogramPerMilliliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromMicrogramsPerMilliliter(double microgramspermilliliter)
        {
            double value = (double) microgramspermilliliter;
            return new Density(value, DensityUnit.MicrogramPerMilliliter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.MilligramPerCubicMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromMilligramsPerCubicMeter(double milligramspercubicmeter)
        {
            double value = (double) milligramspercubicmeter;
            return new Density(value, DensityUnit.MilligramPerCubicMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.MilligramPerDeciliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromMilligramsPerDeciLiter(double milligramsperdeciliter)
        {
            double value = (double) milligramsperdeciliter;
            return new Density(value, DensityUnit.MilligramPerDeciliter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.MilligramPerLiter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromMilligramsPerLiter(double milligramsperliter)
        {
            double value = (double) milligramsperliter;
            return new Density(value, DensityUnit.MilligramPerLiter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.MilligramPerMilliliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromMilligramsPerMilliliter(double milligramspermilliliter)
        {
            double value = (double) milligramspermilliliter;
            return new Density(value, DensityUnit.MilligramPerMilliliter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.NanogramPerDeciliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromNanogramsPerDeciLiter(double nanogramsperdeciliter)
        {
            double value = (double) nanogramsperdeciliter;
            return new Density(value, DensityUnit.NanogramPerDeciliter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.NanogramPerLiter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromNanogramsPerLiter(double nanogramsperliter)
        {
            double value = (double) nanogramsperliter;
            return new Density(value, DensityUnit.NanogramPerLiter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.NanogramPerMilliliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromNanogramsPerMilliliter(double nanogramspermilliliter)
        {
            double value = (double) nanogramspermilliliter;
            return new Density(value, DensityUnit.NanogramPerMilliliter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.PicogramPerDeciliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromPicogramsPerDeciLiter(double picogramsperdeciliter)
        {
            double value = (double) picogramsperdeciliter;
            return new Density(value, DensityUnit.PicogramPerDeciliter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.PicogramPerLiter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromPicogramsPerLiter(double picogramsperliter)
        {
            double value = (double) picogramsperliter;
            return new Density(value, DensityUnit.PicogramPerLiter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.PicogramPerMilliliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromPicogramsPerMilliliter(double picogramspermilliliter)
        {
            double value = (double) picogramspermilliliter;
            return new Density(value, DensityUnit.PicogramPerMilliliter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.PoundPerCubicCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromPoundsPerCubicCentimeter(double poundspercubiccentimeter)
        {
            double value = (double) poundspercubiccentimeter;
            return new Density(value, DensityUnit.PoundPerCubicCentimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.PoundPerCubicFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromPoundsPerCubicFoot(double poundspercubicfoot)
        {
            double value = (double) poundspercubicfoot;
            return new Density(value, DensityUnit.PoundPerCubicFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.PoundPerCubicInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromPoundsPerCubicInch(double poundspercubicinch)
        {
            double value = (double) poundspercubicinch;
            return new Density(value, DensityUnit.PoundPerCubicInch);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.PoundPerCubicMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromPoundsPerCubicMeter(double poundspercubicmeter)
        {
            double value = (double) poundspercubicmeter;
            return new Density(value, DensityUnit.PoundPerCubicMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.PoundPerCubicMillimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromPoundsPerCubicMillimeter(double poundspercubicmillimeter)
        {
            double value = (double) poundspercubicmillimeter;
            return new Density(value, DensityUnit.PoundPerCubicMillimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.PoundPerImperialGallon"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromPoundsPerImperialGallon(double poundsperimperialgallon)
        {
            double value = (double) poundsperimperialgallon;
            return new Density(value, DensityUnit.PoundPerImperialGallon);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.PoundPerUSGallon"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromPoundsPerUSGallon(double poundsperusgallon)
        {
            double value = (double) poundsperusgallon;
            return new Density(value, DensityUnit.PoundPerUSGallon);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.SlugPerCubicCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromSlugsPerCubicCentimeter(double slugspercubiccentimeter)
        {
            double value = (double) slugspercubiccentimeter;
            return new Density(value, DensityUnit.SlugPerCubicCentimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.SlugPerCubicFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromSlugsPerCubicFoot(double slugspercubicfoot)
        {
            double value = (double) slugspercubicfoot;
            return new Density(value, DensityUnit.SlugPerCubicFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.SlugPerCubicInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromSlugsPerCubicInch(double slugspercubicinch)
        {
            double value = (double) slugspercubicinch;
            return new Density(value, DensityUnit.SlugPerCubicInch);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.SlugPerCubicMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromSlugsPerCubicMeter(double slugspercubicmeter)
        {
            double value = (double) slugspercubicmeter;
            return new Density(value, DensityUnit.SlugPerCubicMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.SlugPerCubicMillimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromSlugsPerCubicMillimeter(double slugspercubicmillimeter)
        {
            double value = (double) slugspercubicmillimeter;
            return new Density(value, DensityUnit.SlugPerCubicMillimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.TonnePerCubicCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromTonnesPerCubicCentimeter(double tonnespercubiccentimeter)
        {
            double value = (double) tonnespercubiccentimeter;
            return new Density(value, DensityUnit.TonnePerCubicCentimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.TonnePerCubicFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromTonnesPerCubicFoot(double tonnespercubicfoot)
        {
            double value = (double) tonnespercubicfoot;
            return new Density(value, DensityUnit.TonnePerCubicFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.TonnePerCubicInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromTonnesPerCubicInch(double tonnespercubicinch)
        {
            double value = (double) tonnespercubicinch;
            return new Density(value, DensityUnit.TonnePerCubicInch);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.TonnePerCubicMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromTonnesPerCubicMeter(double tonnespercubicmeter)
        {
            double value = (double) tonnespercubicmeter;
            return new Density(value, DensityUnit.TonnePerCubicMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.TonnePerCubicMillimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromTonnesPerCubicMillimeter(double tonnespercubicmillimeter)
        {
            double value = (double) tonnespercubicmillimeter;
            return new Density(value, DensityUnit.TonnePerCubicMillimeter);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="DensityUnit" /> to <see cref="Density" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Density unit value.</returns>
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static Density From(double value, DensityUnit fromUnit)
        {
            return new Density((double)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Density Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static Density Parse(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.Parse<Density, DensityUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out Density result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] string cultureName, out Density result)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.TryParse<Density, DensityUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static DensityUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static DensityUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.Parse<DensityUnit>(str, provider);
        }

        public static bool TryParseUnit(string str, out DensityUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParseUnit(string str, [CanBeNull] string cultureName, out DensityUnit unit)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.TryParse<DensityUnit>(str, provider, out unit);
        }

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if (obj is null) throw new ArgumentNullException(nameof(obj));
            if (!(obj is Density objDensity)) throw new ArgumentException("Expected type Density.", nameof(obj));

            return CompareTo(objDensity);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        internal int CompareTo(Density other)
        {
            return _value.CompareTo(other.AsBaseNumericType(this.Unit));
        }

        [Windows.Foundation.Metadata.DefaultOverload]
        public override bool Equals(object obj)
        {
            if (obj is null || !(obj is Density objDensity))
                return false;

            return Equals(objDensity);
        }

        public bool Equals(Density other)
        {
            return _value.Equals(other.AsBaseNumericType(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another Density within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(Density other, double tolerance, ComparisonType comparisonType)
        {
            if (tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current Density.</returns>
        public override int GetHashCode()
        {
            return new { Info.Name, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        double IQuantity.As(object unit) => As((DensityUnit)unit);

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(DensityUnit unit)
        {
            if (Unit == unit)
                return Convert.ToDouble(Value);

            var converted = AsBaseNumericType(unit);
            return Convert.ToDouble(converted);
        }

        /// <summary>
        ///     Converts this Density to another Density with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Density with the specified unit.</returns>
        public Density ToUnit(DensityUnit unit)
        {
            var convertedValue = AsBaseNumericType(unit);
            return new Density(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double AsBaseUnit()
        {
            switch(Unit)
            {
                case DensityUnit.CentigramPerDeciliter: return (_value / 1e-1) * 1e-2d;
                case DensityUnit.CentigramPerLiter: return (_value / 1) * 1e-2d;
                case DensityUnit.CentigramPerMilliliter: return (_value / 1e-3) * 1e-2d;
                case DensityUnit.DecigramPerDeciliter: return (_value / 1e-1) * 1e-1d;
                case DensityUnit.DecigramPerLiter: return (_value / 1) * 1e-1d;
                case DensityUnit.DecigramPerMilliliter: return (_value / 1e-3) * 1e-1d;
                case DensityUnit.GramPerCubicCentimeter: return _value / 1e-3;
                case DensityUnit.GramPerCubicFoot: return _value * 0.0353146667214886;
                case DensityUnit.GramPerCubicInch: return _value * 61.0237440947323;
                case DensityUnit.GramPerCubicMeter: return _value / 1e3;
                case DensityUnit.GramPerCubicMillimeter: return _value / 1e-6;
                case DensityUnit.GramPerDeciliter: return _value / 1e-1;
                case DensityUnit.GramPerLiter: return _value / 1;
                case DensityUnit.GramPerMilliliter: return _value / 1e-3;
                case DensityUnit.KilogramPerCubicCentimeter: return (_value / 1e-3) * 1e3d;
                case DensityUnit.KilogramPerCubicMeter: return (_value / 1e3) * 1e3d;
                case DensityUnit.KilogramPerCubicMillimeter: return (_value / 1e-6) * 1e3d;
                case DensityUnit.KilogramPerLiter: return _value * 1e3;
                case DensityUnit.KilopoundPerCubicFoot: return (_value / 0.062427961) * 1e3d;
                case DensityUnit.KilopoundPerCubicInch: return (_value / 3.6127298147753e-5) * 1e3d;
                case DensityUnit.MicrogramPerCubicMeter: return (_value / 1e3) * 1e-6d;
                case DensityUnit.MicrogramPerDeciliter: return (_value / 1e-1) * 1e-6d;
                case DensityUnit.MicrogramPerLiter: return (_value / 1) * 1e-6d;
                case DensityUnit.MicrogramPerMilliliter: return (_value / 1e-3) * 1e-6d;
                case DensityUnit.MilligramPerCubicMeter: return (_value / 1e3) * 1e-3d;
                case DensityUnit.MilligramPerDeciliter: return (_value / 1e-1) * 1e-3d;
                case DensityUnit.MilligramPerLiter: return (_value / 1) * 1e-3d;
                case DensityUnit.MilligramPerMilliliter: return (_value / 1e-3) * 1e-3d;
                case DensityUnit.NanogramPerDeciliter: return (_value / 1e-1) * 1e-9d;
                case DensityUnit.NanogramPerLiter: return (_value / 1) * 1e-9d;
                case DensityUnit.NanogramPerMilliliter: return (_value / 1e-3) * 1e-9d;
                case DensityUnit.PicogramPerDeciliter: return (_value / 1e-1) * 1e-12d;
                case DensityUnit.PicogramPerLiter: return (_value / 1) * 1e-12d;
                case DensityUnit.PicogramPerMilliliter: return (_value / 1e-3) * 1e-12d;
                case DensityUnit.PoundPerCubicCentimeter: return _value / 2.204622621848775e-6;
                case DensityUnit.PoundPerCubicFoot: return _value / 0.062427961;
                case DensityUnit.PoundPerCubicInch: return _value / 3.6127298147753e-5;
                case DensityUnit.PoundPerCubicMeter: return _value / 2.204622621848775;
                case DensityUnit.PoundPerCubicMillimeter: return _value / 2.204622621848775e-9;
                case DensityUnit.PoundPerImperialGallon: return _value * 9.9776398e1;
                case DensityUnit.PoundPerUSGallon: return _value * 1.19826427e2;
                case DensityUnit.SlugPerCubicCentimeter: return _value * 14593903;
                case DensityUnit.SlugPerCubicFoot: return _value * 515.378818;
                case DensityUnit.SlugPerCubicInch: return _value * 890574.60201535;
                case DensityUnit.SlugPerCubicMeter: return _value * 14.5939;
                case DensityUnit.SlugPerCubicMillimeter: return _value * 14593903000;
                case DensityUnit.TonnePerCubicCentimeter: return _value / 1e-9;
                case DensityUnit.TonnePerCubicFoot: return _value * 3.53146667214886e4;
                case DensityUnit.TonnePerCubicInch: return _value * 6.10237440947323e7;
                case DensityUnit.TonnePerCubicMeter: return _value / 0.001;
                case DensityUnit.TonnePerCubicMillimeter: return _value / 1e-12;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double AsBaseNumericType(DensityUnit unit)
        {
            if (Unit == unit)
                return _value;

            var baseUnitValue = AsBaseUnit();

            switch(unit)
            {
                case DensityUnit.CentigramPerDeciliter: return (baseUnitValue * 1e-1) / 1e-2d;
                case DensityUnit.CentigramPerLiter: return (baseUnitValue * 1) / 1e-2d;
                case DensityUnit.CentigramPerMilliliter: return (baseUnitValue * 1e-3) / 1e-2d;
                case DensityUnit.DecigramPerDeciliter: return (baseUnitValue * 1e-1) / 1e-1d;
                case DensityUnit.DecigramPerLiter: return (baseUnitValue * 1) / 1e-1d;
                case DensityUnit.DecigramPerMilliliter: return (baseUnitValue * 1e-3) / 1e-1d;
                case DensityUnit.GramPerCubicCentimeter: return baseUnitValue * 1e-3;
                case DensityUnit.GramPerCubicFoot: return baseUnitValue / 0.0353146667214886;
                case DensityUnit.GramPerCubicInch: return baseUnitValue / 61.0237440947323;
                case DensityUnit.GramPerCubicMeter: return baseUnitValue * 1e3;
                case DensityUnit.GramPerCubicMillimeter: return baseUnitValue * 1e-6;
                case DensityUnit.GramPerDeciliter: return baseUnitValue * 1e-1;
                case DensityUnit.GramPerLiter: return baseUnitValue * 1;
                case DensityUnit.GramPerMilliliter: return baseUnitValue * 1e-3;
                case DensityUnit.KilogramPerCubicCentimeter: return (baseUnitValue * 1e-3) / 1e3d;
                case DensityUnit.KilogramPerCubicMeter: return (baseUnitValue * 1e3) / 1e3d;
                case DensityUnit.KilogramPerCubicMillimeter: return (baseUnitValue * 1e-6) / 1e3d;
                case DensityUnit.KilogramPerLiter: return baseUnitValue / 1e3;
                case DensityUnit.KilopoundPerCubicFoot: return (baseUnitValue * 0.062427961) / 1e3d;
                case DensityUnit.KilopoundPerCubicInch: return (baseUnitValue * 3.6127298147753e-5) / 1e3d;
                case DensityUnit.MicrogramPerCubicMeter: return (baseUnitValue * 1e3) / 1e-6d;
                case DensityUnit.MicrogramPerDeciliter: return (baseUnitValue * 1e-1) / 1e-6d;
                case DensityUnit.MicrogramPerLiter: return (baseUnitValue * 1) / 1e-6d;
                case DensityUnit.MicrogramPerMilliliter: return (baseUnitValue * 1e-3) / 1e-6d;
                case DensityUnit.MilligramPerCubicMeter: return (baseUnitValue * 1e3) / 1e-3d;
                case DensityUnit.MilligramPerDeciliter: return (baseUnitValue * 1e-1) / 1e-3d;
                case DensityUnit.MilligramPerLiter: return (baseUnitValue * 1) / 1e-3d;
                case DensityUnit.MilligramPerMilliliter: return (baseUnitValue * 1e-3) / 1e-3d;
                case DensityUnit.NanogramPerDeciliter: return (baseUnitValue * 1e-1) / 1e-9d;
                case DensityUnit.NanogramPerLiter: return (baseUnitValue * 1) / 1e-9d;
                case DensityUnit.NanogramPerMilliliter: return (baseUnitValue * 1e-3) / 1e-9d;
                case DensityUnit.PicogramPerDeciliter: return (baseUnitValue * 1e-1) / 1e-12d;
                case DensityUnit.PicogramPerLiter: return (baseUnitValue * 1) / 1e-12d;
                case DensityUnit.PicogramPerMilliliter: return (baseUnitValue * 1e-3) / 1e-12d;
                case DensityUnit.PoundPerCubicCentimeter: return baseUnitValue * 2.204622621848775e-6;
                case DensityUnit.PoundPerCubicFoot: return baseUnitValue * 0.062427961;
                case DensityUnit.PoundPerCubicInch: return baseUnitValue * 3.6127298147753e-5;
                case DensityUnit.PoundPerCubicMeter: return baseUnitValue * 2.204622621848775;
                case DensityUnit.PoundPerCubicMillimeter: return baseUnitValue * 2.204622621848775e-9;
                case DensityUnit.PoundPerImperialGallon: return baseUnitValue / 9.9776398e1;
                case DensityUnit.PoundPerUSGallon: return baseUnitValue / 1.19826427e2;
                case DensityUnit.SlugPerCubicCentimeter: return baseUnitValue / 14593903;
                case DensityUnit.SlugPerCubicFoot: return baseUnitValue * 0.00194032033;
                case DensityUnit.SlugPerCubicInch: return baseUnitValue / 890574.60201535;
                case DensityUnit.SlugPerCubicMeter: return baseUnitValue / 14.5939;
                case DensityUnit.SlugPerCubicMillimeter: return baseUnitValue / 14593903000;
                case DensityUnit.TonnePerCubicCentimeter: return baseUnitValue * 1e-9;
                case DensityUnit.TonnePerCubicFoot: return baseUnitValue / 3.53146667214886e4;
                case DensityUnit.TonnePerCubicInch: return baseUnitValue / 6.10237440947323e7;
                case DensityUnit.TonnePerCubicMeter: return baseUnitValue * 0.001;
                case DensityUnit.TonnePerCubicMillimeter: return baseUnitValue * 1e-12;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(null);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName)
        {
            var provider = cultureName;
            return ToString(provider, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString(string cultureName, int significantDigitsAfterRadix)
        {
            var provider = cultureName;
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName, [NotNull] string format, [NotNull] params object[] args)
        {
            var provider = GetFormatProviderFromCultureName(cultureName);
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? GlobalConfiguration.DefaultCulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        #endregion

        private static IFormatProvider GetFormatProviderFromCultureName([CanBeNull] string cultureName)
        {
            return cultureName != null ? new CultureInfo(cultureName) : (IFormatProvider)null;
        }
    }
}
