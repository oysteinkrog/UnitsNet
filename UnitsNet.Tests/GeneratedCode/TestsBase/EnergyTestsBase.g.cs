//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Energy.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class EnergyTestsBase : QuantityTestsBase
    {
        protected abstract double BritishThermalUnitsInOneJoule { get; }
        protected abstract double CaloriesInOneJoule { get; }
        protected abstract double DecathermsEcInOneJoule { get; }
        protected abstract double DecathermsImperialInOneJoule { get; }
        protected abstract double DecathermsUsInOneJoule { get; }
        protected abstract double ElectronVoltsInOneJoule { get; }
        protected abstract double ErgsInOneJoule { get; }
        protected abstract double FootPoundsInOneJoule { get; }
        protected abstract double GigabritishThermalUnitsInOneJoule { get; }
        protected abstract double GigaelectronVoltsInOneJoule { get; }
        protected abstract double GigajoulesInOneJoule { get; }
        protected abstract double GigawattDaysInOneJoule { get; }
        protected abstract double GigawattHoursInOneJoule { get; }
        protected abstract double HorsepowerHoursInOneJoule { get; }
        protected abstract double JoulesInOneJoule { get; }
        protected abstract double KilobritishThermalUnitsInOneJoule { get; }
        protected abstract double KilocaloriesInOneJoule { get; }
        protected abstract double KiloelectronVoltsInOneJoule { get; }
        protected abstract double KilojoulesInOneJoule { get; }
        protected abstract double KilowattDaysInOneJoule { get; }
        protected abstract double KilowattHoursInOneJoule { get; }
        protected abstract double MegabritishThermalUnitsInOneJoule { get; }
        protected abstract double MegacaloriesInOneJoule { get; }
        protected abstract double MegaelectronVoltsInOneJoule { get; }
        protected abstract double MegajoulesInOneJoule { get; }
        protected abstract double MegawattDaysInOneJoule { get; }
        protected abstract double MegawattHoursInOneJoule { get; }
        protected abstract double MillijoulesInOneJoule { get; }
        protected abstract double TeraelectronVoltsInOneJoule { get; }
        protected abstract double TerawattDaysInOneJoule { get; }
        protected abstract double TerawattHoursInOneJoule { get; }
        protected abstract double ThermsEcInOneJoule { get; }
        protected abstract double ThermsImperialInOneJoule { get; }
        protected abstract double ThermsUsInOneJoule { get; }
        protected abstract double WattDaysInOneJoule { get; }
        protected abstract double WattHoursInOneJoule { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double BritishThermalUnitsTolerance { get { return 1e-5; } }
        protected virtual double CaloriesTolerance { get { return 1e-5; } }
        protected virtual double DecathermsEcTolerance { get { return 1e-5; } }
        protected virtual double DecathermsImperialTolerance { get { return 1e-5; } }
        protected virtual double DecathermsUsTolerance { get { return 1e-5; } }
        protected virtual double ElectronVoltsTolerance { get { return 1e-5; } }
        protected virtual double ErgsTolerance { get { return 1e-5; } }
        protected virtual double FootPoundsTolerance { get { return 1e-5; } }
        protected virtual double GigabritishThermalUnitsTolerance { get { return 1e-5; } }
        protected virtual double GigaelectronVoltsTolerance { get { return 1e-5; } }
        protected virtual double GigajoulesTolerance { get { return 1e-5; } }
        protected virtual double GigawattDaysTolerance { get { return 1e-5; } }
        protected virtual double GigawattHoursTolerance { get { return 1e-5; } }
        protected virtual double HorsepowerHoursTolerance { get { return 1e-5; } }
        protected virtual double JoulesTolerance { get { return 1e-5; } }
        protected virtual double KilobritishThermalUnitsTolerance { get { return 1e-5; } }
        protected virtual double KilocaloriesTolerance { get { return 1e-5; } }
        protected virtual double KiloelectronVoltsTolerance { get { return 1e-5; } }
        protected virtual double KilojoulesTolerance { get { return 1e-5; } }
        protected virtual double KilowattDaysTolerance { get { return 1e-5; } }
        protected virtual double KilowattHoursTolerance { get { return 1e-5; } }
        protected virtual double MegabritishThermalUnitsTolerance { get { return 1e-5; } }
        protected virtual double MegacaloriesTolerance { get { return 1e-5; } }
        protected virtual double MegaelectronVoltsTolerance { get { return 1e-5; } }
        protected virtual double MegajoulesTolerance { get { return 1e-5; } }
        protected virtual double MegawattDaysTolerance { get { return 1e-5; } }
        protected virtual double MegawattHoursTolerance { get { return 1e-5; } }
        protected virtual double MillijoulesTolerance { get { return 1e-5; } }
        protected virtual double TeraelectronVoltsTolerance { get { return 1e-5; } }
        protected virtual double TerawattDaysTolerance { get { return 1e-5; } }
        protected virtual double TerawattHoursTolerance { get { return 1e-5; } }
        protected virtual double ThermsEcTolerance { get { return 1e-5; } }
        protected virtual double ThermsImperialTolerance { get { return 1e-5; } }
        protected virtual double ThermsUsTolerance { get { return 1e-5; } }
        protected virtual double WattDaysTolerance { get { return 1e-5; } }
        protected virtual double WattHoursTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(EnergyUnit unit)
        {
            return unit switch
            {
                EnergyUnit.BritishThermalUnit => (BritishThermalUnitsInOneJoule, BritishThermalUnitsTolerance),
                EnergyUnit.Calorie => (CaloriesInOneJoule, CaloriesTolerance),
                EnergyUnit.DecathermEc => (DecathermsEcInOneJoule, DecathermsEcTolerance),
                EnergyUnit.DecathermImperial => (DecathermsImperialInOneJoule, DecathermsImperialTolerance),
                EnergyUnit.DecathermUs => (DecathermsUsInOneJoule, DecathermsUsTolerance),
                EnergyUnit.ElectronVolt => (ElectronVoltsInOneJoule, ElectronVoltsTolerance),
                EnergyUnit.Erg => (ErgsInOneJoule, ErgsTolerance),
                EnergyUnit.FootPound => (FootPoundsInOneJoule, FootPoundsTolerance),
                EnergyUnit.GigabritishThermalUnit => (GigabritishThermalUnitsInOneJoule, GigabritishThermalUnitsTolerance),
                EnergyUnit.GigaelectronVolt => (GigaelectronVoltsInOneJoule, GigaelectronVoltsTolerance),
                EnergyUnit.Gigajoule => (GigajoulesInOneJoule, GigajoulesTolerance),
                EnergyUnit.GigawattDay => (GigawattDaysInOneJoule, GigawattDaysTolerance),
                EnergyUnit.GigawattHour => (GigawattHoursInOneJoule, GigawattHoursTolerance),
                EnergyUnit.HorsepowerHour => (HorsepowerHoursInOneJoule, HorsepowerHoursTolerance),
                EnergyUnit.Joule => (JoulesInOneJoule, JoulesTolerance),
                EnergyUnit.KilobritishThermalUnit => (KilobritishThermalUnitsInOneJoule, KilobritishThermalUnitsTolerance),
                EnergyUnit.Kilocalorie => (KilocaloriesInOneJoule, KilocaloriesTolerance),
                EnergyUnit.KiloelectronVolt => (KiloelectronVoltsInOneJoule, KiloelectronVoltsTolerance),
                EnergyUnit.Kilojoule => (KilojoulesInOneJoule, KilojoulesTolerance),
                EnergyUnit.KilowattDay => (KilowattDaysInOneJoule, KilowattDaysTolerance),
                EnergyUnit.KilowattHour => (KilowattHoursInOneJoule, KilowattHoursTolerance),
                EnergyUnit.MegabritishThermalUnit => (MegabritishThermalUnitsInOneJoule, MegabritishThermalUnitsTolerance),
                EnergyUnit.Megacalorie => (MegacaloriesInOneJoule, MegacaloriesTolerance),
                EnergyUnit.MegaelectronVolt => (MegaelectronVoltsInOneJoule, MegaelectronVoltsTolerance),
                EnergyUnit.Megajoule => (MegajoulesInOneJoule, MegajoulesTolerance),
                EnergyUnit.MegawattDay => (MegawattDaysInOneJoule, MegawattDaysTolerance),
                EnergyUnit.MegawattHour => (MegawattHoursInOneJoule, MegawattHoursTolerance),
                EnergyUnit.Millijoule => (MillijoulesInOneJoule, MillijoulesTolerance),
                EnergyUnit.TeraelectronVolt => (TeraelectronVoltsInOneJoule, TeraelectronVoltsTolerance),
                EnergyUnit.TerawattDay => (TerawattDaysInOneJoule, TerawattDaysTolerance),
                EnergyUnit.TerawattHour => (TerawattHoursInOneJoule, TerawattHoursTolerance),
                EnergyUnit.ThermEc => (ThermsEcInOneJoule, ThermsEcTolerance),
                EnergyUnit.ThermImperial => (ThermsImperialInOneJoule, ThermsImperialTolerance),
                EnergyUnit.ThermUs => (ThermsUsInOneJoule, ThermsUsTolerance),
                EnergyUnit.WattDay => (WattDaysInOneJoule, WattDaysTolerance),
                EnergyUnit.WattHour => (WattHoursInOneJoule, WattHoursTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { EnergyUnit.BritishThermalUnit },
            new object[] { EnergyUnit.Calorie },
            new object[] { EnergyUnit.DecathermEc },
            new object[] { EnergyUnit.DecathermImperial },
            new object[] { EnergyUnit.DecathermUs },
            new object[] { EnergyUnit.ElectronVolt },
            new object[] { EnergyUnit.Erg },
            new object[] { EnergyUnit.FootPound },
            new object[] { EnergyUnit.GigabritishThermalUnit },
            new object[] { EnergyUnit.GigaelectronVolt },
            new object[] { EnergyUnit.Gigajoule },
            new object[] { EnergyUnit.GigawattDay },
            new object[] { EnergyUnit.GigawattHour },
            new object[] { EnergyUnit.HorsepowerHour },
            new object[] { EnergyUnit.Joule },
            new object[] { EnergyUnit.KilobritishThermalUnit },
            new object[] { EnergyUnit.Kilocalorie },
            new object[] { EnergyUnit.KiloelectronVolt },
            new object[] { EnergyUnit.Kilojoule },
            new object[] { EnergyUnit.KilowattDay },
            new object[] { EnergyUnit.KilowattHour },
            new object[] { EnergyUnit.MegabritishThermalUnit },
            new object[] { EnergyUnit.Megacalorie },
            new object[] { EnergyUnit.MegaelectronVolt },
            new object[] { EnergyUnit.Megajoule },
            new object[] { EnergyUnit.MegawattDay },
            new object[] { EnergyUnit.MegawattHour },
            new object[] { EnergyUnit.Millijoule },
            new object[] { EnergyUnit.TeraelectronVolt },
            new object[] { EnergyUnit.TerawattDay },
            new object[] { EnergyUnit.TerawattHour },
            new object[] { EnergyUnit.ThermEc },
            new object[] { EnergyUnit.ThermImperial },
            new object[] { EnergyUnit.ThermUs },
            new object[] { EnergyUnit.WattDay },
            new object[] { EnergyUnit.WattHour },
        };

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Energy((double)0.0, EnergyUnit.Undefined));
        }

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new Energy();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(EnergyUnit.Joule, quantity.Unit);
        }


        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Energy(double.PositiveInfinity, EnergyUnit.Joule));
            Assert.Throws<ArgumentException>(() => new Energy(double.NegativeInfinity, EnergyUnit.Joule));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Energy(double.NaN, EnergyUnit.Joule));
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new Energy(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            Func<object> TestCode = () => new Energy(value: 1, unitSystem: UnitSystem.SI);
            if (SupportsSIUnitSystem)
            {
                var quantity = (Energy) TestCode();
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(TestCode);
            }
        }

        [Fact]
        public void Energy_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new Energy(1, EnergyUnit.Joule);

            QuantityInfo<EnergyUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(Energy.Zero, quantityInfo.Zero);
            Assert.Equal("Energy", quantityInfo.Name);
            Assert.Equal(QuantityType.Energy, quantityInfo.QuantityType);

            var units = EnumUtils.GetEnumValues<EnergyUnit>().Except(new[] {EnergyUnit.Undefined}).OrderBy(x => x.ToString()).ToArray();
            var unitNames = units.Select(x => x.ToString());

            // Obsolete members
            Assert.Equal(units, quantityInfo.Units);
            Assert.Equal(unitNames, quantityInfo.UnitNames);
        }

        [Fact]
        public void JouleToEnergyUnits()
        {
            Energy joule = Energy.FromJoules(1);
            AssertEx.EqualTolerance(BritishThermalUnitsInOneJoule, joule.BritishThermalUnits, BritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(CaloriesInOneJoule, joule.Calories, CaloriesTolerance);
            AssertEx.EqualTolerance(DecathermsEcInOneJoule, joule.DecathermsEc, DecathermsEcTolerance);
            AssertEx.EqualTolerance(DecathermsImperialInOneJoule, joule.DecathermsImperial, DecathermsImperialTolerance);
            AssertEx.EqualTolerance(DecathermsUsInOneJoule, joule.DecathermsUs, DecathermsUsTolerance);
            AssertEx.EqualTolerance(ElectronVoltsInOneJoule, joule.ElectronVolts, ElectronVoltsTolerance);
            AssertEx.EqualTolerance(ErgsInOneJoule, joule.Ergs, ErgsTolerance);
            AssertEx.EqualTolerance(FootPoundsInOneJoule, joule.FootPounds, FootPoundsTolerance);
            AssertEx.EqualTolerance(GigabritishThermalUnitsInOneJoule, joule.GigabritishThermalUnits, GigabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(GigaelectronVoltsInOneJoule, joule.GigaelectronVolts, GigaelectronVoltsTolerance);
            AssertEx.EqualTolerance(GigajoulesInOneJoule, joule.Gigajoules, GigajoulesTolerance);
            AssertEx.EqualTolerance(GigawattDaysInOneJoule, joule.GigawattDays, GigawattDaysTolerance);
            AssertEx.EqualTolerance(GigawattHoursInOneJoule, joule.GigawattHours, GigawattHoursTolerance);
            AssertEx.EqualTolerance(HorsepowerHoursInOneJoule, joule.HorsepowerHours, HorsepowerHoursTolerance);
            AssertEx.EqualTolerance(JoulesInOneJoule, joule.Joules, JoulesTolerance);
            AssertEx.EqualTolerance(KilobritishThermalUnitsInOneJoule, joule.KilobritishThermalUnits, KilobritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(KilocaloriesInOneJoule, joule.Kilocalories, KilocaloriesTolerance);
            AssertEx.EqualTolerance(KiloelectronVoltsInOneJoule, joule.KiloelectronVolts, KiloelectronVoltsTolerance);
            AssertEx.EqualTolerance(KilojoulesInOneJoule, joule.Kilojoules, KilojoulesTolerance);
            AssertEx.EqualTolerance(KilowattDaysInOneJoule, joule.KilowattDays, KilowattDaysTolerance);
            AssertEx.EqualTolerance(KilowattHoursInOneJoule, joule.KilowattHours, KilowattHoursTolerance);
            AssertEx.EqualTolerance(MegabritishThermalUnitsInOneJoule, joule.MegabritishThermalUnits, MegabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(MegacaloriesInOneJoule, joule.Megacalories, MegacaloriesTolerance);
            AssertEx.EqualTolerance(MegaelectronVoltsInOneJoule, joule.MegaelectronVolts, MegaelectronVoltsTolerance);
            AssertEx.EqualTolerance(MegajoulesInOneJoule, joule.Megajoules, MegajoulesTolerance);
            AssertEx.EqualTolerance(MegawattDaysInOneJoule, joule.MegawattDays, MegawattDaysTolerance);
            AssertEx.EqualTolerance(MegawattHoursInOneJoule, joule.MegawattHours, MegawattHoursTolerance);
            AssertEx.EqualTolerance(MillijoulesInOneJoule, joule.Millijoules, MillijoulesTolerance);
            AssertEx.EqualTolerance(TeraelectronVoltsInOneJoule, joule.TeraelectronVolts, TeraelectronVoltsTolerance);
            AssertEx.EqualTolerance(TerawattDaysInOneJoule, joule.TerawattDays, TerawattDaysTolerance);
            AssertEx.EqualTolerance(TerawattHoursInOneJoule, joule.TerawattHours, TerawattHoursTolerance);
            AssertEx.EqualTolerance(ThermsEcInOneJoule, joule.ThermsEc, ThermsEcTolerance);
            AssertEx.EqualTolerance(ThermsImperialInOneJoule, joule.ThermsImperial, ThermsImperialTolerance);
            AssertEx.EqualTolerance(ThermsUsInOneJoule, joule.ThermsUs, ThermsUsTolerance);
            AssertEx.EqualTolerance(WattDaysInOneJoule, joule.WattDays, WattDaysTolerance);
            AssertEx.EqualTolerance(WattHoursInOneJoule, joule.WattHours, WattHoursTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = Energy.From(1, EnergyUnit.BritishThermalUnit);
            AssertEx.EqualTolerance(1, quantity00.BritishThermalUnits, BritishThermalUnitsTolerance);
            Assert.Equal(EnergyUnit.BritishThermalUnit, quantity00.Unit);

            var quantity01 = Energy.From(1, EnergyUnit.Calorie);
            AssertEx.EqualTolerance(1, quantity01.Calories, CaloriesTolerance);
            Assert.Equal(EnergyUnit.Calorie, quantity01.Unit);

            var quantity02 = Energy.From(1, EnergyUnit.DecathermEc);
            AssertEx.EqualTolerance(1, quantity02.DecathermsEc, DecathermsEcTolerance);
            Assert.Equal(EnergyUnit.DecathermEc, quantity02.Unit);

            var quantity03 = Energy.From(1, EnergyUnit.DecathermImperial);
            AssertEx.EqualTolerance(1, quantity03.DecathermsImperial, DecathermsImperialTolerance);
            Assert.Equal(EnergyUnit.DecathermImperial, quantity03.Unit);

            var quantity04 = Energy.From(1, EnergyUnit.DecathermUs);
            AssertEx.EqualTolerance(1, quantity04.DecathermsUs, DecathermsUsTolerance);
            Assert.Equal(EnergyUnit.DecathermUs, quantity04.Unit);

            var quantity05 = Energy.From(1, EnergyUnit.ElectronVolt);
            AssertEx.EqualTolerance(1, quantity05.ElectronVolts, ElectronVoltsTolerance);
            Assert.Equal(EnergyUnit.ElectronVolt, quantity05.Unit);

            var quantity06 = Energy.From(1, EnergyUnit.Erg);
            AssertEx.EqualTolerance(1, quantity06.Ergs, ErgsTolerance);
            Assert.Equal(EnergyUnit.Erg, quantity06.Unit);

            var quantity07 = Energy.From(1, EnergyUnit.FootPound);
            AssertEx.EqualTolerance(1, quantity07.FootPounds, FootPoundsTolerance);
            Assert.Equal(EnergyUnit.FootPound, quantity07.Unit);

            var quantity08 = Energy.From(1, EnergyUnit.GigabritishThermalUnit);
            AssertEx.EqualTolerance(1, quantity08.GigabritishThermalUnits, GigabritishThermalUnitsTolerance);
            Assert.Equal(EnergyUnit.GigabritishThermalUnit, quantity08.Unit);

            var quantity09 = Energy.From(1, EnergyUnit.GigaelectronVolt);
            AssertEx.EqualTolerance(1, quantity09.GigaelectronVolts, GigaelectronVoltsTolerance);
            Assert.Equal(EnergyUnit.GigaelectronVolt, quantity09.Unit);

            var quantity10 = Energy.From(1, EnergyUnit.Gigajoule);
            AssertEx.EqualTolerance(1, quantity10.Gigajoules, GigajoulesTolerance);
            Assert.Equal(EnergyUnit.Gigajoule, quantity10.Unit);

            var quantity11 = Energy.From(1, EnergyUnit.GigawattDay);
            AssertEx.EqualTolerance(1, quantity11.GigawattDays, GigawattDaysTolerance);
            Assert.Equal(EnergyUnit.GigawattDay, quantity11.Unit);

            var quantity12 = Energy.From(1, EnergyUnit.GigawattHour);
            AssertEx.EqualTolerance(1, quantity12.GigawattHours, GigawattHoursTolerance);
            Assert.Equal(EnergyUnit.GigawattHour, quantity12.Unit);

            var quantity13 = Energy.From(1, EnergyUnit.HorsepowerHour);
            AssertEx.EqualTolerance(1, quantity13.HorsepowerHours, HorsepowerHoursTolerance);
            Assert.Equal(EnergyUnit.HorsepowerHour, quantity13.Unit);

            var quantity14 = Energy.From(1, EnergyUnit.Joule);
            AssertEx.EqualTolerance(1, quantity14.Joules, JoulesTolerance);
            Assert.Equal(EnergyUnit.Joule, quantity14.Unit);

            var quantity15 = Energy.From(1, EnergyUnit.KilobritishThermalUnit);
            AssertEx.EqualTolerance(1, quantity15.KilobritishThermalUnits, KilobritishThermalUnitsTolerance);
            Assert.Equal(EnergyUnit.KilobritishThermalUnit, quantity15.Unit);

            var quantity16 = Energy.From(1, EnergyUnit.Kilocalorie);
            AssertEx.EqualTolerance(1, quantity16.Kilocalories, KilocaloriesTolerance);
            Assert.Equal(EnergyUnit.Kilocalorie, quantity16.Unit);

            var quantity17 = Energy.From(1, EnergyUnit.KiloelectronVolt);
            AssertEx.EqualTolerance(1, quantity17.KiloelectronVolts, KiloelectronVoltsTolerance);
            Assert.Equal(EnergyUnit.KiloelectronVolt, quantity17.Unit);

            var quantity18 = Energy.From(1, EnergyUnit.Kilojoule);
            AssertEx.EqualTolerance(1, quantity18.Kilojoules, KilojoulesTolerance);
            Assert.Equal(EnergyUnit.Kilojoule, quantity18.Unit);

            var quantity19 = Energy.From(1, EnergyUnit.KilowattDay);
            AssertEx.EqualTolerance(1, quantity19.KilowattDays, KilowattDaysTolerance);
            Assert.Equal(EnergyUnit.KilowattDay, quantity19.Unit);

            var quantity20 = Energy.From(1, EnergyUnit.KilowattHour);
            AssertEx.EqualTolerance(1, quantity20.KilowattHours, KilowattHoursTolerance);
            Assert.Equal(EnergyUnit.KilowattHour, quantity20.Unit);

            var quantity21 = Energy.From(1, EnergyUnit.MegabritishThermalUnit);
            AssertEx.EqualTolerance(1, quantity21.MegabritishThermalUnits, MegabritishThermalUnitsTolerance);
            Assert.Equal(EnergyUnit.MegabritishThermalUnit, quantity21.Unit);

            var quantity22 = Energy.From(1, EnergyUnit.Megacalorie);
            AssertEx.EqualTolerance(1, quantity22.Megacalories, MegacaloriesTolerance);
            Assert.Equal(EnergyUnit.Megacalorie, quantity22.Unit);

            var quantity23 = Energy.From(1, EnergyUnit.MegaelectronVolt);
            AssertEx.EqualTolerance(1, quantity23.MegaelectronVolts, MegaelectronVoltsTolerance);
            Assert.Equal(EnergyUnit.MegaelectronVolt, quantity23.Unit);

            var quantity24 = Energy.From(1, EnergyUnit.Megajoule);
            AssertEx.EqualTolerance(1, quantity24.Megajoules, MegajoulesTolerance);
            Assert.Equal(EnergyUnit.Megajoule, quantity24.Unit);

            var quantity25 = Energy.From(1, EnergyUnit.MegawattDay);
            AssertEx.EqualTolerance(1, quantity25.MegawattDays, MegawattDaysTolerance);
            Assert.Equal(EnergyUnit.MegawattDay, quantity25.Unit);

            var quantity26 = Energy.From(1, EnergyUnit.MegawattHour);
            AssertEx.EqualTolerance(1, quantity26.MegawattHours, MegawattHoursTolerance);
            Assert.Equal(EnergyUnit.MegawattHour, quantity26.Unit);

            var quantity27 = Energy.From(1, EnergyUnit.Millijoule);
            AssertEx.EqualTolerance(1, quantity27.Millijoules, MillijoulesTolerance);
            Assert.Equal(EnergyUnit.Millijoule, quantity27.Unit);

            var quantity28 = Energy.From(1, EnergyUnit.TeraelectronVolt);
            AssertEx.EqualTolerance(1, quantity28.TeraelectronVolts, TeraelectronVoltsTolerance);
            Assert.Equal(EnergyUnit.TeraelectronVolt, quantity28.Unit);

            var quantity29 = Energy.From(1, EnergyUnit.TerawattDay);
            AssertEx.EqualTolerance(1, quantity29.TerawattDays, TerawattDaysTolerance);
            Assert.Equal(EnergyUnit.TerawattDay, quantity29.Unit);

            var quantity30 = Energy.From(1, EnergyUnit.TerawattHour);
            AssertEx.EqualTolerance(1, quantity30.TerawattHours, TerawattHoursTolerance);
            Assert.Equal(EnergyUnit.TerawattHour, quantity30.Unit);

            var quantity31 = Energy.From(1, EnergyUnit.ThermEc);
            AssertEx.EqualTolerance(1, quantity31.ThermsEc, ThermsEcTolerance);
            Assert.Equal(EnergyUnit.ThermEc, quantity31.Unit);

            var quantity32 = Energy.From(1, EnergyUnit.ThermImperial);
            AssertEx.EqualTolerance(1, quantity32.ThermsImperial, ThermsImperialTolerance);
            Assert.Equal(EnergyUnit.ThermImperial, quantity32.Unit);

            var quantity33 = Energy.From(1, EnergyUnit.ThermUs);
            AssertEx.EqualTolerance(1, quantity33.ThermsUs, ThermsUsTolerance);
            Assert.Equal(EnergyUnit.ThermUs, quantity33.Unit);

            var quantity34 = Energy.From(1, EnergyUnit.WattDay);
            AssertEx.EqualTolerance(1, quantity34.WattDays, WattDaysTolerance);
            Assert.Equal(EnergyUnit.WattDay, quantity34.Unit);

            var quantity35 = Energy.From(1, EnergyUnit.WattHour);
            AssertEx.EqualTolerance(1, quantity35.WattHours, WattHoursTolerance);
            Assert.Equal(EnergyUnit.WattHour, quantity35.Unit);

        }

        [Fact]
        public void FromJoules_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => Energy.FromJoules(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => Energy.FromJoules(double.NegativeInfinity));
        }

        [Fact]
        public void FromJoules_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => Energy.FromJoules(double.NaN));
        }

        [Fact]
        public void As()
        {
            var joule = Energy.FromJoules(1);
            AssertEx.EqualTolerance(BritishThermalUnitsInOneJoule, joule.As(EnergyUnit.BritishThermalUnit), BritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(CaloriesInOneJoule, joule.As(EnergyUnit.Calorie), CaloriesTolerance);
            AssertEx.EqualTolerance(DecathermsEcInOneJoule, joule.As(EnergyUnit.DecathermEc), DecathermsEcTolerance);
            AssertEx.EqualTolerance(DecathermsImperialInOneJoule, joule.As(EnergyUnit.DecathermImperial), DecathermsImperialTolerance);
            AssertEx.EqualTolerance(DecathermsUsInOneJoule, joule.As(EnergyUnit.DecathermUs), DecathermsUsTolerance);
            AssertEx.EqualTolerance(ElectronVoltsInOneJoule, joule.As(EnergyUnit.ElectronVolt), ElectronVoltsTolerance);
            AssertEx.EqualTolerance(ErgsInOneJoule, joule.As(EnergyUnit.Erg), ErgsTolerance);
            AssertEx.EqualTolerance(FootPoundsInOneJoule, joule.As(EnergyUnit.FootPound), FootPoundsTolerance);
            AssertEx.EqualTolerance(GigabritishThermalUnitsInOneJoule, joule.As(EnergyUnit.GigabritishThermalUnit), GigabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(GigaelectronVoltsInOneJoule, joule.As(EnergyUnit.GigaelectronVolt), GigaelectronVoltsTolerance);
            AssertEx.EqualTolerance(GigajoulesInOneJoule, joule.As(EnergyUnit.Gigajoule), GigajoulesTolerance);
            AssertEx.EqualTolerance(GigawattDaysInOneJoule, joule.As(EnergyUnit.GigawattDay), GigawattDaysTolerance);
            AssertEx.EqualTolerance(GigawattHoursInOneJoule, joule.As(EnergyUnit.GigawattHour), GigawattHoursTolerance);
            AssertEx.EqualTolerance(HorsepowerHoursInOneJoule, joule.As(EnergyUnit.HorsepowerHour), HorsepowerHoursTolerance);
            AssertEx.EqualTolerance(JoulesInOneJoule, joule.As(EnergyUnit.Joule), JoulesTolerance);
            AssertEx.EqualTolerance(KilobritishThermalUnitsInOneJoule, joule.As(EnergyUnit.KilobritishThermalUnit), KilobritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(KilocaloriesInOneJoule, joule.As(EnergyUnit.Kilocalorie), KilocaloriesTolerance);
            AssertEx.EqualTolerance(KiloelectronVoltsInOneJoule, joule.As(EnergyUnit.KiloelectronVolt), KiloelectronVoltsTolerance);
            AssertEx.EqualTolerance(KilojoulesInOneJoule, joule.As(EnergyUnit.Kilojoule), KilojoulesTolerance);
            AssertEx.EqualTolerance(KilowattDaysInOneJoule, joule.As(EnergyUnit.KilowattDay), KilowattDaysTolerance);
            AssertEx.EqualTolerance(KilowattHoursInOneJoule, joule.As(EnergyUnit.KilowattHour), KilowattHoursTolerance);
            AssertEx.EqualTolerance(MegabritishThermalUnitsInOneJoule, joule.As(EnergyUnit.MegabritishThermalUnit), MegabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(MegacaloriesInOneJoule, joule.As(EnergyUnit.Megacalorie), MegacaloriesTolerance);
            AssertEx.EqualTolerance(MegaelectronVoltsInOneJoule, joule.As(EnergyUnit.MegaelectronVolt), MegaelectronVoltsTolerance);
            AssertEx.EqualTolerance(MegajoulesInOneJoule, joule.As(EnergyUnit.Megajoule), MegajoulesTolerance);
            AssertEx.EqualTolerance(MegawattDaysInOneJoule, joule.As(EnergyUnit.MegawattDay), MegawattDaysTolerance);
            AssertEx.EqualTolerance(MegawattHoursInOneJoule, joule.As(EnergyUnit.MegawattHour), MegawattHoursTolerance);
            AssertEx.EqualTolerance(MillijoulesInOneJoule, joule.As(EnergyUnit.Millijoule), MillijoulesTolerance);
            AssertEx.EqualTolerance(TeraelectronVoltsInOneJoule, joule.As(EnergyUnit.TeraelectronVolt), TeraelectronVoltsTolerance);
            AssertEx.EqualTolerance(TerawattDaysInOneJoule, joule.As(EnergyUnit.TerawattDay), TerawattDaysTolerance);
            AssertEx.EqualTolerance(TerawattHoursInOneJoule, joule.As(EnergyUnit.TerawattHour), TerawattHoursTolerance);
            AssertEx.EqualTolerance(ThermsEcInOneJoule, joule.As(EnergyUnit.ThermEc), ThermsEcTolerance);
            AssertEx.EqualTolerance(ThermsImperialInOneJoule, joule.As(EnergyUnit.ThermImperial), ThermsImperialTolerance);
            AssertEx.EqualTolerance(ThermsUsInOneJoule, joule.As(EnergyUnit.ThermUs), ThermsUsTolerance);
            AssertEx.EqualTolerance(WattDaysInOneJoule, joule.As(EnergyUnit.WattDay), WattDaysTolerance);
            AssertEx.EqualTolerance(WattHoursInOneJoule, joule.As(EnergyUnit.WattHour), WattHoursTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new Energy(value: 1, unit: Energy.BaseUnit);
            Func<object> AsWithSIUnitSystem = () => quantity.As(UnitSystem.SI);

            if (SupportsSIUnitSystem)
            {
                var value = (double) AsWithSIUnitSystem();
                Assert.Equal(1, value);
            }
            else
            {
                Assert.Throws<ArgumentException>(AsWithSIUnitSystem);
            }
        }

        [Fact]
        public void Parse()
        {
            try
            {
                var parsed = Energy.Parse("1 BTU", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.BritishThermalUnits, BritishThermalUnitsTolerance);
                Assert.Equal(EnergyUnit.BritishThermalUnit, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 cal", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Calories, CaloriesTolerance);
                Assert.Equal(EnergyUnit.Calorie, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 Dth (E.C.)", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.DecathermsEc, DecathermsEcTolerance);
                Assert.Equal(EnergyUnit.DecathermEc, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 Европейский декатерм", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.DecathermsEc, DecathermsEcTolerance);
                Assert.Equal(EnergyUnit.DecathermEc, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 Dth (imp.)", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.DecathermsImperial, DecathermsImperialTolerance);
                Assert.Equal(EnergyUnit.DecathermImperial, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 Английский декатерм", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.DecathermsImperial, DecathermsImperialTolerance);
                Assert.Equal(EnergyUnit.DecathermImperial, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 Dth (U.S.)", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.DecathermsUs, DecathermsUsTolerance);
                Assert.Equal(EnergyUnit.DecathermUs, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 Американский декатерм", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.DecathermsUs, DecathermsUsTolerance);
                Assert.Equal(EnergyUnit.DecathermUs, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 eV", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.ElectronVolts, ElectronVoltsTolerance);
                Assert.Equal(EnergyUnit.ElectronVolt, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 эВ", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.ElectronVolts, ElectronVoltsTolerance);
                Assert.Equal(EnergyUnit.ElectronVolt, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 erg", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Ergs, ErgsTolerance);
                Assert.Equal(EnergyUnit.Erg, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 ft·lb", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.FootPounds, FootPoundsTolerance);
                Assert.Equal(EnergyUnit.FootPound, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 GBTU", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.GigabritishThermalUnits, GigabritishThermalUnitsTolerance);
                Assert.Equal(EnergyUnit.GigabritishThermalUnit, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 GeV", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.GigaelectronVolts, GigaelectronVoltsTolerance);
                Assert.Equal(EnergyUnit.GigaelectronVolt, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 ГэВ", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.GigaelectronVolts, GigaelectronVoltsTolerance);
                Assert.Equal(EnergyUnit.GigaelectronVolt, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 GJ", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Gigajoules, GigajoulesTolerance);
                Assert.Equal(EnergyUnit.Gigajoule, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 GWd", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.GigawattDays, GigawattDaysTolerance);
                Assert.Equal(EnergyUnit.GigawattDay, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 ГВт/д", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.GigawattDays, GigawattDaysTolerance);
                Assert.Equal(EnergyUnit.GigawattDay, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 GWh", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.GigawattHours, GigawattHoursTolerance);
                Assert.Equal(EnergyUnit.GigawattHour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 ГВт/ч", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.GigawattHours, GigawattHoursTolerance);
                Assert.Equal(EnergyUnit.GigawattHour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 hp·h", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.HorsepowerHours, HorsepowerHoursTolerance);
                Assert.Equal(EnergyUnit.HorsepowerHour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 J", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Joules, JoulesTolerance);
                Assert.Equal(EnergyUnit.Joule, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 kBTU", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilobritishThermalUnits, KilobritishThermalUnitsTolerance);
                Assert.Equal(EnergyUnit.KilobritishThermalUnit, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 kcal", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Kilocalories, KilocaloriesTolerance);
                Assert.Equal(EnergyUnit.Kilocalorie, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 keV", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KiloelectronVolts, KiloelectronVoltsTolerance);
                Assert.Equal(EnergyUnit.KiloelectronVolt, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 кэВ", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.KiloelectronVolts, KiloelectronVoltsTolerance);
                Assert.Equal(EnergyUnit.KiloelectronVolt, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 kJ", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Kilojoules, KilojoulesTolerance);
                Assert.Equal(EnergyUnit.Kilojoule, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 kWd", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilowattDays, KilowattDaysTolerance);
                Assert.Equal(EnergyUnit.KilowattDay, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 кВт/д", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.KilowattDays, KilowattDaysTolerance);
                Assert.Equal(EnergyUnit.KilowattDay, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 kWh", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilowattHours, KilowattHoursTolerance);
                Assert.Equal(EnergyUnit.KilowattHour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 кВт/ч", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.KilowattHours, KilowattHoursTolerance);
                Assert.Equal(EnergyUnit.KilowattHour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 MBTU", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MegabritishThermalUnits, MegabritishThermalUnitsTolerance);
                Assert.Equal(EnergyUnit.MegabritishThermalUnit, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 Mcal", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Megacalories, MegacaloriesTolerance);
                Assert.Equal(EnergyUnit.Megacalorie, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 MeV", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MegaelectronVolts, MegaelectronVoltsTolerance);
                Assert.Equal(EnergyUnit.MegaelectronVolt, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 МэВ", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.MegaelectronVolts, MegaelectronVoltsTolerance);
                Assert.Equal(EnergyUnit.MegaelectronVolt, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 MJ", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Megajoules, MegajoulesTolerance);
                Assert.Equal(EnergyUnit.Megajoule, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 MWd", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MegawattDays, MegawattDaysTolerance);
                Assert.Equal(EnergyUnit.MegawattDay, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 МВт/д", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.MegawattDays, MegawattDaysTolerance);
                Assert.Equal(EnergyUnit.MegawattDay, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 MWh", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MegawattHours, MegawattHoursTolerance);
                Assert.Equal(EnergyUnit.MegawattHour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 МВт/ч", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.MegawattHours, MegawattHoursTolerance);
                Assert.Equal(EnergyUnit.MegawattHour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 mJ", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Millijoules, MillijoulesTolerance);
                Assert.Equal(EnergyUnit.Millijoule, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 TeV", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.TeraelectronVolts, TeraelectronVoltsTolerance);
                Assert.Equal(EnergyUnit.TeraelectronVolt, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 ТэВ", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.TeraelectronVolts, TeraelectronVoltsTolerance);
                Assert.Equal(EnergyUnit.TeraelectronVolt, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 TWd", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.TerawattDays, TerawattDaysTolerance);
                Assert.Equal(EnergyUnit.TerawattDay, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 ТВт/д", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.TerawattDays, TerawattDaysTolerance);
                Assert.Equal(EnergyUnit.TerawattDay, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 TWh", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.TerawattHours, TerawattHoursTolerance);
                Assert.Equal(EnergyUnit.TerawattHour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 ТВт/ч", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.TerawattHours, TerawattHoursTolerance);
                Assert.Equal(EnergyUnit.TerawattHour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 th (E.C.)", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.ThermsEc, ThermsEcTolerance);
                Assert.Equal(EnergyUnit.ThermEc, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 Европейский терм", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.ThermsEc, ThermsEcTolerance);
                Assert.Equal(EnergyUnit.ThermEc, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 th (imp.)", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.ThermsImperial, ThermsImperialTolerance);
                Assert.Equal(EnergyUnit.ThermImperial, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 Английский терм", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.ThermsImperial, ThermsImperialTolerance);
                Assert.Equal(EnergyUnit.ThermImperial, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 th (U.S.)", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.ThermsUs, ThermsUsTolerance);
                Assert.Equal(EnergyUnit.ThermUs, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 Американский терм", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.ThermsUs, ThermsUsTolerance);
                Assert.Equal(EnergyUnit.ThermUs, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 Wd", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.WattDays, WattDaysTolerance);
                Assert.Equal(EnergyUnit.WattDay, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 Вт/д", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.WattDays, WattDaysTolerance);
                Assert.Equal(EnergyUnit.WattDay, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 Wh", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.WattHours, WattHoursTolerance);
                Assert.Equal(EnergyUnit.WattHour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Energy.Parse("1 Вт/ч", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.WattHours, WattHoursTolerance);
                Assert.Equal(EnergyUnit.WattHour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParse()
        {
            {
                Assert.True(Energy.TryParse("1 BTU", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.BritishThermalUnits, BritishThermalUnitsTolerance);
                Assert.Equal(EnergyUnit.BritishThermalUnit, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 cal", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Calories, CaloriesTolerance);
                Assert.Equal(EnergyUnit.Calorie, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 Dth (E.C.)", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DecathermsEc, DecathermsEcTolerance);
                Assert.Equal(EnergyUnit.DecathermEc, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 Европейский декатерм", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DecathermsEc, DecathermsEcTolerance);
                Assert.Equal(EnergyUnit.DecathermEc, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 Dth (imp.)", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DecathermsImperial, DecathermsImperialTolerance);
                Assert.Equal(EnergyUnit.DecathermImperial, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 Английский декатерм", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DecathermsImperial, DecathermsImperialTolerance);
                Assert.Equal(EnergyUnit.DecathermImperial, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 Dth (U.S.)", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DecathermsUs, DecathermsUsTolerance);
                Assert.Equal(EnergyUnit.DecathermUs, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 Американский декатерм", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DecathermsUs, DecathermsUsTolerance);
                Assert.Equal(EnergyUnit.DecathermUs, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 eV", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.ElectronVolts, ElectronVoltsTolerance);
                Assert.Equal(EnergyUnit.ElectronVolt, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 эВ", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.ElectronVolts, ElectronVoltsTolerance);
                Assert.Equal(EnergyUnit.ElectronVolt, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 erg", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Ergs, ErgsTolerance);
                Assert.Equal(EnergyUnit.Erg, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 ft·lb", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.FootPounds, FootPoundsTolerance);
                Assert.Equal(EnergyUnit.FootPound, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 GBTU", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.GigabritishThermalUnits, GigabritishThermalUnitsTolerance);
                Assert.Equal(EnergyUnit.GigabritishThermalUnit, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 GeV", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.GigaelectronVolts, GigaelectronVoltsTolerance);
                Assert.Equal(EnergyUnit.GigaelectronVolt, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 ГэВ", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.GigaelectronVolts, GigaelectronVoltsTolerance);
                Assert.Equal(EnergyUnit.GigaelectronVolt, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 GJ", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Gigajoules, GigajoulesTolerance);
                Assert.Equal(EnergyUnit.Gigajoule, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 GWd", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.GigawattDays, GigawattDaysTolerance);
                Assert.Equal(EnergyUnit.GigawattDay, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 ГВт/д", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.GigawattDays, GigawattDaysTolerance);
                Assert.Equal(EnergyUnit.GigawattDay, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 GWh", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.GigawattHours, GigawattHoursTolerance);
                Assert.Equal(EnergyUnit.GigawattHour, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 ГВт/ч", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.GigawattHours, GigawattHoursTolerance);
                Assert.Equal(EnergyUnit.GigawattHour, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 hp·h", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.HorsepowerHours, HorsepowerHoursTolerance);
                Assert.Equal(EnergyUnit.HorsepowerHour, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 J", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Joules, JoulesTolerance);
                Assert.Equal(EnergyUnit.Joule, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 kBTU", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilobritishThermalUnits, KilobritishThermalUnitsTolerance);
                Assert.Equal(EnergyUnit.KilobritishThermalUnit, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 kcal", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Kilocalories, KilocaloriesTolerance);
                Assert.Equal(EnergyUnit.Kilocalorie, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 keV", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KiloelectronVolts, KiloelectronVoltsTolerance);
                Assert.Equal(EnergyUnit.KiloelectronVolt, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 кэВ", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KiloelectronVolts, KiloelectronVoltsTolerance);
                Assert.Equal(EnergyUnit.KiloelectronVolt, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 kJ", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Kilojoules, KilojoulesTolerance);
                Assert.Equal(EnergyUnit.Kilojoule, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 kWd", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilowattDays, KilowattDaysTolerance);
                Assert.Equal(EnergyUnit.KilowattDay, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 кВт/д", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilowattDays, KilowattDaysTolerance);
                Assert.Equal(EnergyUnit.KilowattDay, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 kWh", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilowattHours, KilowattHoursTolerance);
                Assert.Equal(EnergyUnit.KilowattHour, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 кВт/ч", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilowattHours, KilowattHoursTolerance);
                Assert.Equal(EnergyUnit.KilowattHour, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 MBTU", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MegabritishThermalUnits, MegabritishThermalUnitsTolerance);
                Assert.Equal(EnergyUnit.MegabritishThermalUnit, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 Mcal", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Megacalories, MegacaloriesTolerance);
                Assert.Equal(EnergyUnit.Megacalorie, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 MeV", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MegaelectronVolts, MegaelectronVoltsTolerance);
                Assert.Equal(EnergyUnit.MegaelectronVolt, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 МэВ", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MegaelectronVolts, MegaelectronVoltsTolerance);
                Assert.Equal(EnergyUnit.MegaelectronVolt, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 MWd", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MegawattDays, MegawattDaysTolerance);
                Assert.Equal(EnergyUnit.MegawattDay, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 МВт/д", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MegawattDays, MegawattDaysTolerance);
                Assert.Equal(EnergyUnit.MegawattDay, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 MWh", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MegawattHours, MegawattHoursTolerance);
                Assert.Equal(EnergyUnit.MegawattHour, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 МВт/ч", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MegawattHours, MegawattHoursTolerance);
                Assert.Equal(EnergyUnit.MegawattHour, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 TeV", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.TeraelectronVolts, TeraelectronVoltsTolerance);
                Assert.Equal(EnergyUnit.TeraelectronVolt, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 ТэВ", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.TeraelectronVolts, TeraelectronVoltsTolerance);
                Assert.Equal(EnergyUnit.TeraelectronVolt, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 TWd", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.TerawattDays, TerawattDaysTolerance);
                Assert.Equal(EnergyUnit.TerawattDay, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 ТВт/д", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.TerawattDays, TerawattDaysTolerance);
                Assert.Equal(EnergyUnit.TerawattDay, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 TWh", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.TerawattHours, TerawattHoursTolerance);
                Assert.Equal(EnergyUnit.TerawattHour, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 ТВт/ч", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.TerawattHours, TerawattHoursTolerance);
                Assert.Equal(EnergyUnit.TerawattHour, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 th (E.C.)", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.ThermsEc, ThermsEcTolerance);
                Assert.Equal(EnergyUnit.ThermEc, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 Европейский терм", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.ThermsEc, ThermsEcTolerance);
                Assert.Equal(EnergyUnit.ThermEc, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 th (imp.)", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.ThermsImperial, ThermsImperialTolerance);
                Assert.Equal(EnergyUnit.ThermImperial, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 Английский терм", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.ThermsImperial, ThermsImperialTolerance);
                Assert.Equal(EnergyUnit.ThermImperial, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 th (U.S.)", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.ThermsUs, ThermsUsTolerance);
                Assert.Equal(EnergyUnit.ThermUs, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 Американский терм", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.ThermsUs, ThermsUsTolerance);
                Assert.Equal(EnergyUnit.ThermUs, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 Wd", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.WattDays, WattDaysTolerance);
                Assert.Equal(EnergyUnit.WattDay, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 Вт/д", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.WattDays, WattDaysTolerance);
                Assert.Equal(EnergyUnit.WattDay, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 Wh", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.WattHours, WattHoursTolerance);
                Assert.Equal(EnergyUnit.WattHour, parsed.Unit);
            }

            {
                Assert.True(Energy.TryParse("1 Вт/ч", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.WattHours, WattHoursTolerance);
                Assert.Equal(EnergyUnit.WattHour, parsed.Unit);
            }

        }

        [Fact]
        public void ParseUnit()
        {
            try
            {
                var parsedUnit = Energy.ParseUnit("BTU", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyUnit.BritishThermalUnit, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("cal", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyUnit.Calorie, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("Dth (E.C.)", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyUnit.DecathermEc, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("Европейский декатерм", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(EnergyUnit.DecathermEc, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("Dth (imp.)", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyUnit.DecathermImperial, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("Английский декатерм", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(EnergyUnit.DecathermImperial, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("Dth (U.S.)", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyUnit.DecathermUs, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("Американский декатерм", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(EnergyUnit.DecathermUs, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("eV", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyUnit.ElectronVolt, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("эВ", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(EnergyUnit.ElectronVolt, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("erg", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyUnit.Erg, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("ft·lb", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyUnit.FootPound, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("GBTU", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyUnit.GigabritishThermalUnit, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("GeV", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyUnit.GigaelectronVolt, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("ГэВ", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(EnergyUnit.GigaelectronVolt, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("GJ", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyUnit.Gigajoule, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("GWd", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyUnit.GigawattDay, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("ГВт/д", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(EnergyUnit.GigawattDay, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("GWh", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyUnit.GigawattHour, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("ГВт/ч", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(EnergyUnit.GigawattHour, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("hp·h", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyUnit.HorsepowerHour, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("J", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyUnit.Joule, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("kBTU", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyUnit.KilobritishThermalUnit, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("kcal", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyUnit.Kilocalorie, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("keV", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyUnit.KiloelectronVolt, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("кэВ", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(EnergyUnit.KiloelectronVolt, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("kJ", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyUnit.Kilojoule, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("kWd", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyUnit.KilowattDay, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("кВт/д", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(EnergyUnit.KilowattDay, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("kWh", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyUnit.KilowattHour, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("кВт/ч", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(EnergyUnit.KilowattHour, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("MBTU", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyUnit.MegabritishThermalUnit, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("Mcal", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyUnit.Megacalorie, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("MeV", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyUnit.MegaelectronVolt, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("МэВ", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(EnergyUnit.MegaelectronVolt, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("MJ", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyUnit.Megajoule, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("MWd", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyUnit.MegawattDay, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("МВт/д", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(EnergyUnit.MegawattDay, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("MWh", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyUnit.MegawattHour, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("МВт/ч", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(EnergyUnit.MegawattHour, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("mJ", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyUnit.Millijoule, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("TeV", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyUnit.TeraelectronVolt, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("ТэВ", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(EnergyUnit.TeraelectronVolt, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("TWd", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyUnit.TerawattDay, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("ТВт/д", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(EnergyUnit.TerawattDay, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("TWh", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyUnit.TerawattHour, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("ТВт/ч", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(EnergyUnit.TerawattHour, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("th (E.C.)", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyUnit.ThermEc, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("Европейский терм", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(EnergyUnit.ThermEc, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("th (imp.)", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyUnit.ThermImperial, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("Английский терм", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(EnergyUnit.ThermImperial, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("th (U.S.)", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyUnit.ThermUs, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("Американский терм", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(EnergyUnit.ThermUs, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("Wd", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyUnit.WattDay, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("Вт/д", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(EnergyUnit.WattDay, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("Wh", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyUnit.WattHour, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Energy.ParseUnit("Вт/ч", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(EnergyUnit.WattHour, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParseUnit()
        {
            {
                Assert.True(Energy.TryParseUnit("BTU", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyUnit.BritishThermalUnit, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("cal", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyUnit.Calorie, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("Dth (E.C.)", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyUnit.DecathermEc, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("Европейский декатерм", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(EnergyUnit.DecathermEc, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("Dth (imp.)", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyUnit.DecathermImperial, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("Английский декатерм", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(EnergyUnit.DecathermImperial, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("Dth (U.S.)", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyUnit.DecathermUs, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("Американский декатерм", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(EnergyUnit.DecathermUs, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("eV", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyUnit.ElectronVolt, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("эВ", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(EnergyUnit.ElectronVolt, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("erg", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyUnit.Erg, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("ft·lb", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyUnit.FootPound, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("GBTU", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyUnit.GigabritishThermalUnit, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("GeV", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyUnit.GigaelectronVolt, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("ГэВ", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(EnergyUnit.GigaelectronVolt, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("GJ", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyUnit.Gigajoule, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("GWd", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyUnit.GigawattDay, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("ГВт/д", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(EnergyUnit.GigawattDay, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("GWh", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyUnit.GigawattHour, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("ГВт/ч", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(EnergyUnit.GigawattHour, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("hp·h", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyUnit.HorsepowerHour, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("J", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyUnit.Joule, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("kBTU", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyUnit.KilobritishThermalUnit, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("kcal", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyUnit.Kilocalorie, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("keV", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyUnit.KiloelectronVolt, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("кэВ", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(EnergyUnit.KiloelectronVolt, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("kJ", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyUnit.Kilojoule, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("kWd", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyUnit.KilowattDay, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("кВт/д", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(EnergyUnit.KilowattDay, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("kWh", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyUnit.KilowattHour, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("кВт/ч", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(EnergyUnit.KilowattHour, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("MBTU", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyUnit.MegabritishThermalUnit, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("Mcal", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyUnit.Megacalorie, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("MeV", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyUnit.MegaelectronVolt, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("МэВ", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(EnergyUnit.MegaelectronVolt, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("MWd", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyUnit.MegawattDay, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("МВт/д", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(EnergyUnit.MegawattDay, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("MWh", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyUnit.MegawattHour, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("МВт/ч", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(EnergyUnit.MegawattHour, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("TeV", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyUnit.TeraelectronVolt, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("ТэВ", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(EnergyUnit.TeraelectronVolt, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("TWd", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyUnit.TerawattDay, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("ТВт/д", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(EnergyUnit.TerawattDay, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("TWh", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyUnit.TerawattHour, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("ТВт/ч", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(EnergyUnit.TerawattHour, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("th (E.C.)", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyUnit.ThermEc, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("Европейский терм", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(EnergyUnit.ThermEc, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("th (imp.)", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyUnit.ThermImperial, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("Английский терм", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(EnergyUnit.ThermImperial, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("th (U.S.)", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyUnit.ThermUs, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("Американский терм", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(EnergyUnit.ThermUs, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("Wd", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyUnit.WattDay, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("Вт/д", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(EnergyUnit.WattDay, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("Wh", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyUnit.WattHour, parsedUnit);
            }

            {
                Assert.True(Energy.TryParseUnit("Вт/ч", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(EnergyUnit.WattHour, parsedUnit);
            }

        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(EnergyUnit unit)
        {
            var inBaseUnits = Energy.From(1.0, Energy.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, (double)converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(EnergyUnit unit)
        {
            var quantity = Energy.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(EnergyUnit unit)
        {
            // See if there is a unit available that is not the base unit.
            var fromUnit = Energy.Units.FirstOrDefault(u => u != Energy.BaseUnit && u != EnergyUnit.Undefined);

            // If there is only one unit for the quantity, we must use the base unit.
            if (fromUnit == EnergyUnit.Undefined)
                fromUnit = Energy.BaseUnit;

            var quantity = Energy.From(3.0, fromUnit);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Energy joule = Energy.FromJoules(1);
            AssertEx.EqualTolerance(1, Energy.FromBritishThermalUnits(joule.BritishThermalUnits).Joules, BritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(1, Energy.FromCalories(joule.Calories).Joules, CaloriesTolerance);
            AssertEx.EqualTolerance(1, Energy.FromDecathermsEc(joule.DecathermsEc).Joules, DecathermsEcTolerance);
            AssertEx.EqualTolerance(1, Energy.FromDecathermsImperial(joule.DecathermsImperial).Joules, DecathermsImperialTolerance);
            AssertEx.EqualTolerance(1, Energy.FromDecathermsUs(joule.DecathermsUs).Joules, DecathermsUsTolerance);
            AssertEx.EqualTolerance(1, Energy.FromElectronVolts(joule.ElectronVolts).Joules, ElectronVoltsTolerance);
            AssertEx.EqualTolerance(1, Energy.FromErgs(joule.Ergs).Joules, ErgsTolerance);
            AssertEx.EqualTolerance(1, Energy.FromFootPounds(joule.FootPounds).Joules, FootPoundsTolerance);
            AssertEx.EqualTolerance(1, Energy.FromGigabritishThermalUnits(joule.GigabritishThermalUnits).Joules, GigabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(1, Energy.FromGigaelectronVolts(joule.GigaelectronVolts).Joules, GigaelectronVoltsTolerance);
            AssertEx.EqualTolerance(1, Energy.FromGigajoules(joule.Gigajoules).Joules, GigajoulesTolerance);
            AssertEx.EqualTolerance(1, Energy.FromGigawattDays(joule.GigawattDays).Joules, GigawattDaysTolerance);
            AssertEx.EqualTolerance(1, Energy.FromGigawattHours(joule.GigawattHours).Joules, GigawattHoursTolerance);
            AssertEx.EqualTolerance(1, Energy.FromHorsepowerHours(joule.HorsepowerHours).Joules, HorsepowerHoursTolerance);
            AssertEx.EqualTolerance(1, Energy.FromJoules(joule.Joules).Joules, JoulesTolerance);
            AssertEx.EqualTolerance(1, Energy.FromKilobritishThermalUnits(joule.KilobritishThermalUnits).Joules, KilobritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(1, Energy.FromKilocalories(joule.Kilocalories).Joules, KilocaloriesTolerance);
            AssertEx.EqualTolerance(1, Energy.FromKiloelectronVolts(joule.KiloelectronVolts).Joules, KiloelectronVoltsTolerance);
            AssertEx.EqualTolerance(1, Energy.FromKilojoules(joule.Kilojoules).Joules, KilojoulesTolerance);
            AssertEx.EqualTolerance(1, Energy.FromKilowattDays(joule.KilowattDays).Joules, KilowattDaysTolerance);
            AssertEx.EqualTolerance(1, Energy.FromKilowattHours(joule.KilowattHours).Joules, KilowattHoursTolerance);
            AssertEx.EqualTolerance(1, Energy.FromMegabritishThermalUnits(joule.MegabritishThermalUnits).Joules, MegabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(1, Energy.FromMegacalories(joule.Megacalories).Joules, MegacaloriesTolerance);
            AssertEx.EqualTolerance(1, Energy.FromMegaelectronVolts(joule.MegaelectronVolts).Joules, MegaelectronVoltsTolerance);
            AssertEx.EqualTolerance(1, Energy.FromMegajoules(joule.Megajoules).Joules, MegajoulesTolerance);
            AssertEx.EqualTolerance(1, Energy.FromMegawattDays(joule.MegawattDays).Joules, MegawattDaysTolerance);
            AssertEx.EqualTolerance(1, Energy.FromMegawattHours(joule.MegawattHours).Joules, MegawattHoursTolerance);
            AssertEx.EqualTolerance(1, Energy.FromMillijoules(joule.Millijoules).Joules, MillijoulesTolerance);
            AssertEx.EqualTolerance(1, Energy.FromTeraelectronVolts(joule.TeraelectronVolts).Joules, TeraelectronVoltsTolerance);
            AssertEx.EqualTolerance(1, Energy.FromTerawattDays(joule.TerawattDays).Joules, TerawattDaysTolerance);
            AssertEx.EqualTolerance(1, Energy.FromTerawattHours(joule.TerawattHours).Joules, TerawattHoursTolerance);
            AssertEx.EqualTolerance(1, Energy.FromThermsEc(joule.ThermsEc).Joules, ThermsEcTolerance);
            AssertEx.EqualTolerance(1, Energy.FromThermsImperial(joule.ThermsImperial).Joules, ThermsImperialTolerance);
            AssertEx.EqualTolerance(1, Energy.FromThermsUs(joule.ThermsUs).Joules, ThermsUsTolerance);
            AssertEx.EqualTolerance(1, Energy.FromWattDays(joule.WattDays).Joules, WattDaysTolerance);
            AssertEx.EqualTolerance(1, Energy.FromWattHours(joule.WattHours).Joules, WattHoursTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Energy v = Energy.FromJoules(1);
            AssertEx.EqualTolerance(-1, -v.Joules, JoulesTolerance);
            AssertEx.EqualTolerance(2, (Energy.FromJoules(3)-v).Joules, JoulesTolerance);
            AssertEx.EqualTolerance(2, (v + v).Joules, JoulesTolerance);
            AssertEx.EqualTolerance(10, (v*10).Joules, JoulesTolerance);
            AssertEx.EqualTolerance(10, (10*v).Joules, JoulesTolerance);
            AssertEx.EqualTolerance(2, (Energy.FromJoules(10)/5).Joules, JoulesTolerance);
            AssertEx.EqualTolerance(2, Energy.FromJoules(10)/Energy.FromJoules(5), JoulesTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            Energy oneJoule = Energy.FromJoules(1);
            Energy twoJoules = Energy.FromJoules(2);

            Assert.True(oneJoule < twoJoules);
            Assert.True(oneJoule <= twoJoules);
            Assert.True(twoJoules > oneJoule);
            Assert.True(twoJoules >= oneJoule);

            Assert.False(oneJoule > twoJoules);
            Assert.False(oneJoule >= twoJoules);
            Assert.False(twoJoules < oneJoule);
            Assert.False(twoJoules <= oneJoule);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Energy joule = Energy.FromJoules(1);
            Assert.Equal(0, joule.CompareTo(joule));
            Assert.True(joule.CompareTo(Energy.Zero) > 0);
            Assert.True(Energy.Zero.CompareTo(joule) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Energy joule = Energy.FromJoules(1);
            Assert.Throws<ArgumentException>(() => joule.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Energy joule = Energy.FromJoules(1);
            Assert.Throws<ArgumentNullException>(() => joule.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = Energy.FromJoules(1);
            var b = Energy.FromJoules(2);

#pragma warning disable CS8073
// ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
#pragma warning restore CS8073
        }

        [Fact]
        public void Equals_SameType_IsImplemented()
        {
            var a = Energy.FromJoules(1);
            var b = Energy.FromJoules(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
        }

        [Fact]
        public void Equals_QuantityAsObject_IsImplemented()
        {
            object a = Energy.FromJoules(1);
            object b = Energy.FromJoules(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals((object)null));
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = Energy.FromJoules(1);
            Assert.True(v.Equals(Energy.FromJoules(1), JoulesTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(Energy.Zero, JoulesTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = Energy.FromJoules(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(Energy.FromJoules(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Energy joule = Energy.FromJoules(1);
            Assert.False(joule.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Energy joule = Energy.FromJoules(1);
            Assert.False(joule.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(EnergyUnit.Undefined, Energy.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(EnergyUnit)).Cast<EnergyUnit>();
            foreach(var unit in units)
            {
                if (unit == EnergyUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Energy.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentUICulture;
            Thread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 BTU", new Energy(1, EnergyUnit.BritishThermalUnit).ToString());
                Assert.Equal("1 cal", new Energy(1, EnergyUnit.Calorie).ToString());
                Assert.Equal("1 Dth (E.C.)", new Energy(1, EnergyUnit.DecathermEc).ToString());
                Assert.Equal("1 Dth (imp.)", new Energy(1, EnergyUnit.DecathermImperial).ToString());
                Assert.Equal("1 Dth (U.S.)", new Energy(1, EnergyUnit.DecathermUs).ToString());
                Assert.Equal("1 eV", new Energy(1, EnergyUnit.ElectronVolt).ToString());
                Assert.Equal("1 erg", new Energy(1, EnergyUnit.Erg).ToString());
                Assert.Equal("1 ft·lb", new Energy(1, EnergyUnit.FootPound).ToString());
                Assert.Equal("1 GBTU", new Energy(1, EnergyUnit.GigabritishThermalUnit).ToString());
                Assert.Equal("1 GeV", new Energy(1, EnergyUnit.GigaelectronVolt).ToString());
                Assert.Equal("1 GJ", new Energy(1, EnergyUnit.Gigajoule).ToString());
                Assert.Equal("1 GWd", new Energy(1, EnergyUnit.GigawattDay).ToString());
                Assert.Equal("1 GWh", new Energy(1, EnergyUnit.GigawattHour).ToString());
                Assert.Equal("1 hp·h", new Energy(1, EnergyUnit.HorsepowerHour).ToString());
                Assert.Equal("1 J", new Energy(1, EnergyUnit.Joule).ToString());
                Assert.Equal("1 kBTU", new Energy(1, EnergyUnit.KilobritishThermalUnit).ToString());
                Assert.Equal("1 kcal", new Energy(1, EnergyUnit.Kilocalorie).ToString());
                Assert.Equal("1 keV", new Energy(1, EnergyUnit.KiloelectronVolt).ToString());
                Assert.Equal("1 kJ", new Energy(1, EnergyUnit.Kilojoule).ToString());
                Assert.Equal("1 kWd", new Energy(1, EnergyUnit.KilowattDay).ToString());
                Assert.Equal("1 kWh", new Energy(1, EnergyUnit.KilowattHour).ToString());
                Assert.Equal("1 MBTU", new Energy(1, EnergyUnit.MegabritishThermalUnit).ToString());
                Assert.Equal("1 Mcal", new Energy(1, EnergyUnit.Megacalorie).ToString());
                Assert.Equal("1 MeV", new Energy(1, EnergyUnit.MegaelectronVolt).ToString());
                Assert.Equal("1 MJ", new Energy(1, EnergyUnit.Megajoule).ToString());
                Assert.Equal("1 MWd", new Energy(1, EnergyUnit.MegawattDay).ToString());
                Assert.Equal("1 MWh", new Energy(1, EnergyUnit.MegawattHour).ToString());
                Assert.Equal("1 mJ", new Energy(1, EnergyUnit.Millijoule).ToString());
                Assert.Equal("1 TeV", new Energy(1, EnergyUnit.TeraelectronVolt).ToString());
                Assert.Equal("1 TWd", new Energy(1, EnergyUnit.TerawattDay).ToString());
                Assert.Equal("1 TWh", new Energy(1, EnergyUnit.TerawattHour).ToString());
                Assert.Equal("1 th (E.C.)", new Energy(1, EnergyUnit.ThermEc).ToString());
                Assert.Equal("1 th (imp.)", new Energy(1, EnergyUnit.ThermImperial).ToString());
                Assert.Equal("1 th (U.S.)", new Energy(1, EnergyUnit.ThermUs).ToString());
                Assert.Equal("1 Wd", new Energy(1, EnergyUnit.WattDay).ToString());
                Assert.Equal("1 Wh", new Energy(1, EnergyUnit.WattHour).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentUICulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 BTU", new Energy(1, EnergyUnit.BritishThermalUnit).ToString(swedishCulture));
            Assert.Equal("1 cal", new Energy(1, EnergyUnit.Calorie).ToString(swedishCulture));
            Assert.Equal("1 Dth (E.C.)", new Energy(1, EnergyUnit.DecathermEc).ToString(swedishCulture));
            Assert.Equal("1 Dth (imp.)", new Energy(1, EnergyUnit.DecathermImperial).ToString(swedishCulture));
            Assert.Equal("1 Dth (U.S.)", new Energy(1, EnergyUnit.DecathermUs).ToString(swedishCulture));
            Assert.Equal("1 eV", new Energy(1, EnergyUnit.ElectronVolt).ToString(swedishCulture));
            Assert.Equal("1 erg", new Energy(1, EnergyUnit.Erg).ToString(swedishCulture));
            Assert.Equal("1 ft·lb", new Energy(1, EnergyUnit.FootPound).ToString(swedishCulture));
            Assert.Equal("1 GBTU", new Energy(1, EnergyUnit.GigabritishThermalUnit).ToString(swedishCulture));
            Assert.Equal("1 GeV", new Energy(1, EnergyUnit.GigaelectronVolt).ToString(swedishCulture));
            Assert.Equal("1 GJ", new Energy(1, EnergyUnit.Gigajoule).ToString(swedishCulture));
            Assert.Equal("1 GWd", new Energy(1, EnergyUnit.GigawattDay).ToString(swedishCulture));
            Assert.Equal("1 GWh", new Energy(1, EnergyUnit.GigawattHour).ToString(swedishCulture));
            Assert.Equal("1 hp·h", new Energy(1, EnergyUnit.HorsepowerHour).ToString(swedishCulture));
            Assert.Equal("1 J", new Energy(1, EnergyUnit.Joule).ToString(swedishCulture));
            Assert.Equal("1 kBTU", new Energy(1, EnergyUnit.KilobritishThermalUnit).ToString(swedishCulture));
            Assert.Equal("1 kcal", new Energy(1, EnergyUnit.Kilocalorie).ToString(swedishCulture));
            Assert.Equal("1 keV", new Energy(1, EnergyUnit.KiloelectronVolt).ToString(swedishCulture));
            Assert.Equal("1 kJ", new Energy(1, EnergyUnit.Kilojoule).ToString(swedishCulture));
            Assert.Equal("1 kWd", new Energy(1, EnergyUnit.KilowattDay).ToString(swedishCulture));
            Assert.Equal("1 kWh", new Energy(1, EnergyUnit.KilowattHour).ToString(swedishCulture));
            Assert.Equal("1 MBTU", new Energy(1, EnergyUnit.MegabritishThermalUnit).ToString(swedishCulture));
            Assert.Equal("1 Mcal", new Energy(1, EnergyUnit.Megacalorie).ToString(swedishCulture));
            Assert.Equal("1 MeV", new Energy(1, EnergyUnit.MegaelectronVolt).ToString(swedishCulture));
            Assert.Equal("1 MJ", new Energy(1, EnergyUnit.Megajoule).ToString(swedishCulture));
            Assert.Equal("1 MWd", new Energy(1, EnergyUnit.MegawattDay).ToString(swedishCulture));
            Assert.Equal("1 MWh", new Energy(1, EnergyUnit.MegawattHour).ToString(swedishCulture));
            Assert.Equal("1 mJ", new Energy(1, EnergyUnit.Millijoule).ToString(swedishCulture));
            Assert.Equal("1 TeV", new Energy(1, EnergyUnit.TeraelectronVolt).ToString(swedishCulture));
            Assert.Equal("1 TWd", new Energy(1, EnergyUnit.TerawattDay).ToString(swedishCulture));
            Assert.Equal("1 TWh", new Energy(1, EnergyUnit.TerawattHour).ToString(swedishCulture));
            Assert.Equal("1 th (E.C.)", new Energy(1, EnergyUnit.ThermEc).ToString(swedishCulture));
            Assert.Equal("1 th (imp.)", new Energy(1, EnergyUnit.ThermImperial).ToString(swedishCulture));
            Assert.Equal("1 th (U.S.)", new Energy(1, EnergyUnit.ThermUs).ToString(swedishCulture));
            Assert.Equal("1 Wd", new Energy(1, EnergyUnit.WattDay).ToString(swedishCulture));
            Assert.Equal("1 Wh", new Energy(1, EnergyUnit.WattHour).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentUICulture;
            try
            {
                CultureInfo.CurrentUICulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 J", new Energy(0.123456, EnergyUnit.Joule).ToString("s1"));
                Assert.Equal("0.12 J", new Energy(0.123456, EnergyUnit.Joule).ToString("s2"));
                Assert.Equal("0.123 J", new Energy(0.123456, EnergyUnit.Joule).ToString("s3"));
                Assert.Equal("0.1235 J", new Energy(0.123456, EnergyUnit.Joule).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentUICulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 J", new Energy(0.123456, EnergyUnit.Joule).ToString("s1", culture));
            Assert.Equal("0.12 J", new Energy(0.123456, EnergyUnit.Joule).ToString("s2", culture));
            Assert.Equal("0.123 J", new Energy(0.123456, EnergyUnit.Joule).ToString("s3", culture));
            Assert.Equal("0.1235 J", new Energy(0.123456, EnergyUnit.Joule).ToString("s4", culture));
        }


        [Fact]
        public void ToString_NullFormat_ThrowsArgumentNullException()
        {
            var quantity = Energy.FromJoules(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, null, null));
        }

        [Fact]
        public void ToString_NullArgs_ThrowsArgumentNullException()
        {
            var quantity = Energy.FromJoules(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, "g", null));
        }

        [Fact]
        public void ToString_NullProvider_EqualsCurrentUICulture()
        {
            var quantity = Energy.FromJoules(1.0);
            Assert.Equal(quantity.ToString(CultureInfo.CurrentUICulture, "g"), quantity.ToString(null, "g"));
        }


        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = Energy.FromJoules(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = Energy.FromJoules(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = Energy.FromJoules(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = Energy.FromJoules(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = Energy.FromJoules(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = Energy.FromJoules(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = Energy.FromJoules(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = Energy.FromJoules(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = Energy.FromJoules(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = Energy.FromJoules(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = Energy.FromJoules(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = Energy.FromJoules(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = Energy.FromJoules(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = Energy.FromJoules(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = Energy.FromJoules(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = Energy.FromJoules(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(Energy)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = Energy.FromJoules(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(EnergyUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityType_EqualsQuantityType()
        {
            var quantity = Energy.FromJoules(1.0);
            Assert.Equal(QuantityType.Energy, Convert.ChangeType(quantity, typeof(QuantityType)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = Energy.FromJoules(1.0);
            Assert.Equal(Energy.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = Energy.FromJoules(1.0);
            Assert.Equal(Energy.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = Energy.FromJoules(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = Energy.FromJoules(1.0);
            Assert.Equal(new {Energy.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = Energy.FromJoules(value);
            Assert.Equal(Energy.FromJoules(-value), -quantity);
        }
    }
}
