//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of SpecificEnergy.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class SpecificEnergyTestsBase : QuantityTestsBase
    {
        protected abstract double BtuPerPoundInOneJoulePerKilogram { get; }
        protected abstract double CaloriesPerGramInOneJoulePerKilogram { get; }
        protected abstract double GigawattDaysPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double GigawattDaysPerShortTonInOneJoulePerKilogram { get; }
        protected abstract double GigawattDaysPerTonneInOneJoulePerKilogram { get; }
        protected abstract double GigawattHoursPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double GigawattHoursPerPoundInOneJoulePerKilogram { get; }
        protected abstract double JoulesPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double KilocaloriesPerGramInOneJoulePerKilogram { get; }
        protected abstract double KilojoulesPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double KilowattDaysPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double KilowattDaysPerShortTonInOneJoulePerKilogram { get; }
        protected abstract double KilowattDaysPerTonneInOneJoulePerKilogram { get; }
        protected abstract double KilowattHoursPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double KilowattHoursPerPoundInOneJoulePerKilogram { get; }
        protected abstract double MegajoulesPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double MegawattDaysPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double MegawattDaysPerShortTonInOneJoulePerKilogram { get; }
        protected abstract double MegawattDaysPerTonneInOneJoulePerKilogram { get; }
        protected abstract double MegawattHoursPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double MegawattHoursPerPoundInOneJoulePerKilogram { get; }
        protected abstract double TerawattDaysPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double TerawattDaysPerShortTonInOneJoulePerKilogram { get; }
        protected abstract double TerawattDaysPerTonneInOneJoulePerKilogram { get; }
        protected abstract double WattDaysPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double WattDaysPerShortTonInOneJoulePerKilogram { get; }
        protected abstract double WattDaysPerTonneInOneJoulePerKilogram { get; }
        protected abstract double WattHoursPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double WattHoursPerPoundInOneJoulePerKilogram { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double BtuPerPoundTolerance { get { return 1e-5; } }
        protected virtual double CaloriesPerGramTolerance { get { return 1e-5; } }
        protected virtual double GigawattDaysPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double GigawattDaysPerShortTonTolerance { get { return 1e-5; } }
        protected virtual double GigawattDaysPerTonneTolerance { get { return 1e-5; } }
        protected virtual double GigawattHoursPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double GigawattHoursPerPoundTolerance { get { return 1e-5; } }
        protected virtual double JoulesPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double KilocaloriesPerGramTolerance { get { return 1e-5; } }
        protected virtual double KilojoulesPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double KilowattDaysPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double KilowattDaysPerShortTonTolerance { get { return 1e-5; } }
        protected virtual double KilowattDaysPerTonneTolerance { get { return 1e-5; } }
        protected virtual double KilowattHoursPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double KilowattHoursPerPoundTolerance { get { return 1e-5; } }
        protected virtual double MegajoulesPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double MegawattDaysPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double MegawattDaysPerShortTonTolerance { get { return 1e-5; } }
        protected virtual double MegawattDaysPerTonneTolerance { get { return 1e-5; } }
        protected virtual double MegawattHoursPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double MegawattHoursPerPoundTolerance { get { return 1e-5; } }
        protected virtual double TerawattDaysPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double TerawattDaysPerShortTonTolerance { get { return 1e-5; } }
        protected virtual double TerawattDaysPerTonneTolerance { get { return 1e-5; } }
        protected virtual double WattDaysPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double WattDaysPerShortTonTolerance { get { return 1e-5; } }
        protected virtual double WattDaysPerTonneTolerance { get { return 1e-5; } }
        protected virtual double WattHoursPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double WattHoursPerPoundTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(SpecificEnergyUnit unit)
        {
            return unit switch
            {
                SpecificEnergyUnit.BtuPerPound => (BtuPerPoundInOneJoulePerKilogram, BtuPerPoundTolerance),
                SpecificEnergyUnit.CaloriePerGram => (CaloriesPerGramInOneJoulePerKilogram, CaloriesPerGramTolerance),
                SpecificEnergyUnit.GigawattDayPerKilogram => (GigawattDaysPerKilogramInOneJoulePerKilogram, GigawattDaysPerKilogramTolerance),
                SpecificEnergyUnit.GigawattDayPerShortTon => (GigawattDaysPerShortTonInOneJoulePerKilogram, GigawattDaysPerShortTonTolerance),
                SpecificEnergyUnit.GigawattDayPerTonne => (GigawattDaysPerTonneInOneJoulePerKilogram, GigawattDaysPerTonneTolerance),
                SpecificEnergyUnit.GigawattHourPerKilogram => (GigawattHoursPerKilogramInOneJoulePerKilogram, GigawattHoursPerKilogramTolerance),
                SpecificEnergyUnit.GigawattHourPerPound => (GigawattHoursPerPoundInOneJoulePerKilogram, GigawattHoursPerPoundTolerance),
                SpecificEnergyUnit.JoulePerKilogram => (JoulesPerKilogramInOneJoulePerKilogram, JoulesPerKilogramTolerance),
                SpecificEnergyUnit.KilocaloriePerGram => (KilocaloriesPerGramInOneJoulePerKilogram, KilocaloriesPerGramTolerance),
                SpecificEnergyUnit.KilojoulePerKilogram => (KilojoulesPerKilogramInOneJoulePerKilogram, KilojoulesPerKilogramTolerance),
                SpecificEnergyUnit.KilowattDayPerKilogram => (KilowattDaysPerKilogramInOneJoulePerKilogram, KilowattDaysPerKilogramTolerance),
                SpecificEnergyUnit.KilowattDayPerShortTon => (KilowattDaysPerShortTonInOneJoulePerKilogram, KilowattDaysPerShortTonTolerance),
                SpecificEnergyUnit.KilowattDayPerTonne => (KilowattDaysPerTonneInOneJoulePerKilogram, KilowattDaysPerTonneTolerance),
                SpecificEnergyUnit.KilowattHourPerKilogram => (KilowattHoursPerKilogramInOneJoulePerKilogram, KilowattHoursPerKilogramTolerance),
                SpecificEnergyUnit.KilowattHourPerPound => (KilowattHoursPerPoundInOneJoulePerKilogram, KilowattHoursPerPoundTolerance),
                SpecificEnergyUnit.MegajoulePerKilogram => (MegajoulesPerKilogramInOneJoulePerKilogram, MegajoulesPerKilogramTolerance),
                SpecificEnergyUnit.MegawattDayPerKilogram => (MegawattDaysPerKilogramInOneJoulePerKilogram, MegawattDaysPerKilogramTolerance),
                SpecificEnergyUnit.MegawattDayPerShortTon => (MegawattDaysPerShortTonInOneJoulePerKilogram, MegawattDaysPerShortTonTolerance),
                SpecificEnergyUnit.MegawattDayPerTonne => (MegawattDaysPerTonneInOneJoulePerKilogram, MegawattDaysPerTonneTolerance),
                SpecificEnergyUnit.MegawattHourPerKilogram => (MegawattHoursPerKilogramInOneJoulePerKilogram, MegawattHoursPerKilogramTolerance),
                SpecificEnergyUnit.MegawattHourPerPound => (MegawattHoursPerPoundInOneJoulePerKilogram, MegawattHoursPerPoundTolerance),
                SpecificEnergyUnit.TerawattDayPerKilogram => (TerawattDaysPerKilogramInOneJoulePerKilogram, TerawattDaysPerKilogramTolerance),
                SpecificEnergyUnit.TerawattDayPerShortTon => (TerawattDaysPerShortTonInOneJoulePerKilogram, TerawattDaysPerShortTonTolerance),
                SpecificEnergyUnit.TerawattDayPerTonne => (TerawattDaysPerTonneInOneJoulePerKilogram, TerawattDaysPerTonneTolerance),
                SpecificEnergyUnit.WattDayPerKilogram => (WattDaysPerKilogramInOneJoulePerKilogram, WattDaysPerKilogramTolerance),
                SpecificEnergyUnit.WattDayPerShortTon => (WattDaysPerShortTonInOneJoulePerKilogram, WattDaysPerShortTonTolerance),
                SpecificEnergyUnit.WattDayPerTonne => (WattDaysPerTonneInOneJoulePerKilogram, WattDaysPerTonneTolerance),
                SpecificEnergyUnit.WattHourPerKilogram => (WattHoursPerKilogramInOneJoulePerKilogram, WattHoursPerKilogramTolerance),
                SpecificEnergyUnit.WattHourPerPound => (WattHoursPerPoundInOneJoulePerKilogram, WattHoursPerPoundTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { SpecificEnergyUnit.BtuPerPound },
            new object[] { SpecificEnergyUnit.CaloriePerGram },
            new object[] { SpecificEnergyUnit.GigawattDayPerKilogram },
            new object[] { SpecificEnergyUnit.GigawattDayPerShortTon },
            new object[] { SpecificEnergyUnit.GigawattDayPerTonne },
            new object[] { SpecificEnergyUnit.GigawattHourPerKilogram },
            new object[] { SpecificEnergyUnit.GigawattHourPerPound },
            new object[] { SpecificEnergyUnit.JoulePerKilogram },
            new object[] { SpecificEnergyUnit.KilocaloriePerGram },
            new object[] { SpecificEnergyUnit.KilojoulePerKilogram },
            new object[] { SpecificEnergyUnit.KilowattDayPerKilogram },
            new object[] { SpecificEnergyUnit.KilowattDayPerShortTon },
            new object[] { SpecificEnergyUnit.KilowattDayPerTonne },
            new object[] { SpecificEnergyUnit.KilowattHourPerKilogram },
            new object[] { SpecificEnergyUnit.KilowattHourPerPound },
            new object[] { SpecificEnergyUnit.MegajoulePerKilogram },
            new object[] { SpecificEnergyUnit.MegawattDayPerKilogram },
            new object[] { SpecificEnergyUnit.MegawattDayPerShortTon },
            new object[] { SpecificEnergyUnit.MegawattDayPerTonne },
            new object[] { SpecificEnergyUnit.MegawattHourPerKilogram },
            new object[] { SpecificEnergyUnit.MegawattHourPerPound },
            new object[] { SpecificEnergyUnit.TerawattDayPerKilogram },
            new object[] { SpecificEnergyUnit.TerawattDayPerShortTon },
            new object[] { SpecificEnergyUnit.TerawattDayPerTonne },
            new object[] { SpecificEnergyUnit.WattDayPerKilogram },
            new object[] { SpecificEnergyUnit.WattDayPerShortTon },
            new object[] { SpecificEnergyUnit.WattDayPerTonne },
            new object[] { SpecificEnergyUnit.WattHourPerKilogram },
            new object[] { SpecificEnergyUnit.WattHourPerPound },
        };

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new SpecificEnergy((double)0.0, SpecificEnergyUnit.Undefined));
        }

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new SpecificEnergy();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(SpecificEnergyUnit.JoulePerKilogram, quantity.Unit);
        }


        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new SpecificEnergy(double.PositiveInfinity, SpecificEnergyUnit.JoulePerKilogram));
            Assert.Throws<ArgumentException>(() => new SpecificEnergy(double.NegativeInfinity, SpecificEnergyUnit.JoulePerKilogram));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new SpecificEnergy(double.NaN, SpecificEnergyUnit.JoulePerKilogram));
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new SpecificEnergy(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            Func<object> TestCode = () => new SpecificEnergy(value: 1, unitSystem: UnitSystem.SI);
            if (SupportsSIUnitSystem)
            {
                var quantity = (SpecificEnergy) TestCode();
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(TestCode);
            }
        }

        [Fact]
        public void SpecificEnergy_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new SpecificEnergy(1, SpecificEnergyUnit.JoulePerKilogram);

            QuantityInfo<SpecificEnergyUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(SpecificEnergy.Zero, quantityInfo.Zero);
            Assert.Equal("SpecificEnergy", quantityInfo.Name);
            Assert.Equal(QuantityType.SpecificEnergy, quantityInfo.QuantityType);

            var units = EnumUtils.GetEnumValues<SpecificEnergyUnit>().Except(new[] {SpecificEnergyUnit.Undefined}).OrderBy(x => x.ToString()).ToArray();
            var unitNames = units.Select(x => x.ToString());

            // Obsolete members
            Assert.Equal(units, quantityInfo.Units);
            Assert.Equal(unitNames, quantityInfo.UnitNames);
        }

        [Fact]
        public void JoulePerKilogramToSpecificEnergyUnits()
        {
            SpecificEnergy jouleperkilogram = SpecificEnergy.FromJoulesPerKilogram(1);
            AssertEx.EqualTolerance(BtuPerPoundInOneJoulePerKilogram, jouleperkilogram.BtuPerPound, BtuPerPoundTolerance);
            AssertEx.EqualTolerance(CaloriesPerGramInOneJoulePerKilogram, jouleperkilogram.CaloriesPerGram, CaloriesPerGramTolerance);
            AssertEx.EqualTolerance(GigawattDaysPerKilogramInOneJoulePerKilogram, jouleperkilogram.GigawattDaysPerKilogram, GigawattDaysPerKilogramTolerance);
            AssertEx.EqualTolerance(GigawattDaysPerShortTonInOneJoulePerKilogram, jouleperkilogram.GigawattDaysPerShortTon, GigawattDaysPerShortTonTolerance);
            AssertEx.EqualTolerance(GigawattDaysPerTonneInOneJoulePerKilogram, jouleperkilogram.GigawattDaysPerTonne, GigawattDaysPerTonneTolerance);
            AssertEx.EqualTolerance(GigawattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.GigawattHoursPerKilogram, GigawattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(GigawattHoursPerPoundInOneJoulePerKilogram, jouleperkilogram.GigawattHoursPerPound, GigawattHoursPerPoundTolerance);
            AssertEx.EqualTolerance(JoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.JoulesPerKilogram, JoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(KilocaloriesPerGramInOneJoulePerKilogram, jouleperkilogram.KilocaloriesPerGram, KilocaloriesPerGramTolerance);
            AssertEx.EqualTolerance(KilojoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.KilojoulesPerKilogram, KilojoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(KilowattDaysPerKilogramInOneJoulePerKilogram, jouleperkilogram.KilowattDaysPerKilogram, KilowattDaysPerKilogramTolerance);
            AssertEx.EqualTolerance(KilowattDaysPerShortTonInOneJoulePerKilogram, jouleperkilogram.KilowattDaysPerShortTon, KilowattDaysPerShortTonTolerance);
            AssertEx.EqualTolerance(KilowattDaysPerTonneInOneJoulePerKilogram, jouleperkilogram.KilowattDaysPerTonne, KilowattDaysPerTonneTolerance);
            AssertEx.EqualTolerance(KilowattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.KilowattHoursPerKilogram, KilowattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(KilowattHoursPerPoundInOneJoulePerKilogram, jouleperkilogram.KilowattHoursPerPound, KilowattHoursPerPoundTolerance);
            AssertEx.EqualTolerance(MegajoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.MegajoulesPerKilogram, MegajoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(MegawattDaysPerKilogramInOneJoulePerKilogram, jouleperkilogram.MegawattDaysPerKilogram, MegawattDaysPerKilogramTolerance);
            AssertEx.EqualTolerance(MegawattDaysPerShortTonInOneJoulePerKilogram, jouleperkilogram.MegawattDaysPerShortTon, MegawattDaysPerShortTonTolerance);
            AssertEx.EqualTolerance(MegawattDaysPerTonneInOneJoulePerKilogram, jouleperkilogram.MegawattDaysPerTonne, MegawattDaysPerTonneTolerance);
            AssertEx.EqualTolerance(MegawattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.MegawattHoursPerKilogram, MegawattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(MegawattHoursPerPoundInOneJoulePerKilogram, jouleperkilogram.MegawattHoursPerPound, MegawattHoursPerPoundTolerance);
            AssertEx.EqualTolerance(TerawattDaysPerKilogramInOneJoulePerKilogram, jouleperkilogram.TerawattDaysPerKilogram, TerawattDaysPerKilogramTolerance);
            AssertEx.EqualTolerance(TerawattDaysPerShortTonInOneJoulePerKilogram, jouleperkilogram.TerawattDaysPerShortTon, TerawattDaysPerShortTonTolerance);
            AssertEx.EqualTolerance(TerawattDaysPerTonneInOneJoulePerKilogram, jouleperkilogram.TerawattDaysPerTonne, TerawattDaysPerTonneTolerance);
            AssertEx.EqualTolerance(WattDaysPerKilogramInOneJoulePerKilogram, jouleperkilogram.WattDaysPerKilogram, WattDaysPerKilogramTolerance);
            AssertEx.EqualTolerance(WattDaysPerShortTonInOneJoulePerKilogram, jouleperkilogram.WattDaysPerShortTon, WattDaysPerShortTonTolerance);
            AssertEx.EqualTolerance(WattDaysPerTonneInOneJoulePerKilogram, jouleperkilogram.WattDaysPerTonne, WattDaysPerTonneTolerance);
            AssertEx.EqualTolerance(WattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.WattHoursPerKilogram, WattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(WattHoursPerPoundInOneJoulePerKilogram, jouleperkilogram.WattHoursPerPound, WattHoursPerPoundTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = SpecificEnergy.From(1, SpecificEnergyUnit.BtuPerPound);
            AssertEx.EqualTolerance(1, quantity00.BtuPerPound, BtuPerPoundTolerance);
            Assert.Equal(SpecificEnergyUnit.BtuPerPound, quantity00.Unit);

            var quantity01 = SpecificEnergy.From(1, SpecificEnergyUnit.CaloriePerGram);
            AssertEx.EqualTolerance(1, quantity01.CaloriesPerGram, CaloriesPerGramTolerance);
            Assert.Equal(SpecificEnergyUnit.CaloriePerGram, quantity01.Unit);

            var quantity02 = SpecificEnergy.From(1, SpecificEnergyUnit.GigawattDayPerKilogram);
            AssertEx.EqualTolerance(1, quantity02.GigawattDaysPerKilogram, GigawattDaysPerKilogramTolerance);
            Assert.Equal(SpecificEnergyUnit.GigawattDayPerKilogram, quantity02.Unit);

            var quantity03 = SpecificEnergy.From(1, SpecificEnergyUnit.GigawattDayPerShortTon);
            AssertEx.EqualTolerance(1, quantity03.GigawattDaysPerShortTon, GigawattDaysPerShortTonTolerance);
            Assert.Equal(SpecificEnergyUnit.GigawattDayPerShortTon, quantity03.Unit);

            var quantity04 = SpecificEnergy.From(1, SpecificEnergyUnit.GigawattDayPerTonne);
            AssertEx.EqualTolerance(1, quantity04.GigawattDaysPerTonne, GigawattDaysPerTonneTolerance);
            Assert.Equal(SpecificEnergyUnit.GigawattDayPerTonne, quantity04.Unit);

            var quantity05 = SpecificEnergy.From(1, SpecificEnergyUnit.GigawattHourPerKilogram);
            AssertEx.EqualTolerance(1, quantity05.GigawattHoursPerKilogram, GigawattHoursPerKilogramTolerance);
            Assert.Equal(SpecificEnergyUnit.GigawattHourPerKilogram, quantity05.Unit);

            var quantity06 = SpecificEnergy.From(1, SpecificEnergyUnit.GigawattHourPerPound);
            AssertEx.EqualTolerance(1, quantity06.GigawattHoursPerPound, GigawattHoursPerPoundTolerance);
            Assert.Equal(SpecificEnergyUnit.GigawattHourPerPound, quantity06.Unit);

            var quantity07 = SpecificEnergy.From(1, SpecificEnergyUnit.JoulePerKilogram);
            AssertEx.EqualTolerance(1, quantity07.JoulesPerKilogram, JoulesPerKilogramTolerance);
            Assert.Equal(SpecificEnergyUnit.JoulePerKilogram, quantity07.Unit);

            var quantity08 = SpecificEnergy.From(1, SpecificEnergyUnit.KilocaloriePerGram);
            AssertEx.EqualTolerance(1, quantity08.KilocaloriesPerGram, KilocaloriesPerGramTolerance);
            Assert.Equal(SpecificEnergyUnit.KilocaloriePerGram, quantity08.Unit);

            var quantity09 = SpecificEnergy.From(1, SpecificEnergyUnit.KilojoulePerKilogram);
            AssertEx.EqualTolerance(1, quantity09.KilojoulesPerKilogram, KilojoulesPerKilogramTolerance);
            Assert.Equal(SpecificEnergyUnit.KilojoulePerKilogram, quantity09.Unit);

            var quantity10 = SpecificEnergy.From(1, SpecificEnergyUnit.KilowattDayPerKilogram);
            AssertEx.EqualTolerance(1, quantity10.KilowattDaysPerKilogram, KilowattDaysPerKilogramTolerance);
            Assert.Equal(SpecificEnergyUnit.KilowattDayPerKilogram, quantity10.Unit);

            var quantity11 = SpecificEnergy.From(1, SpecificEnergyUnit.KilowattDayPerShortTon);
            AssertEx.EqualTolerance(1, quantity11.KilowattDaysPerShortTon, KilowattDaysPerShortTonTolerance);
            Assert.Equal(SpecificEnergyUnit.KilowattDayPerShortTon, quantity11.Unit);

            var quantity12 = SpecificEnergy.From(1, SpecificEnergyUnit.KilowattDayPerTonne);
            AssertEx.EqualTolerance(1, quantity12.KilowattDaysPerTonne, KilowattDaysPerTonneTolerance);
            Assert.Equal(SpecificEnergyUnit.KilowattDayPerTonne, quantity12.Unit);

            var quantity13 = SpecificEnergy.From(1, SpecificEnergyUnit.KilowattHourPerKilogram);
            AssertEx.EqualTolerance(1, quantity13.KilowattHoursPerKilogram, KilowattHoursPerKilogramTolerance);
            Assert.Equal(SpecificEnergyUnit.KilowattHourPerKilogram, quantity13.Unit);

            var quantity14 = SpecificEnergy.From(1, SpecificEnergyUnit.KilowattHourPerPound);
            AssertEx.EqualTolerance(1, quantity14.KilowattHoursPerPound, KilowattHoursPerPoundTolerance);
            Assert.Equal(SpecificEnergyUnit.KilowattHourPerPound, quantity14.Unit);

            var quantity15 = SpecificEnergy.From(1, SpecificEnergyUnit.MegajoulePerKilogram);
            AssertEx.EqualTolerance(1, quantity15.MegajoulesPerKilogram, MegajoulesPerKilogramTolerance);
            Assert.Equal(SpecificEnergyUnit.MegajoulePerKilogram, quantity15.Unit);

            var quantity16 = SpecificEnergy.From(1, SpecificEnergyUnit.MegawattDayPerKilogram);
            AssertEx.EqualTolerance(1, quantity16.MegawattDaysPerKilogram, MegawattDaysPerKilogramTolerance);
            Assert.Equal(SpecificEnergyUnit.MegawattDayPerKilogram, quantity16.Unit);

            var quantity17 = SpecificEnergy.From(1, SpecificEnergyUnit.MegawattDayPerShortTon);
            AssertEx.EqualTolerance(1, quantity17.MegawattDaysPerShortTon, MegawattDaysPerShortTonTolerance);
            Assert.Equal(SpecificEnergyUnit.MegawattDayPerShortTon, quantity17.Unit);

            var quantity18 = SpecificEnergy.From(1, SpecificEnergyUnit.MegawattDayPerTonne);
            AssertEx.EqualTolerance(1, quantity18.MegawattDaysPerTonne, MegawattDaysPerTonneTolerance);
            Assert.Equal(SpecificEnergyUnit.MegawattDayPerTonne, quantity18.Unit);

            var quantity19 = SpecificEnergy.From(1, SpecificEnergyUnit.MegawattHourPerKilogram);
            AssertEx.EqualTolerance(1, quantity19.MegawattHoursPerKilogram, MegawattHoursPerKilogramTolerance);
            Assert.Equal(SpecificEnergyUnit.MegawattHourPerKilogram, quantity19.Unit);

            var quantity20 = SpecificEnergy.From(1, SpecificEnergyUnit.MegawattHourPerPound);
            AssertEx.EqualTolerance(1, quantity20.MegawattHoursPerPound, MegawattHoursPerPoundTolerance);
            Assert.Equal(SpecificEnergyUnit.MegawattHourPerPound, quantity20.Unit);

            var quantity21 = SpecificEnergy.From(1, SpecificEnergyUnit.TerawattDayPerKilogram);
            AssertEx.EqualTolerance(1, quantity21.TerawattDaysPerKilogram, TerawattDaysPerKilogramTolerance);
            Assert.Equal(SpecificEnergyUnit.TerawattDayPerKilogram, quantity21.Unit);

            var quantity22 = SpecificEnergy.From(1, SpecificEnergyUnit.TerawattDayPerShortTon);
            AssertEx.EqualTolerance(1, quantity22.TerawattDaysPerShortTon, TerawattDaysPerShortTonTolerance);
            Assert.Equal(SpecificEnergyUnit.TerawattDayPerShortTon, quantity22.Unit);

            var quantity23 = SpecificEnergy.From(1, SpecificEnergyUnit.TerawattDayPerTonne);
            AssertEx.EqualTolerance(1, quantity23.TerawattDaysPerTonne, TerawattDaysPerTonneTolerance);
            Assert.Equal(SpecificEnergyUnit.TerawattDayPerTonne, quantity23.Unit);

            var quantity24 = SpecificEnergy.From(1, SpecificEnergyUnit.WattDayPerKilogram);
            AssertEx.EqualTolerance(1, quantity24.WattDaysPerKilogram, WattDaysPerKilogramTolerance);
            Assert.Equal(SpecificEnergyUnit.WattDayPerKilogram, quantity24.Unit);

            var quantity25 = SpecificEnergy.From(1, SpecificEnergyUnit.WattDayPerShortTon);
            AssertEx.EqualTolerance(1, quantity25.WattDaysPerShortTon, WattDaysPerShortTonTolerance);
            Assert.Equal(SpecificEnergyUnit.WattDayPerShortTon, quantity25.Unit);

            var quantity26 = SpecificEnergy.From(1, SpecificEnergyUnit.WattDayPerTonne);
            AssertEx.EqualTolerance(1, quantity26.WattDaysPerTonne, WattDaysPerTonneTolerance);
            Assert.Equal(SpecificEnergyUnit.WattDayPerTonne, quantity26.Unit);

            var quantity27 = SpecificEnergy.From(1, SpecificEnergyUnit.WattHourPerKilogram);
            AssertEx.EqualTolerance(1, quantity27.WattHoursPerKilogram, WattHoursPerKilogramTolerance);
            Assert.Equal(SpecificEnergyUnit.WattHourPerKilogram, quantity27.Unit);

            var quantity28 = SpecificEnergy.From(1, SpecificEnergyUnit.WattHourPerPound);
            AssertEx.EqualTolerance(1, quantity28.WattHoursPerPound, WattHoursPerPoundTolerance);
            Assert.Equal(SpecificEnergyUnit.WattHourPerPound, quantity28.Unit);

        }

        [Fact]
        public void FromJoulesPerKilogram_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => SpecificEnergy.FromJoulesPerKilogram(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => SpecificEnergy.FromJoulesPerKilogram(double.NegativeInfinity));
        }

        [Fact]
        public void FromJoulesPerKilogram_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => SpecificEnergy.FromJoulesPerKilogram(double.NaN));
        }

        [Fact]
        public void As()
        {
            var jouleperkilogram = SpecificEnergy.FromJoulesPerKilogram(1);
            AssertEx.EqualTolerance(BtuPerPoundInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.BtuPerPound), BtuPerPoundTolerance);
            AssertEx.EqualTolerance(CaloriesPerGramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.CaloriePerGram), CaloriesPerGramTolerance);
            AssertEx.EqualTolerance(GigawattDaysPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.GigawattDayPerKilogram), GigawattDaysPerKilogramTolerance);
            AssertEx.EqualTolerance(GigawattDaysPerShortTonInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.GigawattDayPerShortTon), GigawattDaysPerShortTonTolerance);
            AssertEx.EqualTolerance(GigawattDaysPerTonneInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.GigawattDayPerTonne), GigawattDaysPerTonneTolerance);
            AssertEx.EqualTolerance(GigawattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.GigawattHourPerKilogram), GigawattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(GigawattHoursPerPoundInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.GigawattHourPerPound), GigawattHoursPerPoundTolerance);
            AssertEx.EqualTolerance(JoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.JoulePerKilogram), JoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(KilocaloriesPerGramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.KilocaloriePerGram), KilocaloriesPerGramTolerance);
            AssertEx.EqualTolerance(KilojoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.KilojoulePerKilogram), KilojoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(KilowattDaysPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.KilowattDayPerKilogram), KilowattDaysPerKilogramTolerance);
            AssertEx.EqualTolerance(KilowattDaysPerShortTonInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.KilowattDayPerShortTon), KilowattDaysPerShortTonTolerance);
            AssertEx.EqualTolerance(KilowattDaysPerTonneInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.KilowattDayPerTonne), KilowattDaysPerTonneTolerance);
            AssertEx.EqualTolerance(KilowattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.KilowattHourPerKilogram), KilowattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(KilowattHoursPerPoundInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.KilowattHourPerPound), KilowattHoursPerPoundTolerance);
            AssertEx.EqualTolerance(MegajoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.MegajoulePerKilogram), MegajoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(MegawattDaysPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.MegawattDayPerKilogram), MegawattDaysPerKilogramTolerance);
            AssertEx.EqualTolerance(MegawattDaysPerShortTonInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.MegawattDayPerShortTon), MegawattDaysPerShortTonTolerance);
            AssertEx.EqualTolerance(MegawattDaysPerTonneInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.MegawattDayPerTonne), MegawattDaysPerTonneTolerance);
            AssertEx.EqualTolerance(MegawattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.MegawattHourPerKilogram), MegawattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(MegawattHoursPerPoundInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.MegawattHourPerPound), MegawattHoursPerPoundTolerance);
            AssertEx.EqualTolerance(TerawattDaysPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.TerawattDayPerKilogram), TerawattDaysPerKilogramTolerance);
            AssertEx.EqualTolerance(TerawattDaysPerShortTonInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.TerawattDayPerShortTon), TerawattDaysPerShortTonTolerance);
            AssertEx.EqualTolerance(TerawattDaysPerTonneInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.TerawattDayPerTonne), TerawattDaysPerTonneTolerance);
            AssertEx.EqualTolerance(WattDaysPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.WattDayPerKilogram), WattDaysPerKilogramTolerance);
            AssertEx.EqualTolerance(WattDaysPerShortTonInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.WattDayPerShortTon), WattDaysPerShortTonTolerance);
            AssertEx.EqualTolerance(WattDaysPerTonneInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.WattDayPerTonne), WattDaysPerTonneTolerance);
            AssertEx.EqualTolerance(WattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.WattHourPerKilogram), WattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(WattHoursPerPoundInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.WattHourPerPound), WattHoursPerPoundTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new SpecificEnergy(value: 1, unit: SpecificEnergy.BaseUnit);
            Func<object> AsWithSIUnitSystem = () => quantity.As(UnitSystem.SI);

            if (SupportsSIUnitSystem)
            {
                var value = (double) AsWithSIUnitSystem();
                Assert.Equal(1, value);
            }
            else
            {
                Assert.Throws<ArgumentException>(AsWithSIUnitSystem);
            }
        }

        [Fact]
        public void Parse()
        {
            try
            {
                var parsed = SpecificEnergy.Parse("1 btu/lb", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.BtuPerPound, BtuPerPoundTolerance);
                Assert.Equal(SpecificEnergyUnit.BtuPerPound, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = SpecificEnergy.Parse("1 cal/g", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.CaloriesPerGram, CaloriesPerGramTolerance);
                Assert.Equal(SpecificEnergyUnit.CaloriePerGram, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = SpecificEnergy.Parse("1 GWd/kg", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.GigawattDaysPerKilogram, GigawattDaysPerKilogramTolerance);
                Assert.Equal(SpecificEnergyUnit.GigawattDayPerKilogram, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = SpecificEnergy.Parse("1 GWd/ST", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.GigawattDaysPerShortTon, GigawattDaysPerShortTonTolerance);
                Assert.Equal(SpecificEnergyUnit.GigawattDayPerShortTon, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = SpecificEnergy.Parse("1 GWd/t", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.GigawattDaysPerTonne, GigawattDaysPerTonneTolerance);
                Assert.Equal(SpecificEnergyUnit.GigawattDayPerTonne, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = SpecificEnergy.Parse("1 GWh/kg", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.GigawattHoursPerKilogram, GigawattHoursPerKilogramTolerance);
                Assert.Equal(SpecificEnergyUnit.GigawattHourPerKilogram, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = SpecificEnergy.Parse("1 GWh/lbs", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.GigawattHoursPerPound, GigawattHoursPerPoundTolerance);
                Assert.Equal(SpecificEnergyUnit.GigawattHourPerPound, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = SpecificEnergy.Parse("1 J/kg", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.JoulesPerKilogram, JoulesPerKilogramTolerance);
                Assert.Equal(SpecificEnergyUnit.JoulePerKilogram, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = SpecificEnergy.Parse("1 kcal/g", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilocaloriesPerGram, KilocaloriesPerGramTolerance);
                Assert.Equal(SpecificEnergyUnit.KilocaloriePerGram, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = SpecificEnergy.Parse("1 kJ/kg", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilojoulesPerKilogram, KilojoulesPerKilogramTolerance);
                Assert.Equal(SpecificEnergyUnit.KilojoulePerKilogram, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = SpecificEnergy.Parse("1 kWd/kg", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilowattDaysPerKilogram, KilowattDaysPerKilogramTolerance);
                Assert.Equal(SpecificEnergyUnit.KilowattDayPerKilogram, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = SpecificEnergy.Parse("1 kWd/ST", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilowattDaysPerShortTon, KilowattDaysPerShortTonTolerance);
                Assert.Equal(SpecificEnergyUnit.KilowattDayPerShortTon, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = SpecificEnergy.Parse("1 kWd/t", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilowattDaysPerTonne, KilowattDaysPerTonneTolerance);
                Assert.Equal(SpecificEnergyUnit.KilowattDayPerTonne, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = SpecificEnergy.Parse("1 kWh/kg", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilowattHoursPerKilogram, KilowattHoursPerKilogramTolerance);
                Assert.Equal(SpecificEnergyUnit.KilowattHourPerKilogram, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = SpecificEnergy.Parse("1 kWh/lbs", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilowattHoursPerPound, KilowattHoursPerPoundTolerance);
                Assert.Equal(SpecificEnergyUnit.KilowattHourPerPound, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = SpecificEnergy.Parse("1 MJ/kg", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MegajoulesPerKilogram, MegajoulesPerKilogramTolerance);
                Assert.Equal(SpecificEnergyUnit.MegajoulePerKilogram, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = SpecificEnergy.Parse("1 MWd/kg", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MegawattDaysPerKilogram, MegawattDaysPerKilogramTolerance);
                Assert.Equal(SpecificEnergyUnit.MegawattDayPerKilogram, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = SpecificEnergy.Parse("1 MWd/ST", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MegawattDaysPerShortTon, MegawattDaysPerShortTonTolerance);
                Assert.Equal(SpecificEnergyUnit.MegawattDayPerShortTon, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = SpecificEnergy.Parse("1 MWd/t", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MegawattDaysPerTonne, MegawattDaysPerTonneTolerance);
                Assert.Equal(SpecificEnergyUnit.MegawattDayPerTonne, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = SpecificEnergy.Parse("1 MWh/kg", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MegawattHoursPerKilogram, MegawattHoursPerKilogramTolerance);
                Assert.Equal(SpecificEnergyUnit.MegawattHourPerKilogram, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = SpecificEnergy.Parse("1 MWh/lbs", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MegawattHoursPerPound, MegawattHoursPerPoundTolerance);
                Assert.Equal(SpecificEnergyUnit.MegawattHourPerPound, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = SpecificEnergy.Parse("1 TWd/kg", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.TerawattDaysPerKilogram, TerawattDaysPerKilogramTolerance);
                Assert.Equal(SpecificEnergyUnit.TerawattDayPerKilogram, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = SpecificEnergy.Parse("1 TWd/ST", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.TerawattDaysPerShortTon, TerawattDaysPerShortTonTolerance);
                Assert.Equal(SpecificEnergyUnit.TerawattDayPerShortTon, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = SpecificEnergy.Parse("1 TWd/t", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.TerawattDaysPerTonne, TerawattDaysPerTonneTolerance);
                Assert.Equal(SpecificEnergyUnit.TerawattDayPerTonne, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = SpecificEnergy.Parse("1 Wd/kg", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.WattDaysPerKilogram, WattDaysPerKilogramTolerance);
                Assert.Equal(SpecificEnergyUnit.WattDayPerKilogram, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = SpecificEnergy.Parse("1 Wd/ST", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.WattDaysPerShortTon, WattDaysPerShortTonTolerance);
                Assert.Equal(SpecificEnergyUnit.WattDayPerShortTon, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = SpecificEnergy.Parse("1 Wd/t", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.WattDaysPerTonne, WattDaysPerTonneTolerance);
                Assert.Equal(SpecificEnergyUnit.WattDayPerTonne, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = SpecificEnergy.Parse("1 Wh/kg", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.WattHoursPerKilogram, WattHoursPerKilogramTolerance);
                Assert.Equal(SpecificEnergyUnit.WattHourPerKilogram, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = SpecificEnergy.Parse("1 Wh/lbs", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.WattHoursPerPound, WattHoursPerPoundTolerance);
                Assert.Equal(SpecificEnergyUnit.WattHourPerPound, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParse()
        {
            {
                Assert.True(SpecificEnergy.TryParse("1 btu/lb", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.BtuPerPound, BtuPerPoundTolerance);
                Assert.Equal(SpecificEnergyUnit.BtuPerPound, parsed.Unit);
            }

            {
                Assert.True(SpecificEnergy.TryParse("1 cal/g", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.CaloriesPerGram, CaloriesPerGramTolerance);
                Assert.Equal(SpecificEnergyUnit.CaloriePerGram, parsed.Unit);
            }

            {
                Assert.True(SpecificEnergy.TryParse("1 GWd/kg", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.GigawattDaysPerKilogram, GigawattDaysPerKilogramTolerance);
                Assert.Equal(SpecificEnergyUnit.GigawattDayPerKilogram, parsed.Unit);
            }

            {
                Assert.True(SpecificEnergy.TryParse("1 GWd/ST", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.GigawattDaysPerShortTon, GigawattDaysPerShortTonTolerance);
                Assert.Equal(SpecificEnergyUnit.GigawattDayPerShortTon, parsed.Unit);
            }

            {
                Assert.True(SpecificEnergy.TryParse("1 GWd/t", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.GigawattDaysPerTonne, GigawattDaysPerTonneTolerance);
                Assert.Equal(SpecificEnergyUnit.GigawattDayPerTonne, parsed.Unit);
            }

            {
                Assert.True(SpecificEnergy.TryParse("1 GWh/kg", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.GigawattHoursPerKilogram, GigawattHoursPerKilogramTolerance);
                Assert.Equal(SpecificEnergyUnit.GigawattHourPerKilogram, parsed.Unit);
            }

            {
                Assert.True(SpecificEnergy.TryParse("1 GWh/lbs", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.GigawattHoursPerPound, GigawattHoursPerPoundTolerance);
                Assert.Equal(SpecificEnergyUnit.GigawattHourPerPound, parsed.Unit);
            }

            {
                Assert.True(SpecificEnergy.TryParse("1 J/kg", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.JoulesPerKilogram, JoulesPerKilogramTolerance);
                Assert.Equal(SpecificEnergyUnit.JoulePerKilogram, parsed.Unit);
            }

            {
                Assert.True(SpecificEnergy.TryParse("1 kcal/g", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilocaloriesPerGram, KilocaloriesPerGramTolerance);
                Assert.Equal(SpecificEnergyUnit.KilocaloriePerGram, parsed.Unit);
            }

            {
                Assert.True(SpecificEnergy.TryParse("1 kJ/kg", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilojoulesPerKilogram, KilojoulesPerKilogramTolerance);
                Assert.Equal(SpecificEnergyUnit.KilojoulePerKilogram, parsed.Unit);
            }

            {
                Assert.True(SpecificEnergy.TryParse("1 kWd/kg", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilowattDaysPerKilogram, KilowattDaysPerKilogramTolerance);
                Assert.Equal(SpecificEnergyUnit.KilowattDayPerKilogram, parsed.Unit);
            }

            {
                Assert.True(SpecificEnergy.TryParse("1 kWd/ST", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilowattDaysPerShortTon, KilowattDaysPerShortTonTolerance);
                Assert.Equal(SpecificEnergyUnit.KilowattDayPerShortTon, parsed.Unit);
            }

            {
                Assert.True(SpecificEnergy.TryParse("1 kWd/t", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilowattDaysPerTonne, KilowattDaysPerTonneTolerance);
                Assert.Equal(SpecificEnergyUnit.KilowattDayPerTonne, parsed.Unit);
            }

            {
                Assert.True(SpecificEnergy.TryParse("1 kWh/kg", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilowattHoursPerKilogram, KilowattHoursPerKilogramTolerance);
                Assert.Equal(SpecificEnergyUnit.KilowattHourPerKilogram, parsed.Unit);
            }

            {
                Assert.True(SpecificEnergy.TryParse("1 kWh/lbs", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilowattHoursPerPound, KilowattHoursPerPoundTolerance);
                Assert.Equal(SpecificEnergyUnit.KilowattHourPerPound, parsed.Unit);
            }

            {
                Assert.True(SpecificEnergy.TryParse("1 MJ/kg", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MegajoulesPerKilogram, MegajoulesPerKilogramTolerance);
                Assert.Equal(SpecificEnergyUnit.MegajoulePerKilogram, parsed.Unit);
            }

            {
                Assert.True(SpecificEnergy.TryParse("1 MWd/kg", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MegawattDaysPerKilogram, MegawattDaysPerKilogramTolerance);
                Assert.Equal(SpecificEnergyUnit.MegawattDayPerKilogram, parsed.Unit);
            }

            {
                Assert.True(SpecificEnergy.TryParse("1 MWd/ST", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MegawattDaysPerShortTon, MegawattDaysPerShortTonTolerance);
                Assert.Equal(SpecificEnergyUnit.MegawattDayPerShortTon, parsed.Unit);
            }

            {
                Assert.True(SpecificEnergy.TryParse("1 MWd/t", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MegawattDaysPerTonne, MegawattDaysPerTonneTolerance);
                Assert.Equal(SpecificEnergyUnit.MegawattDayPerTonne, parsed.Unit);
            }

            {
                Assert.True(SpecificEnergy.TryParse("1 MWh/kg", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MegawattHoursPerKilogram, MegawattHoursPerKilogramTolerance);
                Assert.Equal(SpecificEnergyUnit.MegawattHourPerKilogram, parsed.Unit);
            }

            {
                Assert.True(SpecificEnergy.TryParse("1 MWh/lbs", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MegawattHoursPerPound, MegawattHoursPerPoundTolerance);
                Assert.Equal(SpecificEnergyUnit.MegawattHourPerPound, parsed.Unit);
            }

            {
                Assert.True(SpecificEnergy.TryParse("1 TWd/kg", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.TerawattDaysPerKilogram, TerawattDaysPerKilogramTolerance);
                Assert.Equal(SpecificEnergyUnit.TerawattDayPerKilogram, parsed.Unit);
            }

            {
                Assert.True(SpecificEnergy.TryParse("1 TWd/ST", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.TerawattDaysPerShortTon, TerawattDaysPerShortTonTolerance);
                Assert.Equal(SpecificEnergyUnit.TerawattDayPerShortTon, parsed.Unit);
            }

            {
                Assert.True(SpecificEnergy.TryParse("1 TWd/t", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.TerawattDaysPerTonne, TerawattDaysPerTonneTolerance);
                Assert.Equal(SpecificEnergyUnit.TerawattDayPerTonne, parsed.Unit);
            }

            {
                Assert.True(SpecificEnergy.TryParse("1 Wd/kg", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.WattDaysPerKilogram, WattDaysPerKilogramTolerance);
                Assert.Equal(SpecificEnergyUnit.WattDayPerKilogram, parsed.Unit);
            }

            {
                Assert.True(SpecificEnergy.TryParse("1 Wd/ST", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.WattDaysPerShortTon, WattDaysPerShortTonTolerance);
                Assert.Equal(SpecificEnergyUnit.WattDayPerShortTon, parsed.Unit);
            }

            {
                Assert.True(SpecificEnergy.TryParse("1 Wd/t", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.WattDaysPerTonne, WattDaysPerTonneTolerance);
                Assert.Equal(SpecificEnergyUnit.WattDayPerTonne, parsed.Unit);
            }

            {
                Assert.True(SpecificEnergy.TryParse("1 Wh/kg", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.WattHoursPerKilogram, WattHoursPerKilogramTolerance);
                Assert.Equal(SpecificEnergyUnit.WattHourPerKilogram, parsed.Unit);
            }

            {
                Assert.True(SpecificEnergy.TryParse("1 Wh/lbs", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.WattHoursPerPound, WattHoursPerPoundTolerance);
                Assert.Equal(SpecificEnergyUnit.WattHourPerPound, parsed.Unit);
            }

        }

        [Fact]
        public void ParseUnit()
        {
            try
            {
                var parsedUnit = SpecificEnergy.ParseUnit("btu/lb", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(SpecificEnergyUnit.BtuPerPound, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = SpecificEnergy.ParseUnit("cal/g", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(SpecificEnergyUnit.CaloriePerGram, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = SpecificEnergy.ParseUnit("GWd/kg", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(SpecificEnergyUnit.GigawattDayPerKilogram, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = SpecificEnergy.ParseUnit("GWd/ST", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(SpecificEnergyUnit.GigawattDayPerShortTon, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = SpecificEnergy.ParseUnit("GWd/t", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(SpecificEnergyUnit.GigawattDayPerTonne, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = SpecificEnergy.ParseUnit("GWh/kg", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(SpecificEnergyUnit.GigawattHourPerKilogram, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = SpecificEnergy.ParseUnit("GWh/lbs", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(SpecificEnergyUnit.GigawattHourPerPound, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = SpecificEnergy.ParseUnit("J/kg", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(SpecificEnergyUnit.JoulePerKilogram, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = SpecificEnergy.ParseUnit("kcal/g", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(SpecificEnergyUnit.KilocaloriePerGram, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = SpecificEnergy.ParseUnit("kJ/kg", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(SpecificEnergyUnit.KilojoulePerKilogram, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = SpecificEnergy.ParseUnit("kWd/kg", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(SpecificEnergyUnit.KilowattDayPerKilogram, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = SpecificEnergy.ParseUnit("kWd/ST", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(SpecificEnergyUnit.KilowattDayPerShortTon, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = SpecificEnergy.ParseUnit("kWd/t", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(SpecificEnergyUnit.KilowattDayPerTonne, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = SpecificEnergy.ParseUnit("kWh/kg", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(SpecificEnergyUnit.KilowattHourPerKilogram, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = SpecificEnergy.ParseUnit("kWh/lbs", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(SpecificEnergyUnit.KilowattHourPerPound, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = SpecificEnergy.ParseUnit("MJ/kg", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(SpecificEnergyUnit.MegajoulePerKilogram, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = SpecificEnergy.ParseUnit("MWd/kg", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(SpecificEnergyUnit.MegawattDayPerKilogram, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = SpecificEnergy.ParseUnit("MWd/ST", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(SpecificEnergyUnit.MegawattDayPerShortTon, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = SpecificEnergy.ParseUnit("MWd/t", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(SpecificEnergyUnit.MegawattDayPerTonne, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = SpecificEnergy.ParseUnit("MWh/kg", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(SpecificEnergyUnit.MegawattHourPerKilogram, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = SpecificEnergy.ParseUnit("MWh/lbs", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(SpecificEnergyUnit.MegawattHourPerPound, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = SpecificEnergy.ParseUnit("TWd/kg", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(SpecificEnergyUnit.TerawattDayPerKilogram, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = SpecificEnergy.ParseUnit("TWd/ST", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(SpecificEnergyUnit.TerawattDayPerShortTon, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = SpecificEnergy.ParseUnit("TWd/t", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(SpecificEnergyUnit.TerawattDayPerTonne, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = SpecificEnergy.ParseUnit("Wd/kg", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(SpecificEnergyUnit.WattDayPerKilogram, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = SpecificEnergy.ParseUnit("Wd/ST", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(SpecificEnergyUnit.WattDayPerShortTon, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = SpecificEnergy.ParseUnit("Wd/t", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(SpecificEnergyUnit.WattDayPerTonne, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = SpecificEnergy.ParseUnit("Wh/kg", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(SpecificEnergyUnit.WattHourPerKilogram, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = SpecificEnergy.ParseUnit("Wh/lbs", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(SpecificEnergyUnit.WattHourPerPound, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParseUnit()
        {
            {
                Assert.True(SpecificEnergy.TryParseUnit("btu/lb", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(SpecificEnergyUnit.BtuPerPound, parsedUnit);
            }

            {
                Assert.True(SpecificEnergy.TryParseUnit("cal/g", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(SpecificEnergyUnit.CaloriePerGram, parsedUnit);
            }

            {
                Assert.True(SpecificEnergy.TryParseUnit("GWd/kg", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(SpecificEnergyUnit.GigawattDayPerKilogram, parsedUnit);
            }

            {
                Assert.True(SpecificEnergy.TryParseUnit("GWd/ST", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(SpecificEnergyUnit.GigawattDayPerShortTon, parsedUnit);
            }

            {
                Assert.True(SpecificEnergy.TryParseUnit("GWd/t", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(SpecificEnergyUnit.GigawattDayPerTonne, parsedUnit);
            }

            {
                Assert.True(SpecificEnergy.TryParseUnit("GWh/kg", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(SpecificEnergyUnit.GigawattHourPerKilogram, parsedUnit);
            }

            {
                Assert.True(SpecificEnergy.TryParseUnit("GWh/lbs", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(SpecificEnergyUnit.GigawattHourPerPound, parsedUnit);
            }

            {
                Assert.True(SpecificEnergy.TryParseUnit("J/kg", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(SpecificEnergyUnit.JoulePerKilogram, parsedUnit);
            }

            {
                Assert.True(SpecificEnergy.TryParseUnit("kcal/g", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(SpecificEnergyUnit.KilocaloriePerGram, parsedUnit);
            }

            {
                Assert.True(SpecificEnergy.TryParseUnit("kJ/kg", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(SpecificEnergyUnit.KilojoulePerKilogram, parsedUnit);
            }

            {
                Assert.True(SpecificEnergy.TryParseUnit("kWd/kg", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(SpecificEnergyUnit.KilowattDayPerKilogram, parsedUnit);
            }

            {
                Assert.True(SpecificEnergy.TryParseUnit("kWd/ST", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(SpecificEnergyUnit.KilowattDayPerShortTon, parsedUnit);
            }

            {
                Assert.True(SpecificEnergy.TryParseUnit("kWd/t", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(SpecificEnergyUnit.KilowattDayPerTonne, parsedUnit);
            }

            {
                Assert.True(SpecificEnergy.TryParseUnit("kWh/kg", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(SpecificEnergyUnit.KilowattHourPerKilogram, parsedUnit);
            }

            {
                Assert.True(SpecificEnergy.TryParseUnit("kWh/lbs", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(SpecificEnergyUnit.KilowattHourPerPound, parsedUnit);
            }

            {
                Assert.True(SpecificEnergy.TryParseUnit("MJ/kg", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(SpecificEnergyUnit.MegajoulePerKilogram, parsedUnit);
            }

            {
                Assert.True(SpecificEnergy.TryParseUnit("MWd/kg", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(SpecificEnergyUnit.MegawattDayPerKilogram, parsedUnit);
            }

            {
                Assert.True(SpecificEnergy.TryParseUnit("MWd/ST", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(SpecificEnergyUnit.MegawattDayPerShortTon, parsedUnit);
            }

            {
                Assert.True(SpecificEnergy.TryParseUnit("MWd/t", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(SpecificEnergyUnit.MegawattDayPerTonne, parsedUnit);
            }

            {
                Assert.True(SpecificEnergy.TryParseUnit("MWh/kg", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(SpecificEnergyUnit.MegawattHourPerKilogram, parsedUnit);
            }

            {
                Assert.True(SpecificEnergy.TryParseUnit("MWh/lbs", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(SpecificEnergyUnit.MegawattHourPerPound, parsedUnit);
            }

            {
                Assert.True(SpecificEnergy.TryParseUnit("TWd/kg", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(SpecificEnergyUnit.TerawattDayPerKilogram, parsedUnit);
            }

            {
                Assert.True(SpecificEnergy.TryParseUnit("TWd/ST", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(SpecificEnergyUnit.TerawattDayPerShortTon, parsedUnit);
            }

            {
                Assert.True(SpecificEnergy.TryParseUnit("TWd/t", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(SpecificEnergyUnit.TerawattDayPerTonne, parsedUnit);
            }

            {
                Assert.True(SpecificEnergy.TryParseUnit("Wd/kg", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(SpecificEnergyUnit.WattDayPerKilogram, parsedUnit);
            }

            {
                Assert.True(SpecificEnergy.TryParseUnit("Wd/ST", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(SpecificEnergyUnit.WattDayPerShortTon, parsedUnit);
            }

            {
                Assert.True(SpecificEnergy.TryParseUnit("Wd/t", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(SpecificEnergyUnit.WattDayPerTonne, parsedUnit);
            }

            {
                Assert.True(SpecificEnergy.TryParseUnit("Wh/kg", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(SpecificEnergyUnit.WattHourPerKilogram, parsedUnit);
            }

            {
                Assert.True(SpecificEnergy.TryParseUnit("Wh/lbs", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(SpecificEnergyUnit.WattHourPerPound, parsedUnit);
            }

        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(SpecificEnergyUnit unit)
        {
            var inBaseUnits = SpecificEnergy.From(1.0, SpecificEnergy.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, (double)converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(SpecificEnergyUnit unit)
        {
            var quantity = SpecificEnergy.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(SpecificEnergyUnit unit)
        {
            // See if there is a unit available that is not the base unit.
            var fromUnit = SpecificEnergy.Units.FirstOrDefault(u => u != SpecificEnergy.BaseUnit && u != SpecificEnergyUnit.Undefined);

            // If there is only one unit for the quantity, we must use the base unit.
            if (fromUnit == SpecificEnergyUnit.Undefined)
                fromUnit = SpecificEnergy.BaseUnit;

            var quantity = SpecificEnergy.From(3.0, fromUnit);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            SpecificEnergy jouleperkilogram = SpecificEnergy.FromJoulesPerKilogram(1);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromBtuPerPound(jouleperkilogram.BtuPerPound).JoulesPerKilogram, BtuPerPoundTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromCaloriesPerGram(jouleperkilogram.CaloriesPerGram).JoulesPerKilogram, CaloriesPerGramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromGigawattDaysPerKilogram(jouleperkilogram.GigawattDaysPerKilogram).JoulesPerKilogram, GigawattDaysPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromGigawattDaysPerShortTon(jouleperkilogram.GigawattDaysPerShortTon).JoulesPerKilogram, GigawattDaysPerShortTonTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromGigawattDaysPerTonne(jouleperkilogram.GigawattDaysPerTonne).JoulesPerKilogram, GigawattDaysPerTonneTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromGigawattHoursPerKilogram(jouleperkilogram.GigawattHoursPerKilogram).JoulesPerKilogram, GigawattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromGigawattHoursPerPound(jouleperkilogram.GigawattHoursPerPound).JoulesPerKilogram, GigawattHoursPerPoundTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromJoulesPerKilogram(jouleperkilogram.JoulesPerKilogram).JoulesPerKilogram, JoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromKilocaloriesPerGram(jouleperkilogram.KilocaloriesPerGram).JoulesPerKilogram, KilocaloriesPerGramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromKilojoulesPerKilogram(jouleperkilogram.KilojoulesPerKilogram).JoulesPerKilogram, KilojoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromKilowattDaysPerKilogram(jouleperkilogram.KilowattDaysPerKilogram).JoulesPerKilogram, KilowattDaysPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromKilowattDaysPerShortTon(jouleperkilogram.KilowattDaysPerShortTon).JoulesPerKilogram, KilowattDaysPerShortTonTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromKilowattDaysPerTonne(jouleperkilogram.KilowattDaysPerTonne).JoulesPerKilogram, KilowattDaysPerTonneTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromKilowattHoursPerKilogram(jouleperkilogram.KilowattHoursPerKilogram).JoulesPerKilogram, KilowattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromKilowattHoursPerPound(jouleperkilogram.KilowattHoursPerPound).JoulesPerKilogram, KilowattHoursPerPoundTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromMegajoulesPerKilogram(jouleperkilogram.MegajoulesPerKilogram).JoulesPerKilogram, MegajoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromMegawattDaysPerKilogram(jouleperkilogram.MegawattDaysPerKilogram).JoulesPerKilogram, MegawattDaysPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromMegawattDaysPerShortTon(jouleperkilogram.MegawattDaysPerShortTon).JoulesPerKilogram, MegawattDaysPerShortTonTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromMegawattDaysPerTonne(jouleperkilogram.MegawattDaysPerTonne).JoulesPerKilogram, MegawattDaysPerTonneTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromMegawattHoursPerKilogram(jouleperkilogram.MegawattHoursPerKilogram).JoulesPerKilogram, MegawattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromMegawattHoursPerPound(jouleperkilogram.MegawattHoursPerPound).JoulesPerKilogram, MegawattHoursPerPoundTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromTerawattDaysPerKilogram(jouleperkilogram.TerawattDaysPerKilogram).JoulesPerKilogram, TerawattDaysPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromTerawattDaysPerShortTon(jouleperkilogram.TerawattDaysPerShortTon).JoulesPerKilogram, TerawattDaysPerShortTonTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromTerawattDaysPerTonne(jouleperkilogram.TerawattDaysPerTonne).JoulesPerKilogram, TerawattDaysPerTonneTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromWattDaysPerKilogram(jouleperkilogram.WattDaysPerKilogram).JoulesPerKilogram, WattDaysPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromWattDaysPerShortTon(jouleperkilogram.WattDaysPerShortTon).JoulesPerKilogram, WattDaysPerShortTonTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromWattDaysPerTonne(jouleperkilogram.WattDaysPerTonne).JoulesPerKilogram, WattDaysPerTonneTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromWattHoursPerKilogram(jouleperkilogram.WattHoursPerKilogram).JoulesPerKilogram, WattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromWattHoursPerPound(jouleperkilogram.WattHoursPerPound).JoulesPerKilogram, WattHoursPerPoundTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            SpecificEnergy v = SpecificEnergy.FromJoulesPerKilogram(1);
            AssertEx.EqualTolerance(-1, -v.JoulesPerKilogram, JoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(2, (SpecificEnergy.FromJoulesPerKilogram(3)-v).JoulesPerKilogram, JoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(2, (v + v).JoulesPerKilogram, JoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(10, (v*10).JoulesPerKilogram, JoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(10, (10*v).JoulesPerKilogram, JoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(2, (SpecificEnergy.FromJoulesPerKilogram(10)/5).JoulesPerKilogram, JoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(2, SpecificEnergy.FromJoulesPerKilogram(10)/SpecificEnergy.FromJoulesPerKilogram(5), JoulesPerKilogramTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            SpecificEnergy oneJoulePerKilogram = SpecificEnergy.FromJoulesPerKilogram(1);
            SpecificEnergy twoJoulesPerKilogram = SpecificEnergy.FromJoulesPerKilogram(2);

            Assert.True(oneJoulePerKilogram < twoJoulesPerKilogram);
            Assert.True(oneJoulePerKilogram <= twoJoulesPerKilogram);
            Assert.True(twoJoulesPerKilogram > oneJoulePerKilogram);
            Assert.True(twoJoulesPerKilogram >= oneJoulePerKilogram);

            Assert.False(oneJoulePerKilogram > twoJoulesPerKilogram);
            Assert.False(oneJoulePerKilogram >= twoJoulesPerKilogram);
            Assert.False(twoJoulesPerKilogram < oneJoulePerKilogram);
            Assert.False(twoJoulesPerKilogram <= oneJoulePerKilogram);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            SpecificEnergy jouleperkilogram = SpecificEnergy.FromJoulesPerKilogram(1);
            Assert.Equal(0, jouleperkilogram.CompareTo(jouleperkilogram));
            Assert.True(jouleperkilogram.CompareTo(SpecificEnergy.Zero) > 0);
            Assert.True(SpecificEnergy.Zero.CompareTo(jouleperkilogram) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            SpecificEnergy jouleperkilogram = SpecificEnergy.FromJoulesPerKilogram(1);
            Assert.Throws<ArgumentException>(() => jouleperkilogram.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            SpecificEnergy jouleperkilogram = SpecificEnergy.FromJoulesPerKilogram(1);
            Assert.Throws<ArgumentNullException>(() => jouleperkilogram.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = SpecificEnergy.FromJoulesPerKilogram(1);
            var b = SpecificEnergy.FromJoulesPerKilogram(2);

#pragma warning disable CS8073
// ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
#pragma warning restore CS8073
        }

        [Fact]
        public void Equals_SameType_IsImplemented()
        {
            var a = SpecificEnergy.FromJoulesPerKilogram(1);
            var b = SpecificEnergy.FromJoulesPerKilogram(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
        }

        [Fact]
        public void Equals_QuantityAsObject_IsImplemented()
        {
            object a = SpecificEnergy.FromJoulesPerKilogram(1);
            object b = SpecificEnergy.FromJoulesPerKilogram(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals((object)null));
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = SpecificEnergy.FromJoulesPerKilogram(1);
            Assert.True(v.Equals(SpecificEnergy.FromJoulesPerKilogram(1), JoulesPerKilogramTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(SpecificEnergy.Zero, JoulesPerKilogramTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = SpecificEnergy.FromJoulesPerKilogram(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(SpecificEnergy.FromJoulesPerKilogram(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            SpecificEnergy jouleperkilogram = SpecificEnergy.FromJoulesPerKilogram(1);
            Assert.False(jouleperkilogram.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            SpecificEnergy jouleperkilogram = SpecificEnergy.FromJoulesPerKilogram(1);
            Assert.False(jouleperkilogram.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(SpecificEnergyUnit.Undefined, SpecificEnergy.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(SpecificEnergyUnit)).Cast<SpecificEnergyUnit>();
            foreach(var unit in units)
            {
                if (unit == SpecificEnergyUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(SpecificEnergy.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentUICulture;
            Thread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 btu/lb", new SpecificEnergy(1, SpecificEnergyUnit.BtuPerPound).ToString());
                Assert.Equal("1 cal/g", new SpecificEnergy(1, SpecificEnergyUnit.CaloriePerGram).ToString());
                Assert.Equal("1 GWd/kg", new SpecificEnergy(1, SpecificEnergyUnit.GigawattDayPerKilogram).ToString());
                Assert.Equal("1 GWd/ST", new SpecificEnergy(1, SpecificEnergyUnit.GigawattDayPerShortTon).ToString());
                Assert.Equal("1 GWd/t", new SpecificEnergy(1, SpecificEnergyUnit.GigawattDayPerTonne).ToString());
                Assert.Equal("1 GWh/kg", new SpecificEnergy(1, SpecificEnergyUnit.GigawattHourPerKilogram).ToString());
                Assert.Equal("1 GWh/lbs", new SpecificEnergy(1, SpecificEnergyUnit.GigawattHourPerPound).ToString());
                Assert.Equal("1 J/kg", new SpecificEnergy(1, SpecificEnergyUnit.JoulePerKilogram).ToString());
                Assert.Equal("1 kcal/g", new SpecificEnergy(1, SpecificEnergyUnit.KilocaloriePerGram).ToString());
                Assert.Equal("1 kJ/kg", new SpecificEnergy(1, SpecificEnergyUnit.KilojoulePerKilogram).ToString());
                Assert.Equal("1 kWd/kg", new SpecificEnergy(1, SpecificEnergyUnit.KilowattDayPerKilogram).ToString());
                Assert.Equal("1 kWd/ST", new SpecificEnergy(1, SpecificEnergyUnit.KilowattDayPerShortTon).ToString());
                Assert.Equal("1 kWd/t", new SpecificEnergy(1, SpecificEnergyUnit.KilowattDayPerTonne).ToString());
                Assert.Equal("1 kWh/kg", new SpecificEnergy(1, SpecificEnergyUnit.KilowattHourPerKilogram).ToString());
                Assert.Equal("1 kWh/lbs", new SpecificEnergy(1, SpecificEnergyUnit.KilowattHourPerPound).ToString());
                Assert.Equal("1 MJ/kg", new SpecificEnergy(1, SpecificEnergyUnit.MegajoulePerKilogram).ToString());
                Assert.Equal("1 MWd/kg", new SpecificEnergy(1, SpecificEnergyUnit.MegawattDayPerKilogram).ToString());
                Assert.Equal("1 MWd/ST", new SpecificEnergy(1, SpecificEnergyUnit.MegawattDayPerShortTon).ToString());
                Assert.Equal("1 MWd/t", new SpecificEnergy(1, SpecificEnergyUnit.MegawattDayPerTonne).ToString());
                Assert.Equal("1 MWh/kg", new SpecificEnergy(1, SpecificEnergyUnit.MegawattHourPerKilogram).ToString());
                Assert.Equal("1 MWh/lbs", new SpecificEnergy(1, SpecificEnergyUnit.MegawattHourPerPound).ToString());
                Assert.Equal("1 TWd/kg", new SpecificEnergy(1, SpecificEnergyUnit.TerawattDayPerKilogram).ToString());
                Assert.Equal("1 TWd/ST", new SpecificEnergy(1, SpecificEnergyUnit.TerawattDayPerShortTon).ToString());
                Assert.Equal("1 TWd/t", new SpecificEnergy(1, SpecificEnergyUnit.TerawattDayPerTonne).ToString());
                Assert.Equal("1 Wd/kg", new SpecificEnergy(1, SpecificEnergyUnit.WattDayPerKilogram).ToString());
                Assert.Equal("1 Wd/ST", new SpecificEnergy(1, SpecificEnergyUnit.WattDayPerShortTon).ToString());
                Assert.Equal("1 Wd/t", new SpecificEnergy(1, SpecificEnergyUnit.WattDayPerTonne).ToString());
                Assert.Equal("1 Wh/kg", new SpecificEnergy(1, SpecificEnergyUnit.WattHourPerKilogram).ToString());
                Assert.Equal("1 Wh/lbs", new SpecificEnergy(1, SpecificEnergyUnit.WattHourPerPound).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentUICulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 btu/lb", new SpecificEnergy(1, SpecificEnergyUnit.BtuPerPound).ToString(swedishCulture));
            Assert.Equal("1 cal/g", new SpecificEnergy(1, SpecificEnergyUnit.CaloriePerGram).ToString(swedishCulture));
            Assert.Equal("1 GWd/kg", new SpecificEnergy(1, SpecificEnergyUnit.GigawattDayPerKilogram).ToString(swedishCulture));
            Assert.Equal("1 GWd/ST", new SpecificEnergy(1, SpecificEnergyUnit.GigawattDayPerShortTon).ToString(swedishCulture));
            Assert.Equal("1 GWd/t", new SpecificEnergy(1, SpecificEnergyUnit.GigawattDayPerTonne).ToString(swedishCulture));
            Assert.Equal("1 GWh/kg", new SpecificEnergy(1, SpecificEnergyUnit.GigawattHourPerKilogram).ToString(swedishCulture));
            Assert.Equal("1 GWh/lbs", new SpecificEnergy(1, SpecificEnergyUnit.GigawattHourPerPound).ToString(swedishCulture));
            Assert.Equal("1 J/kg", new SpecificEnergy(1, SpecificEnergyUnit.JoulePerKilogram).ToString(swedishCulture));
            Assert.Equal("1 kcal/g", new SpecificEnergy(1, SpecificEnergyUnit.KilocaloriePerGram).ToString(swedishCulture));
            Assert.Equal("1 kJ/kg", new SpecificEnergy(1, SpecificEnergyUnit.KilojoulePerKilogram).ToString(swedishCulture));
            Assert.Equal("1 kWd/kg", new SpecificEnergy(1, SpecificEnergyUnit.KilowattDayPerKilogram).ToString(swedishCulture));
            Assert.Equal("1 kWd/ST", new SpecificEnergy(1, SpecificEnergyUnit.KilowattDayPerShortTon).ToString(swedishCulture));
            Assert.Equal("1 kWd/t", new SpecificEnergy(1, SpecificEnergyUnit.KilowattDayPerTonne).ToString(swedishCulture));
            Assert.Equal("1 kWh/kg", new SpecificEnergy(1, SpecificEnergyUnit.KilowattHourPerKilogram).ToString(swedishCulture));
            Assert.Equal("1 kWh/lbs", new SpecificEnergy(1, SpecificEnergyUnit.KilowattHourPerPound).ToString(swedishCulture));
            Assert.Equal("1 MJ/kg", new SpecificEnergy(1, SpecificEnergyUnit.MegajoulePerKilogram).ToString(swedishCulture));
            Assert.Equal("1 MWd/kg", new SpecificEnergy(1, SpecificEnergyUnit.MegawattDayPerKilogram).ToString(swedishCulture));
            Assert.Equal("1 MWd/ST", new SpecificEnergy(1, SpecificEnergyUnit.MegawattDayPerShortTon).ToString(swedishCulture));
            Assert.Equal("1 MWd/t", new SpecificEnergy(1, SpecificEnergyUnit.MegawattDayPerTonne).ToString(swedishCulture));
            Assert.Equal("1 MWh/kg", new SpecificEnergy(1, SpecificEnergyUnit.MegawattHourPerKilogram).ToString(swedishCulture));
            Assert.Equal("1 MWh/lbs", new SpecificEnergy(1, SpecificEnergyUnit.MegawattHourPerPound).ToString(swedishCulture));
            Assert.Equal("1 TWd/kg", new SpecificEnergy(1, SpecificEnergyUnit.TerawattDayPerKilogram).ToString(swedishCulture));
            Assert.Equal("1 TWd/ST", new SpecificEnergy(1, SpecificEnergyUnit.TerawattDayPerShortTon).ToString(swedishCulture));
            Assert.Equal("1 TWd/t", new SpecificEnergy(1, SpecificEnergyUnit.TerawattDayPerTonne).ToString(swedishCulture));
            Assert.Equal("1 Wd/kg", new SpecificEnergy(1, SpecificEnergyUnit.WattDayPerKilogram).ToString(swedishCulture));
            Assert.Equal("1 Wd/ST", new SpecificEnergy(1, SpecificEnergyUnit.WattDayPerShortTon).ToString(swedishCulture));
            Assert.Equal("1 Wd/t", new SpecificEnergy(1, SpecificEnergyUnit.WattDayPerTonne).ToString(swedishCulture));
            Assert.Equal("1 Wh/kg", new SpecificEnergy(1, SpecificEnergyUnit.WattHourPerKilogram).ToString(swedishCulture));
            Assert.Equal("1 Wh/lbs", new SpecificEnergy(1, SpecificEnergyUnit.WattHourPerPound).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentUICulture;
            try
            {
                CultureInfo.CurrentUICulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 J/kg", new SpecificEnergy(0.123456, SpecificEnergyUnit.JoulePerKilogram).ToString("s1"));
                Assert.Equal("0.12 J/kg", new SpecificEnergy(0.123456, SpecificEnergyUnit.JoulePerKilogram).ToString("s2"));
                Assert.Equal("0.123 J/kg", new SpecificEnergy(0.123456, SpecificEnergyUnit.JoulePerKilogram).ToString("s3"));
                Assert.Equal("0.1235 J/kg", new SpecificEnergy(0.123456, SpecificEnergyUnit.JoulePerKilogram).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentUICulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 J/kg", new SpecificEnergy(0.123456, SpecificEnergyUnit.JoulePerKilogram).ToString("s1", culture));
            Assert.Equal("0.12 J/kg", new SpecificEnergy(0.123456, SpecificEnergyUnit.JoulePerKilogram).ToString("s2", culture));
            Assert.Equal("0.123 J/kg", new SpecificEnergy(0.123456, SpecificEnergyUnit.JoulePerKilogram).ToString("s3", culture));
            Assert.Equal("0.1235 J/kg", new SpecificEnergy(0.123456, SpecificEnergyUnit.JoulePerKilogram).ToString("s4", culture));
        }


        [Fact]
        public void ToString_NullFormat_ThrowsArgumentNullException()
        {
            var quantity = SpecificEnergy.FromJoulesPerKilogram(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, null, null));
        }

        [Fact]
        public void ToString_NullArgs_ThrowsArgumentNullException()
        {
            var quantity = SpecificEnergy.FromJoulesPerKilogram(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, "g", null));
        }

        [Fact]
        public void ToString_NullProvider_EqualsCurrentUICulture()
        {
            var quantity = SpecificEnergy.FromJoulesPerKilogram(1.0);
            Assert.Equal(quantity.ToString(CultureInfo.CurrentUICulture, "g"), quantity.ToString(null, "g"));
        }


        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = SpecificEnergy.FromJoulesPerKilogram(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = SpecificEnergy.FromJoulesPerKilogram(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = SpecificEnergy.FromJoulesPerKilogram(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = SpecificEnergy.FromJoulesPerKilogram(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = SpecificEnergy.FromJoulesPerKilogram(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = SpecificEnergy.FromJoulesPerKilogram(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = SpecificEnergy.FromJoulesPerKilogram(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = SpecificEnergy.FromJoulesPerKilogram(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = SpecificEnergy.FromJoulesPerKilogram(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = SpecificEnergy.FromJoulesPerKilogram(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = SpecificEnergy.FromJoulesPerKilogram(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = SpecificEnergy.FromJoulesPerKilogram(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = SpecificEnergy.FromJoulesPerKilogram(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = SpecificEnergy.FromJoulesPerKilogram(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = SpecificEnergy.FromJoulesPerKilogram(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = SpecificEnergy.FromJoulesPerKilogram(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(SpecificEnergy)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = SpecificEnergy.FromJoulesPerKilogram(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(SpecificEnergyUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityType_EqualsQuantityType()
        {
            var quantity = SpecificEnergy.FromJoulesPerKilogram(1.0);
            Assert.Equal(QuantityType.SpecificEnergy, Convert.ChangeType(quantity, typeof(QuantityType)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = SpecificEnergy.FromJoulesPerKilogram(1.0);
            Assert.Equal(SpecificEnergy.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = SpecificEnergy.FromJoulesPerKilogram(1.0);
            Assert.Equal(SpecificEnergy.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = SpecificEnergy.FromJoulesPerKilogram(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = SpecificEnergy.FromJoulesPerKilogram(1.0);
            Assert.Equal(new {SpecificEnergy.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = SpecificEnergy.FromJoulesPerKilogram(value);
            Assert.Equal(SpecificEnergy.FromJoulesPerKilogram(-value), -quantity);
        }
    }
}
