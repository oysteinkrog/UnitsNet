//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of TorquePerLength.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class TorquePerLengthTestsBase : QuantityTestsBase
    {
        protected abstract double KilogramForceCentimetersPerMeterInOneNewtonMeterPerMeter { get; }
        protected abstract double KilogramForceMetersPerMeterInOneNewtonMeterPerMeter { get; }
        protected abstract double KilogramForceMillimetersPerMeterInOneNewtonMeterPerMeter { get; }
        protected abstract double KilonewtonCentimetersPerMeterInOneNewtonMeterPerMeter { get; }
        protected abstract double KilonewtonMetersPerMeterInOneNewtonMeterPerMeter { get; }
        protected abstract double KilonewtonMillimetersPerMeterInOneNewtonMeterPerMeter { get; }
        protected abstract double KilopoundForceFeetPerFootInOneNewtonMeterPerMeter { get; }
        protected abstract double KilopoundForceInchesPerFootInOneNewtonMeterPerMeter { get; }
        protected abstract double MeganewtonCentimetersPerMeterInOneNewtonMeterPerMeter { get; }
        protected abstract double MeganewtonMetersPerMeterInOneNewtonMeterPerMeter { get; }
        protected abstract double MeganewtonMillimetersPerMeterInOneNewtonMeterPerMeter { get; }
        protected abstract double MegapoundForceFeetPerFootInOneNewtonMeterPerMeter { get; }
        protected abstract double MegapoundForceInchesPerFootInOneNewtonMeterPerMeter { get; }
        protected abstract double NewtonCentimetersPerMeterInOneNewtonMeterPerMeter { get; }
        protected abstract double NewtonMetersPerMeterInOneNewtonMeterPerMeter { get; }
        protected abstract double NewtonMillimetersPerMeterInOneNewtonMeterPerMeter { get; }
        protected abstract double PoundForceFeetPerFootInOneNewtonMeterPerMeter { get; }
        protected abstract double PoundForceInchesPerFootInOneNewtonMeterPerMeter { get; }
        protected abstract double TonneForceCentimetersPerMeterInOneNewtonMeterPerMeter { get; }
        protected abstract double TonneForceMetersPerMeterInOneNewtonMeterPerMeter { get; }
        protected abstract double TonneForceMillimetersPerMeterInOneNewtonMeterPerMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double KilogramForceCentimetersPerMeterTolerance { get { return 1e-5; } }
        protected virtual double KilogramForceMetersPerMeterTolerance { get { return 1e-5; } }
        protected virtual double KilogramForceMillimetersPerMeterTolerance { get { return 1e-5; } }
        protected virtual double KilonewtonCentimetersPerMeterTolerance { get { return 1e-5; } }
        protected virtual double KilonewtonMetersPerMeterTolerance { get { return 1e-5; } }
        protected virtual double KilonewtonMillimetersPerMeterTolerance { get { return 1e-5; } }
        protected virtual double KilopoundForceFeetPerFootTolerance { get { return 1e-5; } }
        protected virtual double KilopoundForceInchesPerFootTolerance { get { return 1e-5; } }
        protected virtual double MeganewtonCentimetersPerMeterTolerance { get { return 1e-5; } }
        protected virtual double MeganewtonMetersPerMeterTolerance { get { return 1e-5; } }
        protected virtual double MeganewtonMillimetersPerMeterTolerance { get { return 1e-5; } }
        protected virtual double MegapoundForceFeetPerFootTolerance { get { return 1e-5; } }
        protected virtual double MegapoundForceInchesPerFootTolerance { get { return 1e-5; } }
        protected virtual double NewtonCentimetersPerMeterTolerance { get { return 1e-5; } }
        protected virtual double NewtonMetersPerMeterTolerance { get { return 1e-5; } }
        protected virtual double NewtonMillimetersPerMeterTolerance { get { return 1e-5; } }
        protected virtual double PoundForceFeetPerFootTolerance { get { return 1e-5; } }
        protected virtual double PoundForceInchesPerFootTolerance { get { return 1e-5; } }
        protected virtual double TonneForceCentimetersPerMeterTolerance { get { return 1e-5; } }
        protected virtual double TonneForceMetersPerMeterTolerance { get { return 1e-5; } }
        protected virtual double TonneForceMillimetersPerMeterTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(TorquePerLengthUnit unit)
        {
            return unit switch
            {
                TorquePerLengthUnit.KilogramForceCentimeterPerMeter => (KilogramForceCentimetersPerMeterInOneNewtonMeterPerMeter, KilogramForceCentimetersPerMeterTolerance),
                TorquePerLengthUnit.KilogramForceMeterPerMeter => (KilogramForceMetersPerMeterInOneNewtonMeterPerMeter, KilogramForceMetersPerMeterTolerance),
                TorquePerLengthUnit.KilogramForceMillimeterPerMeter => (KilogramForceMillimetersPerMeterInOneNewtonMeterPerMeter, KilogramForceMillimetersPerMeterTolerance),
                TorquePerLengthUnit.KilonewtonCentimeterPerMeter => (KilonewtonCentimetersPerMeterInOneNewtonMeterPerMeter, KilonewtonCentimetersPerMeterTolerance),
                TorquePerLengthUnit.KilonewtonMeterPerMeter => (KilonewtonMetersPerMeterInOneNewtonMeterPerMeter, KilonewtonMetersPerMeterTolerance),
                TorquePerLengthUnit.KilonewtonMillimeterPerMeter => (KilonewtonMillimetersPerMeterInOneNewtonMeterPerMeter, KilonewtonMillimetersPerMeterTolerance),
                TorquePerLengthUnit.KilopoundForceFootPerFoot => (KilopoundForceFeetPerFootInOneNewtonMeterPerMeter, KilopoundForceFeetPerFootTolerance),
                TorquePerLengthUnit.KilopoundForceInchPerFoot => (KilopoundForceInchesPerFootInOneNewtonMeterPerMeter, KilopoundForceInchesPerFootTolerance),
                TorquePerLengthUnit.MeganewtonCentimeterPerMeter => (MeganewtonCentimetersPerMeterInOneNewtonMeterPerMeter, MeganewtonCentimetersPerMeterTolerance),
                TorquePerLengthUnit.MeganewtonMeterPerMeter => (MeganewtonMetersPerMeterInOneNewtonMeterPerMeter, MeganewtonMetersPerMeterTolerance),
                TorquePerLengthUnit.MeganewtonMillimeterPerMeter => (MeganewtonMillimetersPerMeterInOneNewtonMeterPerMeter, MeganewtonMillimetersPerMeterTolerance),
                TorquePerLengthUnit.MegapoundForceFootPerFoot => (MegapoundForceFeetPerFootInOneNewtonMeterPerMeter, MegapoundForceFeetPerFootTolerance),
                TorquePerLengthUnit.MegapoundForceInchPerFoot => (MegapoundForceInchesPerFootInOneNewtonMeterPerMeter, MegapoundForceInchesPerFootTolerance),
                TorquePerLengthUnit.NewtonCentimeterPerMeter => (NewtonCentimetersPerMeterInOneNewtonMeterPerMeter, NewtonCentimetersPerMeterTolerance),
                TorquePerLengthUnit.NewtonMeterPerMeter => (NewtonMetersPerMeterInOneNewtonMeterPerMeter, NewtonMetersPerMeterTolerance),
                TorquePerLengthUnit.NewtonMillimeterPerMeter => (NewtonMillimetersPerMeterInOneNewtonMeterPerMeter, NewtonMillimetersPerMeterTolerance),
                TorquePerLengthUnit.PoundForceFootPerFoot => (PoundForceFeetPerFootInOneNewtonMeterPerMeter, PoundForceFeetPerFootTolerance),
                TorquePerLengthUnit.PoundForceInchPerFoot => (PoundForceInchesPerFootInOneNewtonMeterPerMeter, PoundForceInchesPerFootTolerance),
                TorquePerLengthUnit.TonneForceCentimeterPerMeter => (TonneForceCentimetersPerMeterInOneNewtonMeterPerMeter, TonneForceCentimetersPerMeterTolerance),
                TorquePerLengthUnit.TonneForceMeterPerMeter => (TonneForceMetersPerMeterInOneNewtonMeterPerMeter, TonneForceMetersPerMeterTolerance),
                TorquePerLengthUnit.TonneForceMillimeterPerMeter => (TonneForceMillimetersPerMeterInOneNewtonMeterPerMeter, TonneForceMillimetersPerMeterTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { TorquePerLengthUnit.KilogramForceCentimeterPerMeter },
            new object[] { TorquePerLengthUnit.KilogramForceMeterPerMeter },
            new object[] { TorquePerLengthUnit.KilogramForceMillimeterPerMeter },
            new object[] { TorquePerLengthUnit.KilonewtonCentimeterPerMeter },
            new object[] { TorquePerLengthUnit.KilonewtonMeterPerMeter },
            new object[] { TorquePerLengthUnit.KilonewtonMillimeterPerMeter },
            new object[] { TorquePerLengthUnit.KilopoundForceFootPerFoot },
            new object[] { TorquePerLengthUnit.KilopoundForceInchPerFoot },
            new object[] { TorquePerLengthUnit.MeganewtonCentimeterPerMeter },
            new object[] { TorquePerLengthUnit.MeganewtonMeterPerMeter },
            new object[] { TorquePerLengthUnit.MeganewtonMillimeterPerMeter },
            new object[] { TorquePerLengthUnit.MegapoundForceFootPerFoot },
            new object[] { TorquePerLengthUnit.MegapoundForceInchPerFoot },
            new object[] { TorquePerLengthUnit.NewtonCentimeterPerMeter },
            new object[] { TorquePerLengthUnit.NewtonMeterPerMeter },
            new object[] { TorquePerLengthUnit.NewtonMillimeterPerMeter },
            new object[] { TorquePerLengthUnit.PoundForceFootPerFoot },
            new object[] { TorquePerLengthUnit.PoundForceInchPerFoot },
            new object[] { TorquePerLengthUnit.TonneForceCentimeterPerMeter },
            new object[] { TorquePerLengthUnit.TonneForceMeterPerMeter },
            new object[] { TorquePerLengthUnit.TonneForceMillimeterPerMeter },
        };

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new TorquePerLength((double)0.0, TorquePerLengthUnit.Undefined));
        }

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new TorquePerLength();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(TorquePerLengthUnit.NewtonMeterPerMeter, quantity.Unit);
        }


        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new TorquePerLength(double.PositiveInfinity, TorquePerLengthUnit.NewtonMeterPerMeter));
            Assert.Throws<ArgumentException>(() => new TorquePerLength(double.NegativeInfinity, TorquePerLengthUnit.NewtonMeterPerMeter));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new TorquePerLength(double.NaN, TorquePerLengthUnit.NewtonMeterPerMeter));
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new TorquePerLength(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            Func<object> TestCode = () => new TorquePerLength(value: 1, unitSystem: UnitSystem.SI);
            if (SupportsSIUnitSystem)
            {
                var quantity = (TorquePerLength) TestCode();
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(TestCode);
            }
        }

        [Fact]
        public void TorquePerLength_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new TorquePerLength(1, TorquePerLengthUnit.NewtonMeterPerMeter);

            QuantityInfo<TorquePerLengthUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(TorquePerLength.Zero, quantityInfo.Zero);
            Assert.Equal("TorquePerLength", quantityInfo.Name);
            Assert.Equal(QuantityType.TorquePerLength, quantityInfo.QuantityType);

            var units = EnumUtils.GetEnumValues<TorquePerLengthUnit>().Except(new[] {TorquePerLengthUnit.Undefined}).OrderBy(x => x.ToString()).ToArray();
            var unitNames = units.Select(x => x.ToString());

            // Obsolete members
            Assert.Equal(units, quantityInfo.Units);
            Assert.Equal(unitNames, quantityInfo.UnitNames);
        }

        [Fact]
        public void NewtonMeterPerMeterToTorquePerLengthUnits()
        {
            TorquePerLength newtonmeterpermeter = TorquePerLength.FromNewtonMetersPerMeter(1);
            AssertEx.EqualTolerance(KilogramForceCentimetersPerMeterInOneNewtonMeterPerMeter, newtonmeterpermeter.KilogramForceCentimetersPerMeter, KilogramForceCentimetersPerMeterTolerance);
            AssertEx.EqualTolerance(KilogramForceMetersPerMeterInOneNewtonMeterPerMeter, newtonmeterpermeter.KilogramForceMetersPerMeter, KilogramForceMetersPerMeterTolerance);
            AssertEx.EqualTolerance(KilogramForceMillimetersPerMeterInOneNewtonMeterPerMeter, newtonmeterpermeter.KilogramForceMillimetersPerMeter, KilogramForceMillimetersPerMeterTolerance);
            AssertEx.EqualTolerance(KilonewtonCentimetersPerMeterInOneNewtonMeterPerMeter, newtonmeterpermeter.KilonewtonCentimetersPerMeter, KilonewtonCentimetersPerMeterTolerance);
            AssertEx.EqualTolerance(KilonewtonMetersPerMeterInOneNewtonMeterPerMeter, newtonmeterpermeter.KilonewtonMetersPerMeter, KilonewtonMetersPerMeterTolerance);
            AssertEx.EqualTolerance(KilonewtonMillimetersPerMeterInOneNewtonMeterPerMeter, newtonmeterpermeter.KilonewtonMillimetersPerMeter, KilonewtonMillimetersPerMeterTolerance);
            AssertEx.EqualTolerance(KilopoundForceFeetPerFootInOneNewtonMeterPerMeter, newtonmeterpermeter.KilopoundForceFeetPerFoot, KilopoundForceFeetPerFootTolerance);
            AssertEx.EqualTolerance(KilopoundForceInchesPerFootInOneNewtonMeterPerMeter, newtonmeterpermeter.KilopoundForceInchesPerFoot, KilopoundForceInchesPerFootTolerance);
            AssertEx.EqualTolerance(MeganewtonCentimetersPerMeterInOneNewtonMeterPerMeter, newtonmeterpermeter.MeganewtonCentimetersPerMeter, MeganewtonCentimetersPerMeterTolerance);
            AssertEx.EqualTolerance(MeganewtonMetersPerMeterInOneNewtonMeterPerMeter, newtonmeterpermeter.MeganewtonMetersPerMeter, MeganewtonMetersPerMeterTolerance);
            AssertEx.EqualTolerance(MeganewtonMillimetersPerMeterInOneNewtonMeterPerMeter, newtonmeterpermeter.MeganewtonMillimetersPerMeter, MeganewtonMillimetersPerMeterTolerance);
            AssertEx.EqualTolerance(MegapoundForceFeetPerFootInOneNewtonMeterPerMeter, newtonmeterpermeter.MegapoundForceFeetPerFoot, MegapoundForceFeetPerFootTolerance);
            AssertEx.EqualTolerance(MegapoundForceInchesPerFootInOneNewtonMeterPerMeter, newtonmeterpermeter.MegapoundForceInchesPerFoot, MegapoundForceInchesPerFootTolerance);
            AssertEx.EqualTolerance(NewtonCentimetersPerMeterInOneNewtonMeterPerMeter, newtonmeterpermeter.NewtonCentimetersPerMeter, NewtonCentimetersPerMeterTolerance);
            AssertEx.EqualTolerance(NewtonMetersPerMeterInOneNewtonMeterPerMeter, newtonmeterpermeter.NewtonMetersPerMeter, NewtonMetersPerMeterTolerance);
            AssertEx.EqualTolerance(NewtonMillimetersPerMeterInOneNewtonMeterPerMeter, newtonmeterpermeter.NewtonMillimetersPerMeter, NewtonMillimetersPerMeterTolerance);
            AssertEx.EqualTolerance(PoundForceFeetPerFootInOneNewtonMeterPerMeter, newtonmeterpermeter.PoundForceFeetPerFoot, PoundForceFeetPerFootTolerance);
            AssertEx.EqualTolerance(PoundForceInchesPerFootInOneNewtonMeterPerMeter, newtonmeterpermeter.PoundForceInchesPerFoot, PoundForceInchesPerFootTolerance);
            AssertEx.EqualTolerance(TonneForceCentimetersPerMeterInOneNewtonMeterPerMeter, newtonmeterpermeter.TonneForceCentimetersPerMeter, TonneForceCentimetersPerMeterTolerance);
            AssertEx.EqualTolerance(TonneForceMetersPerMeterInOneNewtonMeterPerMeter, newtonmeterpermeter.TonneForceMetersPerMeter, TonneForceMetersPerMeterTolerance);
            AssertEx.EqualTolerance(TonneForceMillimetersPerMeterInOneNewtonMeterPerMeter, newtonmeterpermeter.TonneForceMillimetersPerMeter, TonneForceMillimetersPerMeterTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = TorquePerLength.From(1, TorquePerLengthUnit.KilogramForceCentimeterPerMeter);
            AssertEx.EqualTolerance(1, quantity00.KilogramForceCentimetersPerMeter, KilogramForceCentimetersPerMeterTolerance);
            Assert.Equal(TorquePerLengthUnit.KilogramForceCentimeterPerMeter, quantity00.Unit);

            var quantity01 = TorquePerLength.From(1, TorquePerLengthUnit.KilogramForceMeterPerMeter);
            AssertEx.EqualTolerance(1, quantity01.KilogramForceMetersPerMeter, KilogramForceMetersPerMeterTolerance);
            Assert.Equal(TorquePerLengthUnit.KilogramForceMeterPerMeter, quantity01.Unit);

            var quantity02 = TorquePerLength.From(1, TorquePerLengthUnit.KilogramForceMillimeterPerMeter);
            AssertEx.EqualTolerance(1, quantity02.KilogramForceMillimetersPerMeter, KilogramForceMillimetersPerMeterTolerance);
            Assert.Equal(TorquePerLengthUnit.KilogramForceMillimeterPerMeter, quantity02.Unit);

            var quantity03 = TorquePerLength.From(1, TorquePerLengthUnit.KilonewtonCentimeterPerMeter);
            AssertEx.EqualTolerance(1, quantity03.KilonewtonCentimetersPerMeter, KilonewtonCentimetersPerMeterTolerance);
            Assert.Equal(TorquePerLengthUnit.KilonewtonCentimeterPerMeter, quantity03.Unit);

            var quantity04 = TorquePerLength.From(1, TorquePerLengthUnit.KilonewtonMeterPerMeter);
            AssertEx.EqualTolerance(1, quantity04.KilonewtonMetersPerMeter, KilonewtonMetersPerMeterTolerance);
            Assert.Equal(TorquePerLengthUnit.KilonewtonMeterPerMeter, quantity04.Unit);

            var quantity05 = TorquePerLength.From(1, TorquePerLengthUnit.KilonewtonMillimeterPerMeter);
            AssertEx.EqualTolerance(1, quantity05.KilonewtonMillimetersPerMeter, KilonewtonMillimetersPerMeterTolerance);
            Assert.Equal(TorquePerLengthUnit.KilonewtonMillimeterPerMeter, quantity05.Unit);

            var quantity06 = TorquePerLength.From(1, TorquePerLengthUnit.KilopoundForceFootPerFoot);
            AssertEx.EqualTolerance(1, quantity06.KilopoundForceFeetPerFoot, KilopoundForceFeetPerFootTolerance);
            Assert.Equal(TorquePerLengthUnit.KilopoundForceFootPerFoot, quantity06.Unit);

            var quantity07 = TorquePerLength.From(1, TorquePerLengthUnit.KilopoundForceInchPerFoot);
            AssertEx.EqualTolerance(1, quantity07.KilopoundForceInchesPerFoot, KilopoundForceInchesPerFootTolerance);
            Assert.Equal(TorquePerLengthUnit.KilopoundForceInchPerFoot, quantity07.Unit);

            var quantity08 = TorquePerLength.From(1, TorquePerLengthUnit.MeganewtonCentimeterPerMeter);
            AssertEx.EqualTolerance(1, quantity08.MeganewtonCentimetersPerMeter, MeganewtonCentimetersPerMeterTolerance);
            Assert.Equal(TorquePerLengthUnit.MeganewtonCentimeterPerMeter, quantity08.Unit);

            var quantity09 = TorquePerLength.From(1, TorquePerLengthUnit.MeganewtonMeterPerMeter);
            AssertEx.EqualTolerance(1, quantity09.MeganewtonMetersPerMeter, MeganewtonMetersPerMeterTolerance);
            Assert.Equal(TorquePerLengthUnit.MeganewtonMeterPerMeter, quantity09.Unit);

            var quantity10 = TorquePerLength.From(1, TorquePerLengthUnit.MeganewtonMillimeterPerMeter);
            AssertEx.EqualTolerance(1, quantity10.MeganewtonMillimetersPerMeter, MeganewtonMillimetersPerMeterTolerance);
            Assert.Equal(TorquePerLengthUnit.MeganewtonMillimeterPerMeter, quantity10.Unit);

            var quantity11 = TorquePerLength.From(1, TorquePerLengthUnit.MegapoundForceFootPerFoot);
            AssertEx.EqualTolerance(1, quantity11.MegapoundForceFeetPerFoot, MegapoundForceFeetPerFootTolerance);
            Assert.Equal(TorquePerLengthUnit.MegapoundForceFootPerFoot, quantity11.Unit);

            var quantity12 = TorquePerLength.From(1, TorquePerLengthUnit.MegapoundForceInchPerFoot);
            AssertEx.EqualTolerance(1, quantity12.MegapoundForceInchesPerFoot, MegapoundForceInchesPerFootTolerance);
            Assert.Equal(TorquePerLengthUnit.MegapoundForceInchPerFoot, quantity12.Unit);

            var quantity13 = TorquePerLength.From(1, TorquePerLengthUnit.NewtonCentimeterPerMeter);
            AssertEx.EqualTolerance(1, quantity13.NewtonCentimetersPerMeter, NewtonCentimetersPerMeterTolerance);
            Assert.Equal(TorquePerLengthUnit.NewtonCentimeterPerMeter, quantity13.Unit);

            var quantity14 = TorquePerLength.From(1, TorquePerLengthUnit.NewtonMeterPerMeter);
            AssertEx.EqualTolerance(1, quantity14.NewtonMetersPerMeter, NewtonMetersPerMeterTolerance);
            Assert.Equal(TorquePerLengthUnit.NewtonMeterPerMeter, quantity14.Unit);

            var quantity15 = TorquePerLength.From(1, TorquePerLengthUnit.NewtonMillimeterPerMeter);
            AssertEx.EqualTolerance(1, quantity15.NewtonMillimetersPerMeter, NewtonMillimetersPerMeterTolerance);
            Assert.Equal(TorquePerLengthUnit.NewtonMillimeterPerMeter, quantity15.Unit);

            var quantity16 = TorquePerLength.From(1, TorquePerLengthUnit.PoundForceFootPerFoot);
            AssertEx.EqualTolerance(1, quantity16.PoundForceFeetPerFoot, PoundForceFeetPerFootTolerance);
            Assert.Equal(TorquePerLengthUnit.PoundForceFootPerFoot, quantity16.Unit);

            var quantity17 = TorquePerLength.From(1, TorquePerLengthUnit.PoundForceInchPerFoot);
            AssertEx.EqualTolerance(1, quantity17.PoundForceInchesPerFoot, PoundForceInchesPerFootTolerance);
            Assert.Equal(TorquePerLengthUnit.PoundForceInchPerFoot, quantity17.Unit);

            var quantity18 = TorquePerLength.From(1, TorquePerLengthUnit.TonneForceCentimeterPerMeter);
            AssertEx.EqualTolerance(1, quantity18.TonneForceCentimetersPerMeter, TonneForceCentimetersPerMeterTolerance);
            Assert.Equal(TorquePerLengthUnit.TonneForceCentimeterPerMeter, quantity18.Unit);

            var quantity19 = TorquePerLength.From(1, TorquePerLengthUnit.TonneForceMeterPerMeter);
            AssertEx.EqualTolerance(1, quantity19.TonneForceMetersPerMeter, TonneForceMetersPerMeterTolerance);
            Assert.Equal(TorquePerLengthUnit.TonneForceMeterPerMeter, quantity19.Unit);

            var quantity20 = TorquePerLength.From(1, TorquePerLengthUnit.TonneForceMillimeterPerMeter);
            AssertEx.EqualTolerance(1, quantity20.TonneForceMillimetersPerMeter, TonneForceMillimetersPerMeterTolerance);
            Assert.Equal(TorquePerLengthUnit.TonneForceMillimeterPerMeter, quantity20.Unit);

        }

        [Fact]
        public void FromNewtonMetersPerMeter_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => TorquePerLength.FromNewtonMetersPerMeter(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => TorquePerLength.FromNewtonMetersPerMeter(double.NegativeInfinity));
        }

        [Fact]
        public void FromNewtonMetersPerMeter_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => TorquePerLength.FromNewtonMetersPerMeter(double.NaN));
        }

        [Fact]
        public void As()
        {
            var newtonmeterpermeter = TorquePerLength.FromNewtonMetersPerMeter(1);
            AssertEx.EqualTolerance(KilogramForceCentimetersPerMeterInOneNewtonMeterPerMeter, newtonmeterpermeter.As(TorquePerLengthUnit.KilogramForceCentimeterPerMeter), KilogramForceCentimetersPerMeterTolerance);
            AssertEx.EqualTolerance(KilogramForceMetersPerMeterInOneNewtonMeterPerMeter, newtonmeterpermeter.As(TorquePerLengthUnit.KilogramForceMeterPerMeter), KilogramForceMetersPerMeterTolerance);
            AssertEx.EqualTolerance(KilogramForceMillimetersPerMeterInOneNewtonMeterPerMeter, newtonmeterpermeter.As(TorquePerLengthUnit.KilogramForceMillimeterPerMeter), KilogramForceMillimetersPerMeterTolerance);
            AssertEx.EqualTolerance(KilonewtonCentimetersPerMeterInOneNewtonMeterPerMeter, newtonmeterpermeter.As(TorquePerLengthUnit.KilonewtonCentimeterPerMeter), KilonewtonCentimetersPerMeterTolerance);
            AssertEx.EqualTolerance(KilonewtonMetersPerMeterInOneNewtonMeterPerMeter, newtonmeterpermeter.As(TorquePerLengthUnit.KilonewtonMeterPerMeter), KilonewtonMetersPerMeterTolerance);
            AssertEx.EqualTolerance(KilonewtonMillimetersPerMeterInOneNewtonMeterPerMeter, newtonmeterpermeter.As(TorquePerLengthUnit.KilonewtonMillimeterPerMeter), KilonewtonMillimetersPerMeterTolerance);
            AssertEx.EqualTolerance(KilopoundForceFeetPerFootInOneNewtonMeterPerMeter, newtonmeterpermeter.As(TorquePerLengthUnit.KilopoundForceFootPerFoot), KilopoundForceFeetPerFootTolerance);
            AssertEx.EqualTolerance(KilopoundForceInchesPerFootInOneNewtonMeterPerMeter, newtonmeterpermeter.As(TorquePerLengthUnit.KilopoundForceInchPerFoot), KilopoundForceInchesPerFootTolerance);
            AssertEx.EqualTolerance(MeganewtonCentimetersPerMeterInOneNewtonMeterPerMeter, newtonmeterpermeter.As(TorquePerLengthUnit.MeganewtonCentimeterPerMeter), MeganewtonCentimetersPerMeterTolerance);
            AssertEx.EqualTolerance(MeganewtonMetersPerMeterInOneNewtonMeterPerMeter, newtonmeterpermeter.As(TorquePerLengthUnit.MeganewtonMeterPerMeter), MeganewtonMetersPerMeterTolerance);
            AssertEx.EqualTolerance(MeganewtonMillimetersPerMeterInOneNewtonMeterPerMeter, newtonmeterpermeter.As(TorquePerLengthUnit.MeganewtonMillimeterPerMeter), MeganewtonMillimetersPerMeterTolerance);
            AssertEx.EqualTolerance(MegapoundForceFeetPerFootInOneNewtonMeterPerMeter, newtonmeterpermeter.As(TorquePerLengthUnit.MegapoundForceFootPerFoot), MegapoundForceFeetPerFootTolerance);
            AssertEx.EqualTolerance(MegapoundForceInchesPerFootInOneNewtonMeterPerMeter, newtonmeterpermeter.As(TorquePerLengthUnit.MegapoundForceInchPerFoot), MegapoundForceInchesPerFootTolerance);
            AssertEx.EqualTolerance(NewtonCentimetersPerMeterInOneNewtonMeterPerMeter, newtonmeterpermeter.As(TorquePerLengthUnit.NewtonCentimeterPerMeter), NewtonCentimetersPerMeterTolerance);
            AssertEx.EqualTolerance(NewtonMetersPerMeterInOneNewtonMeterPerMeter, newtonmeterpermeter.As(TorquePerLengthUnit.NewtonMeterPerMeter), NewtonMetersPerMeterTolerance);
            AssertEx.EqualTolerance(NewtonMillimetersPerMeterInOneNewtonMeterPerMeter, newtonmeterpermeter.As(TorquePerLengthUnit.NewtonMillimeterPerMeter), NewtonMillimetersPerMeterTolerance);
            AssertEx.EqualTolerance(PoundForceFeetPerFootInOneNewtonMeterPerMeter, newtonmeterpermeter.As(TorquePerLengthUnit.PoundForceFootPerFoot), PoundForceFeetPerFootTolerance);
            AssertEx.EqualTolerance(PoundForceInchesPerFootInOneNewtonMeterPerMeter, newtonmeterpermeter.As(TorquePerLengthUnit.PoundForceInchPerFoot), PoundForceInchesPerFootTolerance);
            AssertEx.EqualTolerance(TonneForceCentimetersPerMeterInOneNewtonMeterPerMeter, newtonmeterpermeter.As(TorquePerLengthUnit.TonneForceCentimeterPerMeter), TonneForceCentimetersPerMeterTolerance);
            AssertEx.EqualTolerance(TonneForceMetersPerMeterInOneNewtonMeterPerMeter, newtonmeterpermeter.As(TorquePerLengthUnit.TonneForceMeterPerMeter), TonneForceMetersPerMeterTolerance);
            AssertEx.EqualTolerance(TonneForceMillimetersPerMeterInOneNewtonMeterPerMeter, newtonmeterpermeter.As(TorquePerLengthUnit.TonneForceMillimeterPerMeter), TonneForceMillimetersPerMeterTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new TorquePerLength(value: 1, unit: TorquePerLength.BaseUnit);
            Func<object> AsWithSIUnitSystem = () => quantity.As(UnitSystem.SI);

            if (SupportsSIUnitSystem)
            {
                var value = (double) AsWithSIUnitSystem();
                Assert.Equal(1, value);
            }
            else
            {
                Assert.Throws<ArgumentException>(AsWithSIUnitSystem);
            }
        }

        [Fact]
        public void Parse()
        {
            try
            {
                var parsed = TorquePerLength.Parse("1 kgf·cm/m", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilogramForceCentimetersPerMeter, KilogramForceCentimetersPerMeterTolerance);
                Assert.Equal(TorquePerLengthUnit.KilogramForceCentimeterPerMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = TorquePerLength.Parse("1 kgf·m/m", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilogramForceMetersPerMeter, KilogramForceMetersPerMeterTolerance);
                Assert.Equal(TorquePerLengthUnit.KilogramForceMeterPerMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = TorquePerLength.Parse("1 kgf·mm/m", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilogramForceMillimetersPerMeter, KilogramForceMillimetersPerMeterTolerance);
                Assert.Equal(TorquePerLengthUnit.KilogramForceMillimeterPerMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = TorquePerLength.Parse("1 kN·cm/m", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilonewtonCentimetersPerMeter, KilonewtonCentimetersPerMeterTolerance);
                Assert.Equal(TorquePerLengthUnit.KilonewtonCentimeterPerMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = TorquePerLength.Parse("1 kN·m/m", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilonewtonMetersPerMeter, KilonewtonMetersPerMeterTolerance);
                Assert.Equal(TorquePerLengthUnit.KilonewtonMeterPerMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = TorquePerLength.Parse("1 кН·м/м", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.KilonewtonMetersPerMeter, KilonewtonMetersPerMeterTolerance);
                Assert.Equal(TorquePerLengthUnit.KilonewtonMeterPerMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = TorquePerLength.Parse("1 kN·mm/m", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilonewtonMillimetersPerMeter, KilonewtonMillimetersPerMeterTolerance);
                Assert.Equal(TorquePerLengthUnit.KilonewtonMillimeterPerMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = TorquePerLength.Parse("1 kipf·ft/ft", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilopoundForceFeetPerFoot, KilopoundForceFeetPerFootTolerance);
                Assert.Equal(TorquePerLengthUnit.KilopoundForceFootPerFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = TorquePerLength.Parse("1 kipf·in/ft", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilopoundForceInchesPerFoot, KilopoundForceInchesPerFootTolerance);
                Assert.Equal(TorquePerLengthUnit.KilopoundForceInchPerFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = TorquePerLength.Parse("1 MN·cm/m", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MeganewtonCentimetersPerMeter, MeganewtonCentimetersPerMeterTolerance);
                Assert.Equal(TorquePerLengthUnit.MeganewtonCentimeterPerMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = TorquePerLength.Parse("1 MN·m/m", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MeganewtonMetersPerMeter, MeganewtonMetersPerMeterTolerance);
                Assert.Equal(TorquePerLengthUnit.MeganewtonMeterPerMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = TorquePerLength.Parse("1 МН·м/м", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.MeganewtonMetersPerMeter, MeganewtonMetersPerMeterTolerance);
                Assert.Equal(TorquePerLengthUnit.MeganewtonMeterPerMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = TorquePerLength.Parse("1 MN·mm/m", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MeganewtonMillimetersPerMeter, MeganewtonMillimetersPerMeterTolerance);
                Assert.Equal(TorquePerLengthUnit.MeganewtonMillimeterPerMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = TorquePerLength.Parse("1 Mlbf·ft/ft", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MegapoundForceFeetPerFoot, MegapoundForceFeetPerFootTolerance);
                Assert.Equal(TorquePerLengthUnit.MegapoundForceFootPerFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = TorquePerLength.Parse("1 Mlbf·in/ft", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MegapoundForceInchesPerFoot, MegapoundForceInchesPerFootTolerance);
                Assert.Equal(TorquePerLengthUnit.MegapoundForceInchPerFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = TorquePerLength.Parse("1 N·cm/m", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.NewtonCentimetersPerMeter, NewtonCentimetersPerMeterTolerance);
                Assert.Equal(TorquePerLengthUnit.NewtonCentimeterPerMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = TorquePerLength.Parse("1 N·m/m", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.NewtonMetersPerMeter, NewtonMetersPerMeterTolerance);
                Assert.Equal(TorquePerLengthUnit.NewtonMeterPerMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = TorquePerLength.Parse("1 Н·м/м", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.NewtonMetersPerMeter, NewtonMetersPerMeterTolerance);
                Assert.Equal(TorquePerLengthUnit.NewtonMeterPerMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = TorquePerLength.Parse("1 N·mm/m", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.NewtonMillimetersPerMeter, NewtonMillimetersPerMeterTolerance);
                Assert.Equal(TorquePerLengthUnit.NewtonMillimeterPerMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = TorquePerLength.Parse("1 lbf·ft/ft", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PoundForceFeetPerFoot, PoundForceFeetPerFootTolerance);
                Assert.Equal(TorquePerLengthUnit.PoundForceFootPerFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = TorquePerLength.Parse("1 lbf·in/ft", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PoundForceInchesPerFoot, PoundForceInchesPerFootTolerance);
                Assert.Equal(TorquePerLengthUnit.PoundForceInchPerFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = TorquePerLength.Parse("1 tf·cm/m", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.TonneForceCentimetersPerMeter, TonneForceCentimetersPerMeterTolerance);
                Assert.Equal(TorquePerLengthUnit.TonneForceCentimeterPerMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = TorquePerLength.Parse("1 tf·m/m", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.TonneForceMetersPerMeter, TonneForceMetersPerMeterTolerance);
                Assert.Equal(TorquePerLengthUnit.TonneForceMeterPerMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = TorquePerLength.Parse("1 tf·mm/m", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.TonneForceMillimetersPerMeter, TonneForceMillimetersPerMeterTolerance);
                Assert.Equal(TorquePerLengthUnit.TonneForceMillimeterPerMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParse()
        {
            {
                Assert.True(TorquePerLength.TryParse("1 kgf·cm/m", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilogramForceCentimetersPerMeter, KilogramForceCentimetersPerMeterTolerance);
                Assert.Equal(TorquePerLengthUnit.KilogramForceCentimeterPerMeter, parsed.Unit);
            }

            {
                Assert.True(TorquePerLength.TryParse("1 kgf·m/m", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilogramForceMetersPerMeter, KilogramForceMetersPerMeterTolerance);
                Assert.Equal(TorquePerLengthUnit.KilogramForceMeterPerMeter, parsed.Unit);
            }

            {
                Assert.True(TorquePerLength.TryParse("1 kgf·mm/m", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilogramForceMillimetersPerMeter, KilogramForceMillimetersPerMeterTolerance);
                Assert.Equal(TorquePerLengthUnit.KilogramForceMillimeterPerMeter, parsed.Unit);
            }

            {
                Assert.True(TorquePerLength.TryParse("1 kN·cm/m", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilonewtonCentimetersPerMeter, KilonewtonCentimetersPerMeterTolerance);
                Assert.Equal(TorquePerLengthUnit.KilonewtonCentimeterPerMeter, parsed.Unit);
            }

            {
                Assert.True(TorquePerLength.TryParse("1 kN·m/m", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilonewtonMetersPerMeter, KilonewtonMetersPerMeterTolerance);
                Assert.Equal(TorquePerLengthUnit.KilonewtonMeterPerMeter, parsed.Unit);
            }

            {
                Assert.True(TorquePerLength.TryParse("1 кН·м/м", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilonewtonMetersPerMeter, KilonewtonMetersPerMeterTolerance);
                Assert.Equal(TorquePerLengthUnit.KilonewtonMeterPerMeter, parsed.Unit);
            }

            {
                Assert.True(TorquePerLength.TryParse("1 kN·mm/m", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilonewtonMillimetersPerMeter, KilonewtonMillimetersPerMeterTolerance);
                Assert.Equal(TorquePerLengthUnit.KilonewtonMillimeterPerMeter, parsed.Unit);
            }

            {
                Assert.True(TorquePerLength.TryParse("1 kipf·ft/ft", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilopoundForceFeetPerFoot, KilopoundForceFeetPerFootTolerance);
                Assert.Equal(TorquePerLengthUnit.KilopoundForceFootPerFoot, parsed.Unit);
            }

            {
                Assert.True(TorquePerLength.TryParse("1 kipf·in/ft", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilopoundForceInchesPerFoot, KilopoundForceInchesPerFootTolerance);
                Assert.Equal(TorquePerLengthUnit.KilopoundForceInchPerFoot, parsed.Unit);
            }

            {
                Assert.True(TorquePerLength.TryParse("1 MN·cm/m", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MeganewtonCentimetersPerMeter, MeganewtonCentimetersPerMeterTolerance);
                Assert.Equal(TorquePerLengthUnit.MeganewtonCentimeterPerMeter, parsed.Unit);
            }

            {
                Assert.True(TorquePerLength.TryParse("1 MN·m/m", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MeganewtonMetersPerMeter, MeganewtonMetersPerMeterTolerance);
                Assert.Equal(TorquePerLengthUnit.MeganewtonMeterPerMeter, parsed.Unit);
            }

            {
                Assert.True(TorquePerLength.TryParse("1 МН·м/м", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MeganewtonMetersPerMeter, MeganewtonMetersPerMeterTolerance);
                Assert.Equal(TorquePerLengthUnit.MeganewtonMeterPerMeter, parsed.Unit);
            }

            {
                Assert.True(TorquePerLength.TryParse("1 MN·mm/m", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MeganewtonMillimetersPerMeter, MeganewtonMillimetersPerMeterTolerance);
                Assert.Equal(TorquePerLengthUnit.MeganewtonMillimeterPerMeter, parsed.Unit);
            }

            {
                Assert.True(TorquePerLength.TryParse("1 Mlbf·ft/ft", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MegapoundForceFeetPerFoot, MegapoundForceFeetPerFootTolerance);
                Assert.Equal(TorquePerLengthUnit.MegapoundForceFootPerFoot, parsed.Unit);
            }

            {
                Assert.True(TorquePerLength.TryParse("1 Mlbf·in/ft", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MegapoundForceInchesPerFoot, MegapoundForceInchesPerFootTolerance);
                Assert.Equal(TorquePerLengthUnit.MegapoundForceInchPerFoot, parsed.Unit);
            }

            {
                Assert.True(TorquePerLength.TryParse("1 N·cm/m", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.NewtonCentimetersPerMeter, NewtonCentimetersPerMeterTolerance);
                Assert.Equal(TorquePerLengthUnit.NewtonCentimeterPerMeter, parsed.Unit);
            }

            {
                Assert.True(TorquePerLength.TryParse("1 N·m/m", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.NewtonMetersPerMeter, NewtonMetersPerMeterTolerance);
                Assert.Equal(TorquePerLengthUnit.NewtonMeterPerMeter, parsed.Unit);
            }

            {
                Assert.True(TorquePerLength.TryParse("1 Н·м/м", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.NewtonMetersPerMeter, NewtonMetersPerMeterTolerance);
                Assert.Equal(TorquePerLengthUnit.NewtonMeterPerMeter, parsed.Unit);
            }

            {
                Assert.True(TorquePerLength.TryParse("1 N·mm/m", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.NewtonMillimetersPerMeter, NewtonMillimetersPerMeterTolerance);
                Assert.Equal(TorquePerLengthUnit.NewtonMillimeterPerMeter, parsed.Unit);
            }

            {
                Assert.True(TorquePerLength.TryParse("1 lbf·ft/ft", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PoundForceFeetPerFoot, PoundForceFeetPerFootTolerance);
                Assert.Equal(TorquePerLengthUnit.PoundForceFootPerFoot, parsed.Unit);
            }

            {
                Assert.True(TorquePerLength.TryParse("1 lbf·in/ft", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PoundForceInchesPerFoot, PoundForceInchesPerFootTolerance);
                Assert.Equal(TorquePerLengthUnit.PoundForceInchPerFoot, parsed.Unit);
            }

            {
                Assert.True(TorquePerLength.TryParse("1 tf·cm/m", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.TonneForceCentimetersPerMeter, TonneForceCentimetersPerMeterTolerance);
                Assert.Equal(TorquePerLengthUnit.TonneForceCentimeterPerMeter, parsed.Unit);
            }

            {
                Assert.True(TorquePerLength.TryParse("1 tf·m/m", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.TonneForceMetersPerMeter, TonneForceMetersPerMeterTolerance);
                Assert.Equal(TorquePerLengthUnit.TonneForceMeterPerMeter, parsed.Unit);
            }

            {
                Assert.True(TorquePerLength.TryParse("1 tf·mm/m", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.TonneForceMillimetersPerMeter, TonneForceMillimetersPerMeterTolerance);
                Assert.Equal(TorquePerLengthUnit.TonneForceMillimeterPerMeter, parsed.Unit);
            }

        }

        [Fact]
        public void ParseUnit()
        {
            try
            {
                var parsedUnit = TorquePerLength.ParseUnit("kgf·cm/m", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(TorquePerLengthUnit.KilogramForceCentimeterPerMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = TorquePerLength.ParseUnit("kgf·m/m", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(TorquePerLengthUnit.KilogramForceMeterPerMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = TorquePerLength.ParseUnit("kgf·mm/m", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(TorquePerLengthUnit.KilogramForceMillimeterPerMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = TorquePerLength.ParseUnit("kN·cm/m", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(TorquePerLengthUnit.KilonewtonCentimeterPerMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = TorquePerLength.ParseUnit("kN·m/m", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(TorquePerLengthUnit.KilonewtonMeterPerMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = TorquePerLength.ParseUnit("кН·м/м", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(TorquePerLengthUnit.KilonewtonMeterPerMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = TorquePerLength.ParseUnit("kN·mm/m", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(TorquePerLengthUnit.KilonewtonMillimeterPerMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = TorquePerLength.ParseUnit("kipf·ft/ft", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(TorquePerLengthUnit.KilopoundForceFootPerFoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = TorquePerLength.ParseUnit("kipf·in/ft", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(TorquePerLengthUnit.KilopoundForceInchPerFoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = TorquePerLength.ParseUnit("MN·cm/m", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(TorquePerLengthUnit.MeganewtonCentimeterPerMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = TorquePerLength.ParseUnit("MN·m/m", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(TorquePerLengthUnit.MeganewtonMeterPerMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = TorquePerLength.ParseUnit("МН·м/м", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(TorquePerLengthUnit.MeganewtonMeterPerMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = TorquePerLength.ParseUnit("MN·mm/m", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(TorquePerLengthUnit.MeganewtonMillimeterPerMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = TorquePerLength.ParseUnit("Mlbf·ft/ft", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(TorquePerLengthUnit.MegapoundForceFootPerFoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = TorquePerLength.ParseUnit("Mlbf·in/ft", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(TorquePerLengthUnit.MegapoundForceInchPerFoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = TorquePerLength.ParseUnit("N·cm/m", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(TorquePerLengthUnit.NewtonCentimeterPerMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = TorquePerLength.ParseUnit("N·m/m", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(TorquePerLengthUnit.NewtonMeterPerMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = TorquePerLength.ParseUnit("Н·м/м", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(TorquePerLengthUnit.NewtonMeterPerMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = TorquePerLength.ParseUnit("N·mm/m", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(TorquePerLengthUnit.NewtonMillimeterPerMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = TorquePerLength.ParseUnit("lbf·ft/ft", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(TorquePerLengthUnit.PoundForceFootPerFoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = TorquePerLength.ParseUnit("lbf·in/ft", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(TorquePerLengthUnit.PoundForceInchPerFoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = TorquePerLength.ParseUnit("tf·cm/m", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(TorquePerLengthUnit.TonneForceCentimeterPerMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = TorquePerLength.ParseUnit("tf·m/m", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(TorquePerLengthUnit.TonneForceMeterPerMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = TorquePerLength.ParseUnit("tf·mm/m", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(TorquePerLengthUnit.TonneForceMillimeterPerMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParseUnit()
        {
            {
                Assert.True(TorquePerLength.TryParseUnit("kgf·cm/m", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(TorquePerLengthUnit.KilogramForceCentimeterPerMeter, parsedUnit);
            }

            {
                Assert.True(TorquePerLength.TryParseUnit("kgf·m/m", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(TorquePerLengthUnit.KilogramForceMeterPerMeter, parsedUnit);
            }

            {
                Assert.True(TorquePerLength.TryParseUnit("kgf·mm/m", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(TorquePerLengthUnit.KilogramForceMillimeterPerMeter, parsedUnit);
            }

            {
                Assert.True(TorquePerLength.TryParseUnit("kN·cm/m", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(TorquePerLengthUnit.KilonewtonCentimeterPerMeter, parsedUnit);
            }

            {
                Assert.True(TorquePerLength.TryParseUnit("kN·m/m", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(TorquePerLengthUnit.KilonewtonMeterPerMeter, parsedUnit);
            }

            {
                Assert.True(TorquePerLength.TryParseUnit("кН·м/м", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(TorquePerLengthUnit.KilonewtonMeterPerMeter, parsedUnit);
            }

            {
                Assert.True(TorquePerLength.TryParseUnit("kN·mm/m", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(TorquePerLengthUnit.KilonewtonMillimeterPerMeter, parsedUnit);
            }

            {
                Assert.True(TorquePerLength.TryParseUnit("kipf·ft/ft", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(TorquePerLengthUnit.KilopoundForceFootPerFoot, parsedUnit);
            }

            {
                Assert.True(TorquePerLength.TryParseUnit("kipf·in/ft", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(TorquePerLengthUnit.KilopoundForceInchPerFoot, parsedUnit);
            }

            {
                Assert.True(TorquePerLength.TryParseUnit("MN·cm/m", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(TorquePerLengthUnit.MeganewtonCentimeterPerMeter, parsedUnit);
            }

            {
                Assert.True(TorquePerLength.TryParseUnit("MN·m/m", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(TorquePerLengthUnit.MeganewtonMeterPerMeter, parsedUnit);
            }

            {
                Assert.True(TorquePerLength.TryParseUnit("МН·м/м", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(TorquePerLengthUnit.MeganewtonMeterPerMeter, parsedUnit);
            }

            {
                Assert.True(TorquePerLength.TryParseUnit("MN·mm/m", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(TorquePerLengthUnit.MeganewtonMillimeterPerMeter, parsedUnit);
            }

            {
                Assert.True(TorquePerLength.TryParseUnit("Mlbf·ft/ft", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(TorquePerLengthUnit.MegapoundForceFootPerFoot, parsedUnit);
            }

            {
                Assert.True(TorquePerLength.TryParseUnit("Mlbf·in/ft", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(TorquePerLengthUnit.MegapoundForceInchPerFoot, parsedUnit);
            }

            {
                Assert.True(TorquePerLength.TryParseUnit("N·cm/m", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(TorquePerLengthUnit.NewtonCentimeterPerMeter, parsedUnit);
            }

            {
                Assert.True(TorquePerLength.TryParseUnit("N·m/m", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(TorquePerLengthUnit.NewtonMeterPerMeter, parsedUnit);
            }

            {
                Assert.True(TorquePerLength.TryParseUnit("Н·м/м", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(TorquePerLengthUnit.NewtonMeterPerMeter, parsedUnit);
            }

            {
                Assert.True(TorquePerLength.TryParseUnit("N·mm/m", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(TorquePerLengthUnit.NewtonMillimeterPerMeter, parsedUnit);
            }

            {
                Assert.True(TorquePerLength.TryParseUnit("lbf·ft/ft", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(TorquePerLengthUnit.PoundForceFootPerFoot, parsedUnit);
            }

            {
                Assert.True(TorquePerLength.TryParseUnit("lbf·in/ft", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(TorquePerLengthUnit.PoundForceInchPerFoot, parsedUnit);
            }

            {
                Assert.True(TorquePerLength.TryParseUnit("tf·cm/m", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(TorquePerLengthUnit.TonneForceCentimeterPerMeter, parsedUnit);
            }

            {
                Assert.True(TorquePerLength.TryParseUnit("tf·m/m", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(TorquePerLengthUnit.TonneForceMeterPerMeter, parsedUnit);
            }

            {
                Assert.True(TorquePerLength.TryParseUnit("tf·mm/m", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(TorquePerLengthUnit.TonneForceMillimeterPerMeter, parsedUnit);
            }

        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(TorquePerLengthUnit unit)
        {
            var inBaseUnits = TorquePerLength.From(1.0, TorquePerLength.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, (double)converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(TorquePerLengthUnit unit)
        {
            var quantity = TorquePerLength.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(TorquePerLengthUnit unit)
        {
            // See if there is a unit available that is not the base unit.
            var fromUnit = TorquePerLength.Units.FirstOrDefault(u => u != TorquePerLength.BaseUnit && u != TorquePerLengthUnit.Undefined);

            // If there is only one unit for the quantity, we must use the base unit.
            if (fromUnit == TorquePerLengthUnit.Undefined)
                fromUnit = TorquePerLength.BaseUnit;

            var quantity = TorquePerLength.From(3.0, fromUnit);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            TorquePerLength newtonmeterpermeter = TorquePerLength.FromNewtonMetersPerMeter(1);
            AssertEx.EqualTolerance(1, TorquePerLength.FromKilogramForceCentimetersPerMeter(newtonmeterpermeter.KilogramForceCentimetersPerMeter).NewtonMetersPerMeter, KilogramForceCentimetersPerMeterTolerance);
            AssertEx.EqualTolerance(1, TorquePerLength.FromKilogramForceMetersPerMeter(newtonmeterpermeter.KilogramForceMetersPerMeter).NewtonMetersPerMeter, KilogramForceMetersPerMeterTolerance);
            AssertEx.EqualTolerance(1, TorquePerLength.FromKilogramForceMillimetersPerMeter(newtonmeterpermeter.KilogramForceMillimetersPerMeter).NewtonMetersPerMeter, KilogramForceMillimetersPerMeterTolerance);
            AssertEx.EqualTolerance(1, TorquePerLength.FromKilonewtonCentimetersPerMeter(newtonmeterpermeter.KilonewtonCentimetersPerMeter).NewtonMetersPerMeter, KilonewtonCentimetersPerMeterTolerance);
            AssertEx.EqualTolerance(1, TorquePerLength.FromKilonewtonMetersPerMeter(newtonmeterpermeter.KilonewtonMetersPerMeter).NewtonMetersPerMeter, KilonewtonMetersPerMeterTolerance);
            AssertEx.EqualTolerance(1, TorquePerLength.FromKilonewtonMillimetersPerMeter(newtonmeterpermeter.KilonewtonMillimetersPerMeter).NewtonMetersPerMeter, KilonewtonMillimetersPerMeterTolerance);
            AssertEx.EqualTolerance(1, TorquePerLength.FromKilopoundForceFeetPerFoot(newtonmeterpermeter.KilopoundForceFeetPerFoot).NewtonMetersPerMeter, KilopoundForceFeetPerFootTolerance);
            AssertEx.EqualTolerance(1, TorquePerLength.FromKilopoundForceInchesPerFoot(newtonmeterpermeter.KilopoundForceInchesPerFoot).NewtonMetersPerMeter, KilopoundForceInchesPerFootTolerance);
            AssertEx.EqualTolerance(1, TorquePerLength.FromMeganewtonCentimetersPerMeter(newtonmeterpermeter.MeganewtonCentimetersPerMeter).NewtonMetersPerMeter, MeganewtonCentimetersPerMeterTolerance);
            AssertEx.EqualTolerance(1, TorquePerLength.FromMeganewtonMetersPerMeter(newtonmeterpermeter.MeganewtonMetersPerMeter).NewtonMetersPerMeter, MeganewtonMetersPerMeterTolerance);
            AssertEx.EqualTolerance(1, TorquePerLength.FromMeganewtonMillimetersPerMeter(newtonmeterpermeter.MeganewtonMillimetersPerMeter).NewtonMetersPerMeter, MeganewtonMillimetersPerMeterTolerance);
            AssertEx.EqualTolerance(1, TorquePerLength.FromMegapoundForceFeetPerFoot(newtonmeterpermeter.MegapoundForceFeetPerFoot).NewtonMetersPerMeter, MegapoundForceFeetPerFootTolerance);
            AssertEx.EqualTolerance(1, TorquePerLength.FromMegapoundForceInchesPerFoot(newtonmeterpermeter.MegapoundForceInchesPerFoot).NewtonMetersPerMeter, MegapoundForceInchesPerFootTolerance);
            AssertEx.EqualTolerance(1, TorquePerLength.FromNewtonCentimetersPerMeter(newtonmeterpermeter.NewtonCentimetersPerMeter).NewtonMetersPerMeter, NewtonCentimetersPerMeterTolerance);
            AssertEx.EqualTolerance(1, TorquePerLength.FromNewtonMetersPerMeter(newtonmeterpermeter.NewtonMetersPerMeter).NewtonMetersPerMeter, NewtonMetersPerMeterTolerance);
            AssertEx.EqualTolerance(1, TorquePerLength.FromNewtonMillimetersPerMeter(newtonmeterpermeter.NewtonMillimetersPerMeter).NewtonMetersPerMeter, NewtonMillimetersPerMeterTolerance);
            AssertEx.EqualTolerance(1, TorquePerLength.FromPoundForceFeetPerFoot(newtonmeterpermeter.PoundForceFeetPerFoot).NewtonMetersPerMeter, PoundForceFeetPerFootTolerance);
            AssertEx.EqualTolerance(1, TorquePerLength.FromPoundForceInchesPerFoot(newtonmeterpermeter.PoundForceInchesPerFoot).NewtonMetersPerMeter, PoundForceInchesPerFootTolerance);
            AssertEx.EqualTolerance(1, TorquePerLength.FromTonneForceCentimetersPerMeter(newtonmeterpermeter.TonneForceCentimetersPerMeter).NewtonMetersPerMeter, TonneForceCentimetersPerMeterTolerance);
            AssertEx.EqualTolerance(1, TorquePerLength.FromTonneForceMetersPerMeter(newtonmeterpermeter.TonneForceMetersPerMeter).NewtonMetersPerMeter, TonneForceMetersPerMeterTolerance);
            AssertEx.EqualTolerance(1, TorquePerLength.FromTonneForceMillimetersPerMeter(newtonmeterpermeter.TonneForceMillimetersPerMeter).NewtonMetersPerMeter, TonneForceMillimetersPerMeterTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            TorquePerLength v = TorquePerLength.FromNewtonMetersPerMeter(1);
            AssertEx.EqualTolerance(-1, -v.NewtonMetersPerMeter, NewtonMetersPerMeterTolerance);
            AssertEx.EqualTolerance(2, (TorquePerLength.FromNewtonMetersPerMeter(3)-v).NewtonMetersPerMeter, NewtonMetersPerMeterTolerance);
            AssertEx.EqualTolerance(2, (v + v).NewtonMetersPerMeter, NewtonMetersPerMeterTolerance);
            AssertEx.EqualTolerance(10, (v*10).NewtonMetersPerMeter, NewtonMetersPerMeterTolerance);
            AssertEx.EqualTolerance(10, (10*v).NewtonMetersPerMeter, NewtonMetersPerMeterTolerance);
            AssertEx.EqualTolerance(2, (TorquePerLength.FromNewtonMetersPerMeter(10)/5).NewtonMetersPerMeter, NewtonMetersPerMeterTolerance);
            AssertEx.EqualTolerance(2, TorquePerLength.FromNewtonMetersPerMeter(10)/TorquePerLength.FromNewtonMetersPerMeter(5), NewtonMetersPerMeterTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            TorquePerLength oneNewtonMeterPerMeter = TorquePerLength.FromNewtonMetersPerMeter(1);
            TorquePerLength twoNewtonMetersPerMeter = TorquePerLength.FromNewtonMetersPerMeter(2);

            Assert.True(oneNewtonMeterPerMeter < twoNewtonMetersPerMeter);
            Assert.True(oneNewtonMeterPerMeter <= twoNewtonMetersPerMeter);
            Assert.True(twoNewtonMetersPerMeter > oneNewtonMeterPerMeter);
            Assert.True(twoNewtonMetersPerMeter >= oneNewtonMeterPerMeter);

            Assert.False(oneNewtonMeterPerMeter > twoNewtonMetersPerMeter);
            Assert.False(oneNewtonMeterPerMeter >= twoNewtonMetersPerMeter);
            Assert.False(twoNewtonMetersPerMeter < oneNewtonMeterPerMeter);
            Assert.False(twoNewtonMetersPerMeter <= oneNewtonMeterPerMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            TorquePerLength newtonmeterpermeter = TorquePerLength.FromNewtonMetersPerMeter(1);
            Assert.Equal(0, newtonmeterpermeter.CompareTo(newtonmeterpermeter));
            Assert.True(newtonmeterpermeter.CompareTo(TorquePerLength.Zero) > 0);
            Assert.True(TorquePerLength.Zero.CompareTo(newtonmeterpermeter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            TorquePerLength newtonmeterpermeter = TorquePerLength.FromNewtonMetersPerMeter(1);
            Assert.Throws<ArgumentException>(() => newtonmeterpermeter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            TorquePerLength newtonmeterpermeter = TorquePerLength.FromNewtonMetersPerMeter(1);
            Assert.Throws<ArgumentNullException>(() => newtonmeterpermeter.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = TorquePerLength.FromNewtonMetersPerMeter(1);
            var b = TorquePerLength.FromNewtonMetersPerMeter(2);

#pragma warning disable CS8073
// ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
#pragma warning restore CS8073
        }

        [Fact]
        public void Equals_SameType_IsImplemented()
        {
            var a = TorquePerLength.FromNewtonMetersPerMeter(1);
            var b = TorquePerLength.FromNewtonMetersPerMeter(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
        }

        [Fact]
        public void Equals_QuantityAsObject_IsImplemented()
        {
            object a = TorquePerLength.FromNewtonMetersPerMeter(1);
            object b = TorquePerLength.FromNewtonMetersPerMeter(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals((object)null));
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = TorquePerLength.FromNewtonMetersPerMeter(1);
            Assert.True(v.Equals(TorquePerLength.FromNewtonMetersPerMeter(1), NewtonMetersPerMeterTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(TorquePerLength.Zero, NewtonMetersPerMeterTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = TorquePerLength.FromNewtonMetersPerMeter(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(TorquePerLength.FromNewtonMetersPerMeter(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            TorquePerLength newtonmeterpermeter = TorquePerLength.FromNewtonMetersPerMeter(1);
            Assert.False(newtonmeterpermeter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            TorquePerLength newtonmeterpermeter = TorquePerLength.FromNewtonMetersPerMeter(1);
            Assert.False(newtonmeterpermeter.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(TorquePerLengthUnit.Undefined, TorquePerLength.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(TorquePerLengthUnit)).Cast<TorquePerLengthUnit>();
            foreach(var unit in units)
            {
                if (unit == TorquePerLengthUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(TorquePerLength.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentUICulture;
            Thread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 kgf·cm/m", new TorquePerLength(1, TorquePerLengthUnit.KilogramForceCentimeterPerMeter).ToString());
                Assert.Equal("1 kgf·m/m", new TorquePerLength(1, TorquePerLengthUnit.KilogramForceMeterPerMeter).ToString());
                Assert.Equal("1 kgf·mm/m", new TorquePerLength(1, TorquePerLengthUnit.KilogramForceMillimeterPerMeter).ToString());
                Assert.Equal("1 kN·cm/m", new TorquePerLength(1, TorquePerLengthUnit.KilonewtonCentimeterPerMeter).ToString());
                Assert.Equal("1 kN·m/m", new TorquePerLength(1, TorquePerLengthUnit.KilonewtonMeterPerMeter).ToString());
                Assert.Equal("1 kN·mm/m", new TorquePerLength(1, TorquePerLengthUnit.KilonewtonMillimeterPerMeter).ToString());
                Assert.Equal("1 kipf·ft/ft", new TorquePerLength(1, TorquePerLengthUnit.KilopoundForceFootPerFoot).ToString());
                Assert.Equal("1 kipf·in/ft", new TorquePerLength(1, TorquePerLengthUnit.KilopoundForceInchPerFoot).ToString());
                Assert.Equal("1 MN·cm/m", new TorquePerLength(1, TorquePerLengthUnit.MeganewtonCentimeterPerMeter).ToString());
                Assert.Equal("1 MN·m/m", new TorquePerLength(1, TorquePerLengthUnit.MeganewtonMeterPerMeter).ToString());
                Assert.Equal("1 MN·mm/m", new TorquePerLength(1, TorquePerLengthUnit.MeganewtonMillimeterPerMeter).ToString());
                Assert.Equal("1 Mlbf·ft/ft", new TorquePerLength(1, TorquePerLengthUnit.MegapoundForceFootPerFoot).ToString());
                Assert.Equal("1 Mlbf·in/ft", new TorquePerLength(1, TorquePerLengthUnit.MegapoundForceInchPerFoot).ToString());
                Assert.Equal("1 N·cm/m", new TorquePerLength(1, TorquePerLengthUnit.NewtonCentimeterPerMeter).ToString());
                Assert.Equal("1 N·m/m", new TorquePerLength(1, TorquePerLengthUnit.NewtonMeterPerMeter).ToString());
                Assert.Equal("1 N·mm/m", new TorquePerLength(1, TorquePerLengthUnit.NewtonMillimeterPerMeter).ToString());
                Assert.Equal("1 lbf·ft/ft", new TorquePerLength(1, TorquePerLengthUnit.PoundForceFootPerFoot).ToString());
                Assert.Equal("1 lbf·in/ft", new TorquePerLength(1, TorquePerLengthUnit.PoundForceInchPerFoot).ToString());
                Assert.Equal("1 tf·cm/m", new TorquePerLength(1, TorquePerLengthUnit.TonneForceCentimeterPerMeter).ToString());
                Assert.Equal("1 tf·m/m", new TorquePerLength(1, TorquePerLengthUnit.TonneForceMeterPerMeter).ToString());
                Assert.Equal("1 tf·mm/m", new TorquePerLength(1, TorquePerLengthUnit.TonneForceMillimeterPerMeter).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentUICulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 kgf·cm/m", new TorquePerLength(1, TorquePerLengthUnit.KilogramForceCentimeterPerMeter).ToString(swedishCulture));
            Assert.Equal("1 kgf·m/m", new TorquePerLength(1, TorquePerLengthUnit.KilogramForceMeterPerMeter).ToString(swedishCulture));
            Assert.Equal("1 kgf·mm/m", new TorquePerLength(1, TorquePerLengthUnit.KilogramForceMillimeterPerMeter).ToString(swedishCulture));
            Assert.Equal("1 kN·cm/m", new TorquePerLength(1, TorquePerLengthUnit.KilonewtonCentimeterPerMeter).ToString(swedishCulture));
            Assert.Equal("1 kN·m/m", new TorquePerLength(1, TorquePerLengthUnit.KilonewtonMeterPerMeter).ToString(swedishCulture));
            Assert.Equal("1 kN·mm/m", new TorquePerLength(1, TorquePerLengthUnit.KilonewtonMillimeterPerMeter).ToString(swedishCulture));
            Assert.Equal("1 kipf·ft/ft", new TorquePerLength(1, TorquePerLengthUnit.KilopoundForceFootPerFoot).ToString(swedishCulture));
            Assert.Equal("1 kipf·in/ft", new TorquePerLength(1, TorquePerLengthUnit.KilopoundForceInchPerFoot).ToString(swedishCulture));
            Assert.Equal("1 MN·cm/m", new TorquePerLength(1, TorquePerLengthUnit.MeganewtonCentimeterPerMeter).ToString(swedishCulture));
            Assert.Equal("1 MN·m/m", new TorquePerLength(1, TorquePerLengthUnit.MeganewtonMeterPerMeter).ToString(swedishCulture));
            Assert.Equal("1 MN·mm/m", new TorquePerLength(1, TorquePerLengthUnit.MeganewtonMillimeterPerMeter).ToString(swedishCulture));
            Assert.Equal("1 Mlbf·ft/ft", new TorquePerLength(1, TorquePerLengthUnit.MegapoundForceFootPerFoot).ToString(swedishCulture));
            Assert.Equal("1 Mlbf·in/ft", new TorquePerLength(1, TorquePerLengthUnit.MegapoundForceInchPerFoot).ToString(swedishCulture));
            Assert.Equal("1 N·cm/m", new TorquePerLength(1, TorquePerLengthUnit.NewtonCentimeterPerMeter).ToString(swedishCulture));
            Assert.Equal("1 N·m/m", new TorquePerLength(1, TorquePerLengthUnit.NewtonMeterPerMeter).ToString(swedishCulture));
            Assert.Equal("1 N·mm/m", new TorquePerLength(1, TorquePerLengthUnit.NewtonMillimeterPerMeter).ToString(swedishCulture));
            Assert.Equal("1 lbf·ft/ft", new TorquePerLength(1, TorquePerLengthUnit.PoundForceFootPerFoot).ToString(swedishCulture));
            Assert.Equal("1 lbf·in/ft", new TorquePerLength(1, TorquePerLengthUnit.PoundForceInchPerFoot).ToString(swedishCulture));
            Assert.Equal("1 tf·cm/m", new TorquePerLength(1, TorquePerLengthUnit.TonneForceCentimeterPerMeter).ToString(swedishCulture));
            Assert.Equal("1 tf·m/m", new TorquePerLength(1, TorquePerLengthUnit.TonneForceMeterPerMeter).ToString(swedishCulture));
            Assert.Equal("1 tf·mm/m", new TorquePerLength(1, TorquePerLengthUnit.TonneForceMillimeterPerMeter).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentUICulture;
            try
            {
                CultureInfo.CurrentUICulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 N·m/m", new TorquePerLength(0.123456, TorquePerLengthUnit.NewtonMeterPerMeter).ToString("s1"));
                Assert.Equal("0.12 N·m/m", new TorquePerLength(0.123456, TorquePerLengthUnit.NewtonMeterPerMeter).ToString("s2"));
                Assert.Equal("0.123 N·m/m", new TorquePerLength(0.123456, TorquePerLengthUnit.NewtonMeterPerMeter).ToString("s3"));
                Assert.Equal("0.1235 N·m/m", new TorquePerLength(0.123456, TorquePerLengthUnit.NewtonMeterPerMeter).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentUICulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 N·m/m", new TorquePerLength(0.123456, TorquePerLengthUnit.NewtonMeterPerMeter).ToString("s1", culture));
            Assert.Equal("0.12 N·m/m", new TorquePerLength(0.123456, TorquePerLengthUnit.NewtonMeterPerMeter).ToString("s2", culture));
            Assert.Equal("0.123 N·m/m", new TorquePerLength(0.123456, TorquePerLengthUnit.NewtonMeterPerMeter).ToString("s3", culture));
            Assert.Equal("0.1235 N·m/m", new TorquePerLength(0.123456, TorquePerLengthUnit.NewtonMeterPerMeter).ToString("s4", culture));
        }


        [Fact]
        public void ToString_NullFormat_ThrowsArgumentNullException()
        {
            var quantity = TorquePerLength.FromNewtonMetersPerMeter(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, null, null));
        }

        [Fact]
        public void ToString_NullArgs_ThrowsArgumentNullException()
        {
            var quantity = TorquePerLength.FromNewtonMetersPerMeter(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, "g", null));
        }

        [Fact]
        public void ToString_NullProvider_EqualsCurrentUICulture()
        {
            var quantity = TorquePerLength.FromNewtonMetersPerMeter(1.0);
            Assert.Equal(quantity.ToString(CultureInfo.CurrentUICulture, "g"), quantity.ToString(null, "g"));
        }


        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = TorquePerLength.FromNewtonMetersPerMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = TorquePerLength.FromNewtonMetersPerMeter(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = TorquePerLength.FromNewtonMetersPerMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = TorquePerLength.FromNewtonMetersPerMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = TorquePerLength.FromNewtonMetersPerMeter(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = TorquePerLength.FromNewtonMetersPerMeter(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = TorquePerLength.FromNewtonMetersPerMeter(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = TorquePerLength.FromNewtonMetersPerMeter(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = TorquePerLength.FromNewtonMetersPerMeter(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = TorquePerLength.FromNewtonMetersPerMeter(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = TorquePerLength.FromNewtonMetersPerMeter(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = TorquePerLength.FromNewtonMetersPerMeter(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = TorquePerLength.FromNewtonMetersPerMeter(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = TorquePerLength.FromNewtonMetersPerMeter(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = TorquePerLength.FromNewtonMetersPerMeter(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = TorquePerLength.FromNewtonMetersPerMeter(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(TorquePerLength)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = TorquePerLength.FromNewtonMetersPerMeter(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(TorquePerLengthUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityType_EqualsQuantityType()
        {
            var quantity = TorquePerLength.FromNewtonMetersPerMeter(1.0);
            Assert.Equal(QuantityType.TorquePerLength, Convert.ChangeType(quantity, typeof(QuantityType)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = TorquePerLength.FromNewtonMetersPerMeter(1.0);
            Assert.Equal(TorquePerLength.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = TorquePerLength.FromNewtonMetersPerMeter(1.0);
            Assert.Equal(TorquePerLength.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = TorquePerLength.FromNewtonMetersPerMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = TorquePerLength.FromNewtonMetersPerMeter(1.0);
            Assert.Equal(new {TorquePerLength.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = TorquePerLength.FromNewtonMetersPerMeter(value);
            Assert.Equal(TorquePerLength.FromNewtonMetersPerMeter(-value), -quantity);
        }
    }
}
