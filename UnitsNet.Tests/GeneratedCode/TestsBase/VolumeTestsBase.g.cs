//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Volume.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class VolumeTestsBase : QuantityTestsBase
    {
        protected abstract double AcreFeetInOneCubicMeter { get; }
        protected abstract double AuTablespoonsInOneCubicMeter { get; }
        protected abstract double BoardFeetInOneCubicMeter { get; }
        protected abstract double CentilitersInOneCubicMeter { get; }
        protected abstract double CubicCentimetersInOneCubicMeter { get; }
        protected abstract double CubicDecimetersInOneCubicMeter { get; }
        protected abstract double CubicFeetInOneCubicMeter { get; }
        protected abstract double CubicHectometersInOneCubicMeter { get; }
        protected abstract double CubicInchesInOneCubicMeter { get; }
        protected abstract double CubicKilometersInOneCubicMeter { get; }
        protected abstract double CubicMetersInOneCubicMeter { get; }
        protected abstract double CubicMicrometersInOneCubicMeter { get; }
        protected abstract double CubicMilesInOneCubicMeter { get; }
        protected abstract double CubicMillimetersInOneCubicMeter { get; }
        protected abstract double CubicYardsInOneCubicMeter { get; }
        protected abstract double DecalitersInOneCubicMeter { get; }
        protected abstract double DecausGallonsInOneCubicMeter { get; }
        protected abstract double DecilitersInOneCubicMeter { get; }
        protected abstract double DeciusGallonsInOneCubicMeter { get; }
        protected abstract double HectocubicFeetInOneCubicMeter { get; }
        protected abstract double HectocubicMetersInOneCubicMeter { get; }
        protected abstract double HectolitersInOneCubicMeter { get; }
        protected abstract double HectousGallonsInOneCubicMeter { get; }
        protected abstract double ImperialBeerBarrelsInOneCubicMeter { get; }
        protected abstract double ImperialGallonsInOneCubicMeter { get; }
        protected abstract double ImperialOuncesInOneCubicMeter { get; }
        protected abstract double ImperialPintsInOneCubicMeter { get; }
        protected abstract double KilocubicFeetInOneCubicMeter { get; }
        protected abstract double KilocubicMetersInOneCubicMeter { get; }
        protected abstract double KiloimperialGallonsInOneCubicMeter { get; }
        protected abstract double KilolitersInOneCubicMeter { get; }
        protected abstract double KilousGallonsInOneCubicMeter { get; }
        protected abstract double LitersInOneCubicMeter { get; }
        protected abstract double MegacubicFeetInOneCubicMeter { get; }
        protected abstract double MegaimperialGallonsInOneCubicMeter { get; }
        protected abstract double MegalitersInOneCubicMeter { get; }
        protected abstract double MegausGallonsInOneCubicMeter { get; }
        protected abstract double MetricCupsInOneCubicMeter { get; }
        protected abstract double MetricTeaspoonsInOneCubicMeter { get; }
        protected abstract double MicrolitersInOneCubicMeter { get; }
        protected abstract double MillilitersInOneCubicMeter { get; }
        protected abstract double OilBarrelsInOneCubicMeter { get; }
        protected abstract double UkTablespoonsInOneCubicMeter { get; }
        protected abstract double UsBeerBarrelsInOneCubicMeter { get; }
        protected abstract double UsCustomaryCupsInOneCubicMeter { get; }
        protected abstract double UsGallonsInOneCubicMeter { get; }
        protected abstract double UsLegalCupsInOneCubicMeter { get; }
        protected abstract double UsOuncesInOneCubicMeter { get; }
        protected abstract double UsPintsInOneCubicMeter { get; }
        protected abstract double UsQuartsInOneCubicMeter { get; }
        protected abstract double UsTablespoonsInOneCubicMeter { get; }
        protected abstract double UsTeaspoonsInOneCubicMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double AcreFeetTolerance { get { return 1e-5; } }
        protected virtual double AuTablespoonsTolerance { get { return 1e-5; } }
        protected virtual double BoardFeetTolerance { get { return 1e-5; } }
        protected virtual double CentilitersTolerance { get { return 1e-5; } }
        protected virtual double CubicCentimetersTolerance { get { return 1e-5; } }
        protected virtual double CubicDecimetersTolerance { get { return 1e-5; } }
        protected virtual double CubicFeetTolerance { get { return 1e-5; } }
        protected virtual double CubicHectometersTolerance { get { return 1e-5; } }
        protected virtual double CubicInchesTolerance { get { return 1e-5; } }
        protected virtual double CubicKilometersTolerance { get { return 1e-5; } }
        protected virtual double CubicMetersTolerance { get { return 1e-5; } }
        protected virtual double CubicMicrometersTolerance { get { return 1e-5; } }
        protected virtual double CubicMilesTolerance { get { return 1e-5; } }
        protected virtual double CubicMillimetersTolerance { get { return 1e-5; } }
        protected virtual double CubicYardsTolerance { get { return 1e-5; } }
        protected virtual double DecalitersTolerance { get { return 1e-5; } }
        protected virtual double DecausGallonsTolerance { get { return 1e-5; } }
        protected virtual double DecilitersTolerance { get { return 1e-5; } }
        protected virtual double DeciusGallonsTolerance { get { return 1e-5; } }
        protected virtual double HectocubicFeetTolerance { get { return 1e-5; } }
        protected virtual double HectocubicMetersTolerance { get { return 1e-5; } }
        protected virtual double HectolitersTolerance { get { return 1e-5; } }
        protected virtual double HectousGallonsTolerance { get { return 1e-5; } }
        protected virtual double ImperialBeerBarrelsTolerance { get { return 1e-5; } }
        protected virtual double ImperialGallonsTolerance { get { return 1e-5; } }
        protected virtual double ImperialOuncesTolerance { get { return 1e-5; } }
        protected virtual double ImperialPintsTolerance { get { return 1e-5; } }
        protected virtual double KilocubicFeetTolerance { get { return 1e-5; } }
        protected virtual double KilocubicMetersTolerance { get { return 1e-5; } }
        protected virtual double KiloimperialGallonsTolerance { get { return 1e-5; } }
        protected virtual double KilolitersTolerance { get { return 1e-5; } }
        protected virtual double KilousGallonsTolerance { get { return 1e-5; } }
        protected virtual double LitersTolerance { get { return 1e-5; } }
        protected virtual double MegacubicFeetTolerance { get { return 1e-5; } }
        protected virtual double MegaimperialGallonsTolerance { get { return 1e-5; } }
        protected virtual double MegalitersTolerance { get { return 1e-5; } }
        protected virtual double MegausGallonsTolerance { get { return 1e-5; } }
        protected virtual double MetricCupsTolerance { get { return 1e-5; } }
        protected virtual double MetricTeaspoonsTolerance { get { return 1e-5; } }
        protected virtual double MicrolitersTolerance { get { return 1e-5; } }
        protected virtual double MillilitersTolerance { get { return 1e-5; } }
        protected virtual double OilBarrelsTolerance { get { return 1e-5; } }
        protected virtual double UkTablespoonsTolerance { get { return 1e-5; } }
        protected virtual double UsBeerBarrelsTolerance { get { return 1e-5; } }
        protected virtual double UsCustomaryCupsTolerance { get { return 1e-5; } }
        protected virtual double UsGallonsTolerance { get { return 1e-5; } }
        protected virtual double UsLegalCupsTolerance { get { return 1e-5; } }
        protected virtual double UsOuncesTolerance { get { return 1e-5; } }
        protected virtual double UsPintsTolerance { get { return 1e-5; } }
        protected virtual double UsQuartsTolerance { get { return 1e-5; } }
        protected virtual double UsTablespoonsTolerance { get { return 1e-5; } }
        protected virtual double UsTeaspoonsTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(VolumeUnit unit)
        {
            return unit switch
            {
                VolumeUnit.AcreFoot => (AcreFeetInOneCubicMeter, AcreFeetTolerance),
                VolumeUnit.AuTablespoon => (AuTablespoonsInOneCubicMeter, AuTablespoonsTolerance),
                VolumeUnit.BoardFoot => (BoardFeetInOneCubicMeter, BoardFeetTolerance),
                VolumeUnit.Centiliter => (CentilitersInOneCubicMeter, CentilitersTolerance),
                VolumeUnit.CubicCentimeter => (CubicCentimetersInOneCubicMeter, CubicCentimetersTolerance),
                VolumeUnit.CubicDecimeter => (CubicDecimetersInOneCubicMeter, CubicDecimetersTolerance),
                VolumeUnit.CubicFoot => (CubicFeetInOneCubicMeter, CubicFeetTolerance),
                VolumeUnit.CubicHectometer => (CubicHectometersInOneCubicMeter, CubicHectometersTolerance),
                VolumeUnit.CubicInch => (CubicInchesInOneCubicMeter, CubicInchesTolerance),
                VolumeUnit.CubicKilometer => (CubicKilometersInOneCubicMeter, CubicKilometersTolerance),
                VolumeUnit.CubicMeter => (CubicMetersInOneCubicMeter, CubicMetersTolerance),
                VolumeUnit.CubicMicrometer => (CubicMicrometersInOneCubicMeter, CubicMicrometersTolerance),
                VolumeUnit.CubicMile => (CubicMilesInOneCubicMeter, CubicMilesTolerance),
                VolumeUnit.CubicMillimeter => (CubicMillimetersInOneCubicMeter, CubicMillimetersTolerance),
                VolumeUnit.CubicYard => (CubicYardsInOneCubicMeter, CubicYardsTolerance),
                VolumeUnit.Decaliter => (DecalitersInOneCubicMeter, DecalitersTolerance),
                VolumeUnit.DecausGallon => (DecausGallonsInOneCubicMeter, DecausGallonsTolerance),
                VolumeUnit.Deciliter => (DecilitersInOneCubicMeter, DecilitersTolerance),
                VolumeUnit.DeciusGallon => (DeciusGallonsInOneCubicMeter, DeciusGallonsTolerance),
                VolumeUnit.HectocubicFoot => (HectocubicFeetInOneCubicMeter, HectocubicFeetTolerance),
                VolumeUnit.HectocubicMeter => (HectocubicMetersInOneCubicMeter, HectocubicMetersTolerance),
                VolumeUnit.Hectoliter => (HectolitersInOneCubicMeter, HectolitersTolerance),
                VolumeUnit.HectousGallon => (HectousGallonsInOneCubicMeter, HectousGallonsTolerance),
                VolumeUnit.ImperialBeerBarrel => (ImperialBeerBarrelsInOneCubicMeter, ImperialBeerBarrelsTolerance),
                VolumeUnit.ImperialGallon => (ImperialGallonsInOneCubicMeter, ImperialGallonsTolerance),
                VolumeUnit.ImperialOunce => (ImperialOuncesInOneCubicMeter, ImperialOuncesTolerance),
                VolumeUnit.ImperialPint => (ImperialPintsInOneCubicMeter, ImperialPintsTolerance),
                VolumeUnit.KilocubicFoot => (KilocubicFeetInOneCubicMeter, KilocubicFeetTolerance),
                VolumeUnit.KilocubicMeter => (KilocubicMetersInOneCubicMeter, KilocubicMetersTolerance),
                VolumeUnit.KiloimperialGallon => (KiloimperialGallonsInOneCubicMeter, KiloimperialGallonsTolerance),
                VolumeUnit.Kiloliter => (KilolitersInOneCubicMeter, KilolitersTolerance),
                VolumeUnit.KilousGallon => (KilousGallonsInOneCubicMeter, KilousGallonsTolerance),
                VolumeUnit.Liter => (LitersInOneCubicMeter, LitersTolerance),
                VolumeUnit.MegacubicFoot => (MegacubicFeetInOneCubicMeter, MegacubicFeetTolerance),
                VolumeUnit.MegaimperialGallon => (MegaimperialGallonsInOneCubicMeter, MegaimperialGallonsTolerance),
                VolumeUnit.Megaliter => (MegalitersInOneCubicMeter, MegalitersTolerance),
                VolumeUnit.MegausGallon => (MegausGallonsInOneCubicMeter, MegausGallonsTolerance),
                VolumeUnit.MetricCup => (MetricCupsInOneCubicMeter, MetricCupsTolerance),
                VolumeUnit.MetricTeaspoon => (MetricTeaspoonsInOneCubicMeter, MetricTeaspoonsTolerance),
                VolumeUnit.Microliter => (MicrolitersInOneCubicMeter, MicrolitersTolerance),
                VolumeUnit.Milliliter => (MillilitersInOneCubicMeter, MillilitersTolerance),
                VolumeUnit.OilBarrel => (OilBarrelsInOneCubicMeter, OilBarrelsTolerance),
                VolumeUnit.UkTablespoon => (UkTablespoonsInOneCubicMeter, UkTablespoonsTolerance),
                VolumeUnit.UsBeerBarrel => (UsBeerBarrelsInOneCubicMeter, UsBeerBarrelsTolerance),
                VolumeUnit.UsCustomaryCup => (UsCustomaryCupsInOneCubicMeter, UsCustomaryCupsTolerance),
                VolumeUnit.UsGallon => (UsGallonsInOneCubicMeter, UsGallonsTolerance),
                VolumeUnit.UsLegalCup => (UsLegalCupsInOneCubicMeter, UsLegalCupsTolerance),
                VolumeUnit.UsOunce => (UsOuncesInOneCubicMeter, UsOuncesTolerance),
                VolumeUnit.UsPint => (UsPintsInOneCubicMeter, UsPintsTolerance),
                VolumeUnit.UsQuart => (UsQuartsInOneCubicMeter, UsQuartsTolerance),
                VolumeUnit.UsTablespoon => (UsTablespoonsInOneCubicMeter, UsTablespoonsTolerance),
                VolumeUnit.UsTeaspoon => (UsTeaspoonsInOneCubicMeter, UsTeaspoonsTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { VolumeUnit.AcreFoot },
            new object[] { VolumeUnit.AuTablespoon },
            new object[] { VolumeUnit.BoardFoot },
            new object[] { VolumeUnit.Centiliter },
            new object[] { VolumeUnit.CubicCentimeter },
            new object[] { VolumeUnit.CubicDecimeter },
            new object[] { VolumeUnit.CubicFoot },
            new object[] { VolumeUnit.CubicHectometer },
            new object[] { VolumeUnit.CubicInch },
            new object[] { VolumeUnit.CubicKilometer },
            new object[] { VolumeUnit.CubicMeter },
            new object[] { VolumeUnit.CubicMicrometer },
            new object[] { VolumeUnit.CubicMile },
            new object[] { VolumeUnit.CubicMillimeter },
            new object[] { VolumeUnit.CubicYard },
            new object[] { VolumeUnit.Decaliter },
            new object[] { VolumeUnit.DecausGallon },
            new object[] { VolumeUnit.Deciliter },
            new object[] { VolumeUnit.DeciusGallon },
            new object[] { VolumeUnit.HectocubicFoot },
            new object[] { VolumeUnit.HectocubicMeter },
            new object[] { VolumeUnit.Hectoliter },
            new object[] { VolumeUnit.HectousGallon },
            new object[] { VolumeUnit.ImperialBeerBarrel },
            new object[] { VolumeUnit.ImperialGallon },
            new object[] { VolumeUnit.ImperialOunce },
            new object[] { VolumeUnit.ImperialPint },
            new object[] { VolumeUnit.KilocubicFoot },
            new object[] { VolumeUnit.KilocubicMeter },
            new object[] { VolumeUnit.KiloimperialGallon },
            new object[] { VolumeUnit.Kiloliter },
            new object[] { VolumeUnit.KilousGallon },
            new object[] { VolumeUnit.Liter },
            new object[] { VolumeUnit.MegacubicFoot },
            new object[] { VolumeUnit.MegaimperialGallon },
            new object[] { VolumeUnit.Megaliter },
            new object[] { VolumeUnit.MegausGallon },
            new object[] { VolumeUnit.MetricCup },
            new object[] { VolumeUnit.MetricTeaspoon },
            new object[] { VolumeUnit.Microliter },
            new object[] { VolumeUnit.Milliliter },
            new object[] { VolumeUnit.OilBarrel },
            new object[] { VolumeUnit.UkTablespoon },
            new object[] { VolumeUnit.UsBeerBarrel },
            new object[] { VolumeUnit.UsCustomaryCup },
            new object[] { VolumeUnit.UsGallon },
            new object[] { VolumeUnit.UsLegalCup },
            new object[] { VolumeUnit.UsOunce },
            new object[] { VolumeUnit.UsPint },
            new object[] { VolumeUnit.UsQuart },
            new object[] { VolumeUnit.UsTablespoon },
            new object[] { VolumeUnit.UsTeaspoon },
        };

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Volume((double)0.0, VolumeUnit.Undefined));
        }

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new Volume();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(VolumeUnit.CubicMeter, quantity.Unit);
        }


        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Volume(double.PositiveInfinity, VolumeUnit.CubicMeter));
            Assert.Throws<ArgumentException>(() => new Volume(double.NegativeInfinity, VolumeUnit.CubicMeter));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Volume(double.NaN, VolumeUnit.CubicMeter));
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new Volume(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            Func<object> TestCode = () => new Volume(value: 1, unitSystem: UnitSystem.SI);
            if (SupportsSIUnitSystem)
            {
                var quantity = (Volume) TestCode();
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(TestCode);
            }
        }

        [Fact]
        public void Volume_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new Volume(1, VolumeUnit.CubicMeter);

            QuantityInfo<VolumeUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(Volume.Zero, quantityInfo.Zero);
            Assert.Equal("Volume", quantityInfo.Name);
            Assert.Equal(QuantityType.Volume, quantityInfo.QuantityType);

            var units = EnumUtils.GetEnumValues<VolumeUnit>().Except(new[] {VolumeUnit.Undefined}).OrderBy(x => x.ToString()).ToArray();
            var unitNames = units.Select(x => x.ToString());

            // Obsolete members
            Assert.Equal(units, quantityInfo.Units);
            Assert.Equal(unitNames, quantityInfo.UnitNames);
        }

        [Fact]
        public void CubicMeterToVolumeUnits()
        {
            Volume cubicmeter = Volume.FromCubicMeters(1);
            AssertEx.EqualTolerance(AcreFeetInOneCubicMeter, cubicmeter.AcreFeet, AcreFeetTolerance);
            AssertEx.EqualTolerance(AuTablespoonsInOneCubicMeter, cubicmeter.AuTablespoons, AuTablespoonsTolerance);
            AssertEx.EqualTolerance(BoardFeetInOneCubicMeter, cubicmeter.BoardFeet, BoardFeetTolerance);
            AssertEx.EqualTolerance(CentilitersInOneCubicMeter, cubicmeter.Centiliters, CentilitersTolerance);
            AssertEx.EqualTolerance(CubicCentimetersInOneCubicMeter, cubicmeter.CubicCentimeters, CubicCentimetersTolerance);
            AssertEx.EqualTolerance(CubicDecimetersInOneCubicMeter, cubicmeter.CubicDecimeters, CubicDecimetersTolerance);
            AssertEx.EqualTolerance(CubicFeetInOneCubicMeter, cubicmeter.CubicFeet, CubicFeetTolerance);
            AssertEx.EqualTolerance(CubicHectometersInOneCubicMeter, cubicmeter.CubicHectometers, CubicHectometersTolerance);
            AssertEx.EqualTolerance(CubicInchesInOneCubicMeter, cubicmeter.CubicInches, CubicInchesTolerance);
            AssertEx.EqualTolerance(CubicKilometersInOneCubicMeter, cubicmeter.CubicKilometers, CubicKilometersTolerance);
            AssertEx.EqualTolerance(CubicMetersInOneCubicMeter, cubicmeter.CubicMeters, CubicMetersTolerance);
            AssertEx.EqualTolerance(CubicMicrometersInOneCubicMeter, cubicmeter.CubicMicrometers, CubicMicrometersTolerance);
            AssertEx.EqualTolerance(CubicMilesInOneCubicMeter, cubicmeter.CubicMiles, CubicMilesTolerance);
            AssertEx.EqualTolerance(CubicMillimetersInOneCubicMeter, cubicmeter.CubicMillimeters, CubicMillimetersTolerance);
            AssertEx.EqualTolerance(CubicYardsInOneCubicMeter, cubicmeter.CubicYards, CubicYardsTolerance);
            AssertEx.EqualTolerance(DecalitersInOneCubicMeter, cubicmeter.Decaliters, DecalitersTolerance);
            AssertEx.EqualTolerance(DecausGallonsInOneCubicMeter, cubicmeter.DecausGallons, DecausGallonsTolerance);
            AssertEx.EqualTolerance(DecilitersInOneCubicMeter, cubicmeter.Deciliters, DecilitersTolerance);
            AssertEx.EqualTolerance(DeciusGallonsInOneCubicMeter, cubicmeter.DeciusGallons, DeciusGallonsTolerance);
            AssertEx.EqualTolerance(HectocubicFeetInOneCubicMeter, cubicmeter.HectocubicFeet, HectocubicFeetTolerance);
            AssertEx.EqualTolerance(HectocubicMetersInOneCubicMeter, cubicmeter.HectocubicMeters, HectocubicMetersTolerance);
            AssertEx.EqualTolerance(HectolitersInOneCubicMeter, cubicmeter.Hectoliters, HectolitersTolerance);
            AssertEx.EqualTolerance(HectousGallonsInOneCubicMeter, cubicmeter.HectousGallons, HectousGallonsTolerance);
            AssertEx.EqualTolerance(ImperialBeerBarrelsInOneCubicMeter, cubicmeter.ImperialBeerBarrels, ImperialBeerBarrelsTolerance);
            AssertEx.EqualTolerance(ImperialGallonsInOneCubicMeter, cubicmeter.ImperialGallons, ImperialGallonsTolerance);
            AssertEx.EqualTolerance(ImperialOuncesInOneCubicMeter, cubicmeter.ImperialOunces, ImperialOuncesTolerance);
            AssertEx.EqualTolerance(ImperialPintsInOneCubicMeter, cubicmeter.ImperialPints, ImperialPintsTolerance);
            AssertEx.EqualTolerance(KilocubicFeetInOneCubicMeter, cubicmeter.KilocubicFeet, KilocubicFeetTolerance);
            AssertEx.EqualTolerance(KilocubicMetersInOneCubicMeter, cubicmeter.KilocubicMeters, KilocubicMetersTolerance);
            AssertEx.EqualTolerance(KiloimperialGallonsInOneCubicMeter, cubicmeter.KiloimperialGallons, KiloimperialGallonsTolerance);
            AssertEx.EqualTolerance(KilolitersInOneCubicMeter, cubicmeter.Kiloliters, KilolitersTolerance);
            AssertEx.EqualTolerance(KilousGallonsInOneCubicMeter, cubicmeter.KilousGallons, KilousGallonsTolerance);
            AssertEx.EqualTolerance(LitersInOneCubicMeter, cubicmeter.Liters, LitersTolerance);
            AssertEx.EqualTolerance(MegacubicFeetInOneCubicMeter, cubicmeter.MegacubicFeet, MegacubicFeetTolerance);
            AssertEx.EqualTolerance(MegaimperialGallonsInOneCubicMeter, cubicmeter.MegaimperialGallons, MegaimperialGallonsTolerance);
            AssertEx.EqualTolerance(MegalitersInOneCubicMeter, cubicmeter.Megaliters, MegalitersTolerance);
            AssertEx.EqualTolerance(MegausGallonsInOneCubicMeter, cubicmeter.MegausGallons, MegausGallonsTolerance);
            AssertEx.EqualTolerance(MetricCupsInOneCubicMeter, cubicmeter.MetricCups, MetricCupsTolerance);
            AssertEx.EqualTolerance(MetricTeaspoonsInOneCubicMeter, cubicmeter.MetricTeaspoons, MetricTeaspoonsTolerance);
            AssertEx.EqualTolerance(MicrolitersInOneCubicMeter, cubicmeter.Microliters, MicrolitersTolerance);
            AssertEx.EqualTolerance(MillilitersInOneCubicMeter, cubicmeter.Milliliters, MillilitersTolerance);
            AssertEx.EqualTolerance(OilBarrelsInOneCubicMeter, cubicmeter.OilBarrels, OilBarrelsTolerance);
            AssertEx.EqualTolerance(UkTablespoonsInOneCubicMeter, cubicmeter.UkTablespoons, UkTablespoonsTolerance);
            AssertEx.EqualTolerance(UsBeerBarrelsInOneCubicMeter, cubicmeter.UsBeerBarrels, UsBeerBarrelsTolerance);
            AssertEx.EqualTolerance(UsCustomaryCupsInOneCubicMeter, cubicmeter.UsCustomaryCups, UsCustomaryCupsTolerance);
            AssertEx.EqualTolerance(UsGallonsInOneCubicMeter, cubicmeter.UsGallons, UsGallonsTolerance);
            AssertEx.EqualTolerance(UsLegalCupsInOneCubicMeter, cubicmeter.UsLegalCups, UsLegalCupsTolerance);
            AssertEx.EqualTolerance(UsOuncesInOneCubicMeter, cubicmeter.UsOunces, UsOuncesTolerance);
            AssertEx.EqualTolerance(UsPintsInOneCubicMeter, cubicmeter.UsPints, UsPintsTolerance);
            AssertEx.EqualTolerance(UsQuartsInOneCubicMeter, cubicmeter.UsQuarts, UsQuartsTolerance);
            AssertEx.EqualTolerance(UsTablespoonsInOneCubicMeter, cubicmeter.UsTablespoons, UsTablespoonsTolerance);
            AssertEx.EqualTolerance(UsTeaspoonsInOneCubicMeter, cubicmeter.UsTeaspoons, UsTeaspoonsTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = Volume.From(1, VolumeUnit.AcreFoot);
            AssertEx.EqualTolerance(1, quantity00.AcreFeet, AcreFeetTolerance);
            Assert.Equal(VolumeUnit.AcreFoot, quantity00.Unit);

            var quantity01 = Volume.From(1, VolumeUnit.AuTablespoon);
            AssertEx.EqualTolerance(1, quantity01.AuTablespoons, AuTablespoonsTolerance);
            Assert.Equal(VolumeUnit.AuTablespoon, quantity01.Unit);

            var quantity02 = Volume.From(1, VolumeUnit.BoardFoot);
            AssertEx.EqualTolerance(1, quantity02.BoardFeet, BoardFeetTolerance);
            Assert.Equal(VolumeUnit.BoardFoot, quantity02.Unit);

            var quantity03 = Volume.From(1, VolumeUnit.Centiliter);
            AssertEx.EqualTolerance(1, quantity03.Centiliters, CentilitersTolerance);
            Assert.Equal(VolumeUnit.Centiliter, quantity03.Unit);

            var quantity04 = Volume.From(1, VolumeUnit.CubicCentimeter);
            AssertEx.EqualTolerance(1, quantity04.CubicCentimeters, CubicCentimetersTolerance);
            Assert.Equal(VolumeUnit.CubicCentimeter, quantity04.Unit);

            var quantity05 = Volume.From(1, VolumeUnit.CubicDecimeter);
            AssertEx.EqualTolerance(1, quantity05.CubicDecimeters, CubicDecimetersTolerance);
            Assert.Equal(VolumeUnit.CubicDecimeter, quantity05.Unit);

            var quantity06 = Volume.From(1, VolumeUnit.CubicFoot);
            AssertEx.EqualTolerance(1, quantity06.CubicFeet, CubicFeetTolerance);
            Assert.Equal(VolumeUnit.CubicFoot, quantity06.Unit);

            var quantity07 = Volume.From(1, VolumeUnit.CubicHectometer);
            AssertEx.EqualTolerance(1, quantity07.CubicHectometers, CubicHectometersTolerance);
            Assert.Equal(VolumeUnit.CubicHectometer, quantity07.Unit);

            var quantity08 = Volume.From(1, VolumeUnit.CubicInch);
            AssertEx.EqualTolerance(1, quantity08.CubicInches, CubicInchesTolerance);
            Assert.Equal(VolumeUnit.CubicInch, quantity08.Unit);

            var quantity09 = Volume.From(1, VolumeUnit.CubicKilometer);
            AssertEx.EqualTolerance(1, quantity09.CubicKilometers, CubicKilometersTolerance);
            Assert.Equal(VolumeUnit.CubicKilometer, quantity09.Unit);

            var quantity10 = Volume.From(1, VolumeUnit.CubicMeter);
            AssertEx.EqualTolerance(1, quantity10.CubicMeters, CubicMetersTolerance);
            Assert.Equal(VolumeUnit.CubicMeter, quantity10.Unit);

            var quantity11 = Volume.From(1, VolumeUnit.CubicMicrometer);
            AssertEx.EqualTolerance(1, quantity11.CubicMicrometers, CubicMicrometersTolerance);
            Assert.Equal(VolumeUnit.CubicMicrometer, quantity11.Unit);

            var quantity12 = Volume.From(1, VolumeUnit.CubicMile);
            AssertEx.EqualTolerance(1, quantity12.CubicMiles, CubicMilesTolerance);
            Assert.Equal(VolumeUnit.CubicMile, quantity12.Unit);

            var quantity13 = Volume.From(1, VolumeUnit.CubicMillimeter);
            AssertEx.EqualTolerance(1, quantity13.CubicMillimeters, CubicMillimetersTolerance);
            Assert.Equal(VolumeUnit.CubicMillimeter, quantity13.Unit);

            var quantity14 = Volume.From(1, VolumeUnit.CubicYard);
            AssertEx.EqualTolerance(1, quantity14.CubicYards, CubicYardsTolerance);
            Assert.Equal(VolumeUnit.CubicYard, quantity14.Unit);

            var quantity15 = Volume.From(1, VolumeUnit.Decaliter);
            AssertEx.EqualTolerance(1, quantity15.Decaliters, DecalitersTolerance);
            Assert.Equal(VolumeUnit.Decaliter, quantity15.Unit);

            var quantity16 = Volume.From(1, VolumeUnit.DecausGallon);
            AssertEx.EqualTolerance(1, quantity16.DecausGallons, DecausGallonsTolerance);
            Assert.Equal(VolumeUnit.DecausGallon, quantity16.Unit);

            var quantity17 = Volume.From(1, VolumeUnit.Deciliter);
            AssertEx.EqualTolerance(1, quantity17.Deciliters, DecilitersTolerance);
            Assert.Equal(VolumeUnit.Deciliter, quantity17.Unit);

            var quantity18 = Volume.From(1, VolumeUnit.DeciusGallon);
            AssertEx.EqualTolerance(1, quantity18.DeciusGallons, DeciusGallonsTolerance);
            Assert.Equal(VolumeUnit.DeciusGallon, quantity18.Unit);

            var quantity19 = Volume.From(1, VolumeUnit.HectocubicFoot);
            AssertEx.EqualTolerance(1, quantity19.HectocubicFeet, HectocubicFeetTolerance);
            Assert.Equal(VolumeUnit.HectocubicFoot, quantity19.Unit);

            var quantity20 = Volume.From(1, VolumeUnit.HectocubicMeter);
            AssertEx.EqualTolerance(1, quantity20.HectocubicMeters, HectocubicMetersTolerance);
            Assert.Equal(VolumeUnit.HectocubicMeter, quantity20.Unit);

            var quantity21 = Volume.From(1, VolumeUnit.Hectoliter);
            AssertEx.EqualTolerance(1, quantity21.Hectoliters, HectolitersTolerance);
            Assert.Equal(VolumeUnit.Hectoliter, quantity21.Unit);

            var quantity22 = Volume.From(1, VolumeUnit.HectousGallon);
            AssertEx.EqualTolerance(1, quantity22.HectousGallons, HectousGallonsTolerance);
            Assert.Equal(VolumeUnit.HectousGallon, quantity22.Unit);

            var quantity23 = Volume.From(1, VolumeUnit.ImperialBeerBarrel);
            AssertEx.EqualTolerance(1, quantity23.ImperialBeerBarrels, ImperialBeerBarrelsTolerance);
            Assert.Equal(VolumeUnit.ImperialBeerBarrel, quantity23.Unit);

            var quantity24 = Volume.From(1, VolumeUnit.ImperialGallon);
            AssertEx.EqualTolerance(1, quantity24.ImperialGallons, ImperialGallonsTolerance);
            Assert.Equal(VolumeUnit.ImperialGallon, quantity24.Unit);

            var quantity25 = Volume.From(1, VolumeUnit.ImperialOunce);
            AssertEx.EqualTolerance(1, quantity25.ImperialOunces, ImperialOuncesTolerance);
            Assert.Equal(VolumeUnit.ImperialOunce, quantity25.Unit);

            var quantity26 = Volume.From(1, VolumeUnit.ImperialPint);
            AssertEx.EqualTolerance(1, quantity26.ImperialPints, ImperialPintsTolerance);
            Assert.Equal(VolumeUnit.ImperialPint, quantity26.Unit);

            var quantity27 = Volume.From(1, VolumeUnit.KilocubicFoot);
            AssertEx.EqualTolerance(1, quantity27.KilocubicFeet, KilocubicFeetTolerance);
            Assert.Equal(VolumeUnit.KilocubicFoot, quantity27.Unit);

            var quantity28 = Volume.From(1, VolumeUnit.KilocubicMeter);
            AssertEx.EqualTolerance(1, quantity28.KilocubicMeters, KilocubicMetersTolerance);
            Assert.Equal(VolumeUnit.KilocubicMeter, quantity28.Unit);

            var quantity29 = Volume.From(1, VolumeUnit.KiloimperialGallon);
            AssertEx.EqualTolerance(1, quantity29.KiloimperialGallons, KiloimperialGallonsTolerance);
            Assert.Equal(VolumeUnit.KiloimperialGallon, quantity29.Unit);

            var quantity30 = Volume.From(1, VolumeUnit.Kiloliter);
            AssertEx.EqualTolerance(1, quantity30.Kiloliters, KilolitersTolerance);
            Assert.Equal(VolumeUnit.Kiloliter, quantity30.Unit);

            var quantity31 = Volume.From(1, VolumeUnit.KilousGallon);
            AssertEx.EqualTolerance(1, quantity31.KilousGallons, KilousGallonsTolerance);
            Assert.Equal(VolumeUnit.KilousGallon, quantity31.Unit);

            var quantity32 = Volume.From(1, VolumeUnit.Liter);
            AssertEx.EqualTolerance(1, quantity32.Liters, LitersTolerance);
            Assert.Equal(VolumeUnit.Liter, quantity32.Unit);

            var quantity33 = Volume.From(1, VolumeUnit.MegacubicFoot);
            AssertEx.EqualTolerance(1, quantity33.MegacubicFeet, MegacubicFeetTolerance);
            Assert.Equal(VolumeUnit.MegacubicFoot, quantity33.Unit);

            var quantity34 = Volume.From(1, VolumeUnit.MegaimperialGallon);
            AssertEx.EqualTolerance(1, quantity34.MegaimperialGallons, MegaimperialGallonsTolerance);
            Assert.Equal(VolumeUnit.MegaimperialGallon, quantity34.Unit);

            var quantity35 = Volume.From(1, VolumeUnit.Megaliter);
            AssertEx.EqualTolerance(1, quantity35.Megaliters, MegalitersTolerance);
            Assert.Equal(VolumeUnit.Megaliter, quantity35.Unit);

            var quantity36 = Volume.From(1, VolumeUnit.MegausGallon);
            AssertEx.EqualTolerance(1, quantity36.MegausGallons, MegausGallonsTolerance);
            Assert.Equal(VolumeUnit.MegausGallon, quantity36.Unit);

            var quantity37 = Volume.From(1, VolumeUnit.MetricCup);
            AssertEx.EqualTolerance(1, quantity37.MetricCups, MetricCupsTolerance);
            Assert.Equal(VolumeUnit.MetricCup, quantity37.Unit);

            var quantity38 = Volume.From(1, VolumeUnit.MetricTeaspoon);
            AssertEx.EqualTolerance(1, quantity38.MetricTeaspoons, MetricTeaspoonsTolerance);
            Assert.Equal(VolumeUnit.MetricTeaspoon, quantity38.Unit);

            var quantity39 = Volume.From(1, VolumeUnit.Microliter);
            AssertEx.EqualTolerance(1, quantity39.Microliters, MicrolitersTolerance);
            Assert.Equal(VolumeUnit.Microliter, quantity39.Unit);

            var quantity40 = Volume.From(1, VolumeUnit.Milliliter);
            AssertEx.EqualTolerance(1, quantity40.Milliliters, MillilitersTolerance);
            Assert.Equal(VolumeUnit.Milliliter, quantity40.Unit);

            var quantity41 = Volume.From(1, VolumeUnit.OilBarrel);
            AssertEx.EqualTolerance(1, quantity41.OilBarrels, OilBarrelsTolerance);
            Assert.Equal(VolumeUnit.OilBarrel, quantity41.Unit);

            var quantity42 = Volume.From(1, VolumeUnit.UkTablespoon);
            AssertEx.EqualTolerance(1, quantity42.UkTablespoons, UkTablespoonsTolerance);
            Assert.Equal(VolumeUnit.UkTablespoon, quantity42.Unit);

            var quantity43 = Volume.From(1, VolumeUnit.UsBeerBarrel);
            AssertEx.EqualTolerance(1, quantity43.UsBeerBarrels, UsBeerBarrelsTolerance);
            Assert.Equal(VolumeUnit.UsBeerBarrel, quantity43.Unit);

            var quantity44 = Volume.From(1, VolumeUnit.UsCustomaryCup);
            AssertEx.EqualTolerance(1, quantity44.UsCustomaryCups, UsCustomaryCupsTolerance);
            Assert.Equal(VolumeUnit.UsCustomaryCup, quantity44.Unit);

            var quantity45 = Volume.From(1, VolumeUnit.UsGallon);
            AssertEx.EqualTolerance(1, quantity45.UsGallons, UsGallonsTolerance);
            Assert.Equal(VolumeUnit.UsGallon, quantity45.Unit);

            var quantity46 = Volume.From(1, VolumeUnit.UsLegalCup);
            AssertEx.EqualTolerance(1, quantity46.UsLegalCups, UsLegalCupsTolerance);
            Assert.Equal(VolumeUnit.UsLegalCup, quantity46.Unit);

            var quantity47 = Volume.From(1, VolumeUnit.UsOunce);
            AssertEx.EqualTolerance(1, quantity47.UsOunces, UsOuncesTolerance);
            Assert.Equal(VolumeUnit.UsOunce, quantity47.Unit);

            var quantity48 = Volume.From(1, VolumeUnit.UsPint);
            AssertEx.EqualTolerance(1, quantity48.UsPints, UsPintsTolerance);
            Assert.Equal(VolumeUnit.UsPint, quantity48.Unit);

            var quantity49 = Volume.From(1, VolumeUnit.UsQuart);
            AssertEx.EqualTolerance(1, quantity49.UsQuarts, UsQuartsTolerance);
            Assert.Equal(VolumeUnit.UsQuart, quantity49.Unit);

            var quantity50 = Volume.From(1, VolumeUnit.UsTablespoon);
            AssertEx.EqualTolerance(1, quantity50.UsTablespoons, UsTablespoonsTolerance);
            Assert.Equal(VolumeUnit.UsTablespoon, quantity50.Unit);

            var quantity51 = Volume.From(1, VolumeUnit.UsTeaspoon);
            AssertEx.EqualTolerance(1, quantity51.UsTeaspoons, UsTeaspoonsTolerance);
            Assert.Equal(VolumeUnit.UsTeaspoon, quantity51.Unit);

        }

        [Fact]
        public void FromCubicMeters_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => Volume.FromCubicMeters(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => Volume.FromCubicMeters(double.NegativeInfinity));
        }

        [Fact]
        public void FromCubicMeters_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => Volume.FromCubicMeters(double.NaN));
        }

        [Fact]
        public void As()
        {
            var cubicmeter = Volume.FromCubicMeters(1);
            AssertEx.EqualTolerance(AcreFeetInOneCubicMeter, cubicmeter.As(VolumeUnit.AcreFoot), AcreFeetTolerance);
            AssertEx.EqualTolerance(AuTablespoonsInOneCubicMeter, cubicmeter.As(VolumeUnit.AuTablespoon), AuTablespoonsTolerance);
            AssertEx.EqualTolerance(BoardFeetInOneCubicMeter, cubicmeter.As(VolumeUnit.BoardFoot), BoardFeetTolerance);
            AssertEx.EqualTolerance(CentilitersInOneCubicMeter, cubicmeter.As(VolumeUnit.Centiliter), CentilitersTolerance);
            AssertEx.EqualTolerance(CubicCentimetersInOneCubicMeter, cubicmeter.As(VolumeUnit.CubicCentimeter), CubicCentimetersTolerance);
            AssertEx.EqualTolerance(CubicDecimetersInOneCubicMeter, cubicmeter.As(VolumeUnit.CubicDecimeter), CubicDecimetersTolerance);
            AssertEx.EqualTolerance(CubicFeetInOneCubicMeter, cubicmeter.As(VolumeUnit.CubicFoot), CubicFeetTolerance);
            AssertEx.EqualTolerance(CubicHectometersInOneCubicMeter, cubicmeter.As(VolumeUnit.CubicHectometer), CubicHectometersTolerance);
            AssertEx.EqualTolerance(CubicInchesInOneCubicMeter, cubicmeter.As(VolumeUnit.CubicInch), CubicInchesTolerance);
            AssertEx.EqualTolerance(CubicKilometersInOneCubicMeter, cubicmeter.As(VolumeUnit.CubicKilometer), CubicKilometersTolerance);
            AssertEx.EqualTolerance(CubicMetersInOneCubicMeter, cubicmeter.As(VolumeUnit.CubicMeter), CubicMetersTolerance);
            AssertEx.EqualTolerance(CubicMicrometersInOneCubicMeter, cubicmeter.As(VolumeUnit.CubicMicrometer), CubicMicrometersTolerance);
            AssertEx.EqualTolerance(CubicMilesInOneCubicMeter, cubicmeter.As(VolumeUnit.CubicMile), CubicMilesTolerance);
            AssertEx.EqualTolerance(CubicMillimetersInOneCubicMeter, cubicmeter.As(VolumeUnit.CubicMillimeter), CubicMillimetersTolerance);
            AssertEx.EqualTolerance(CubicYardsInOneCubicMeter, cubicmeter.As(VolumeUnit.CubicYard), CubicYardsTolerance);
            AssertEx.EqualTolerance(DecalitersInOneCubicMeter, cubicmeter.As(VolumeUnit.Decaliter), DecalitersTolerance);
            AssertEx.EqualTolerance(DecausGallonsInOneCubicMeter, cubicmeter.As(VolumeUnit.DecausGallon), DecausGallonsTolerance);
            AssertEx.EqualTolerance(DecilitersInOneCubicMeter, cubicmeter.As(VolumeUnit.Deciliter), DecilitersTolerance);
            AssertEx.EqualTolerance(DeciusGallonsInOneCubicMeter, cubicmeter.As(VolumeUnit.DeciusGallon), DeciusGallonsTolerance);
            AssertEx.EqualTolerance(HectocubicFeetInOneCubicMeter, cubicmeter.As(VolumeUnit.HectocubicFoot), HectocubicFeetTolerance);
            AssertEx.EqualTolerance(HectocubicMetersInOneCubicMeter, cubicmeter.As(VolumeUnit.HectocubicMeter), HectocubicMetersTolerance);
            AssertEx.EqualTolerance(HectolitersInOneCubicMeter, cubicmeter.As(VolumeUnit.Hectoliter), HectolitersTolerance);
            AssertEx.EqualTolerance(HectousGallonsInOneCubicMeter, cubicmeter.As(VolumeUnit.HectousGallon), HectousGallonsTolerance);
            AssertEx.EqualTolerance(ImperialBeerBarrelsInOneCubicMeter, cubicmeter.As(VolumeUnit.ImperialBeerBarrel), ImperialBeerBarrelsTolerance);
            AssertEx.EqualTolerance(ImperialGallonsInOneCubicMeter, cubicmeter.As(VolumeUnit.ImperialGallon), ImperialGallonsTolerance);
            AssertEx.EqualTolerance(ImperialOuncesInOneCubicMeter, cubicmeter.As(VolumeUnit.ImperialOunce), ImperialOuncesTolerance);
            AssertEx.EqualTolerance(ImperialPintsInOneCubicMeter, cubicmeter.As(VolumeUnit.ImperialPint), ImperialPintsTolerance);
            AssertEx.EqualTolerance(KilocubicFeetInOneCubicMeter, cubicmeter.As(VolumeUnit.KilocubicFoot), KilocubicFeetTolerance);
            AssertEx.EqualTolerance(KilocubicMetersInOneCubicMeter, cubicmeter.As(VolumeUnit.KilocubicMeter), KilocubicMetersTolerance);
            AssertEx.EqualTolerance(KiloimperialGallonsInOneCubicMeter, cubicmeter.As(VolumeUnit.KiloimperialGallon), KiloimperialGallonsTolerance);
            AssertEx.EqualTolerance(KilolitersInOneCubicMeter, cubicmeter.As(VolumeUnit.Kiloliter), KilolitersTolerance);
            AssertEx.EqualTolerance(KilousGallonsInOneCubicMeter, cubicmeter.As(VolumeUnit.KilousGallon), KilousGallonsTolerance);
            AssertEx.EqualTolerance(LitersInOneCubicMeter, cubicmeter.As(VolumeUnit.Liter), LitersTolerance);
            AssertEx.EqualTolerance(MegacubicFeetInOneCubicMeter, cubicmeter.As(VolumeUnit.MegacubicFoot), MegacubicFeetTolerance);
            AssertEx.EqualTolerance(MegaimperialGallonsInOneCubicMeter, cubicmeter.As(VolumeUnit.MegaimperialGallon), MegaimperialGallonsTolerance);
            AssertEx.EqualTolerance(MegalitersInOneCubicMeter, cubicmeter.As(VolumeUnit.Megaliter), MegalitersTolerance);
            AssertEx.EqualTolerance(MegausGallonsInOneCubicMeter, cubicmeter.As(VolumeUnit.MegausGallon), MegausGallonsTolerance);
            AssertEx.EqualTolerance(MetricCupsInOneCubicMeter, cubicmeter.As(VolumeUnit.MetricCup), MetricCupsTolerance);
            AssertEx.EqualTolerance(MetricTeaspoonsInOneCubicMeter, cubicmeter.As(VolumeUnit.MetricTeaspoon), MetricTeaspoonsTolerance);
            AssertEx.EqualTolerance(MicrolitersInOneCubicMeter, cubicmeter.As(VolumeUnit.Microliter), MicrolitersTolerance);
            AssertEx.EqualTolerance(MillilitersInOneCubicMeter, cubicmeter.As(VolumeUnit.Milliliter), MillilitersTolerance);
            AssertEx.EqualTolerance(OilBarrelsInOneCubicMeter, cubicmeter.As(VolumeUnit.OilBarrel), OilBarrelsTolerance);
            AssertEx.EqualTolerance(UkTablespoonsInOneCubicMeter, cubicmeter.As(VolumeUnit.UkTablespoon), UkTablespoonsTolerance);
            AssertEx.EqualTolerance(UsBeerBarrelsInOneCubicMeter, cubicmeter.As(VolumeUnit.UsBeerBarrel), UsBeerBarrelsTolerance);
            AssertEx.EqualTolerance(UsCustomaryCupsInOneCubicMeter, cubicmeter.As(VolumeUnit.UsCustomaryCup), UsCustomaryCupsTolerance);
            AssertEx.EqualTolerance(UsGallonsInOneCubicMeter, cubicmeter.As(VolumeUnit.UsGallon), UsGallonsTolerance);
            AssertEx.EqualTolerance(UsLegalCupsInOneCubicMeter, cubicmeter.As(VolumeUnit.UsLegalCup), UsLegalCupsTolerance);
            AssertEx.EqualTolerance(UsOuncesInOneCubicMeter, cubicmeter.As(VolumeUnit.UsOunce), UsOuncesTolerance);
            AssertEx.EqualTolerance(UsPintsInOneCubicMeter, cubicmeter.As(VolumeUnit.UsPint), UsPintsTolerance);
            AssertEx.EqualTolerance(UsQuartsInOneCubicMeter, cubicmeter.As(VolumeUnit.UsQuart), UsQuartsTolerance);
            AssertEx.EqualTolerance(UsTablespoonsInOneCubicMeter, cubicmeter.As(VolumeUnit.UsTablespoon), UsTablespoonsTolerance);
            AssertEx.EqualTolerance(UsTeaspoonsInOneCubicMeter, cubicmeter.As(VolumeUnit.UsTeaspoon), UsTeaspoonsTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new Volume(value: 1, unit: Volume.BaseUnit);
            Func<object> AsWithSIUnitSystem = () => quantity.As(UnitSystem.SI);

            if (SupportsSIUnitSystem)
            {
                var value = (double) AsWithSIUnitSystem();
                Assert.Equal(1, value);
            }
            else
            {
                Assert.Throws<ArgumentException>(AsWithSIUnitSystem);
            }
        }

        [Fact]
        public void Parse()
        {
            try
            {
                var parsed = Volume.Parse("1 ac-ft", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.AcreFeet, AcreFeetTolerance);
                Assert.Equal(VolumeUnit.AcreFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 acre-foot", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.AcreFeet, AcreFeetTolerance);
                Assert.Equal(VolumeUnit.AcreFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 acre-feet", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.AcreFeet, AcreFeetTolerance);
                Assert.Equal(VolumeUnit.AcreFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 bf", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.BoardFeet, BoardFeetTolerance);
                Assert.Equal(VolumeUnit.BoardFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 board foot", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.BoardFeet, BoardFeetTolerance);
                Assert.Equal(VolumeUnit.BoardFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 board feet", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.BoardFeet, BoardFeetTolerance);
                Assert.Equal(VolumeUnit.BoardFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 pmp", CultureInfo.GetCultureInfo("fr-CA"));
                AssertEx.EqualTolerance(1, parsed.BoardFeet, BoardFeetTolerance);
                Assert.Equal(VolumeUnit.BoardFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 pied-planche", CultureInfo.GetCultureInfo("fr-CA"));
                AssertEx.EqualTolerance(1, parsed.BoardFeet, BoardFeetTolerance);
                Assert.Equal(VolumeUnit.BoardFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 pied de planche", CultureInfo.GetCultureInfo("fr-CA"));
                AssertEx.EqualTolerance(1, parsed.BoardFeet, BoardFeetTolerance);
                Assert.Equal(VolumeUnit.BoardFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 cl", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Centiliters, CentilitersTolerance);
                Assert.Equal(VolumeUnit.Centiliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 сл", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.Centiliters, CentilitersTolerance);
                Assert.Equal(VolumeUnit.Centiliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 cm³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.CubicCentimeters, CubicCentimetersTolerance);
                Assert.Equal(VolumeUnit.CubicCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 см³", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.CubicCentimeters, CubicCentimetersTolerance);
                Assert.Equal(VolumeUnit.CubicCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 dm³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.CubicDecimeters, CubicDecimetersTolerance);
                Assert.Equal(VolumeUnit.CubicDecimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 дм³", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.CubicDecimeters, CubicDecimetersTolerance);
                Assert.Equal(VolumeUnit.CubicDecimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 ft³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.CubicFeet, CubicFeetTolerance);
                Assert.Equal(VolumeUnit.CubicFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 фут³", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.CubicFeet, CubicFeetTolerance);
                Assert.Equal(VolumeUnit.CubicFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 hm³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.CubicHectometers, CubicHectometersTolerance);
                Assert.Equal(VolumeUnit.CubicHectometer, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 гм³", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.CubicHectometers, CubicHectometersTolerance);
                Assert.Equal(VolumeUnit.CubicHectometer, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 in³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.CubicInches, CubicInchesTolerance);
                Assert.Equal(VolumeUnit.CubicInch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 дюйм³", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.CubicInches, CubicInchesTolerance);
                Assert.Equal(VolumeUnit.CubicInch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 km³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.CubicKilometers, CubicKilometersTolerance);
                Assert.Equal(VolumeUnit.CubicKilometer, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 км³", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.CubicKilometers, CubicKilometersTolerance);
                Assert.Equal(VolumeUnit.CubicKilometer, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 m³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.CubicMeters, CubicMetersTolerance);
                Assert.Equal(VolumeUnit.CubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 м³", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.CubicMeters, CubicMetersTolerance);
                Assert.Equal(VolumeUnit.CubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 µm³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.CubicMicrometers, CubicMicrometersTolerance);
                Assert.Equal(VolumeUnit.CubicMicrometer, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 мкм³", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.CubicMicrometers, CubicMicrometersTolerance);
                Assert.Equal(VolumeUnit.CubicMicrometer, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 mi³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.CubicMiles, CubicMilesTolerance);
                Assert.Equal(VolumeUnit.CubicMile, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 миля³", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.CubicMiles, CubicMilesTolerance);
                Assert.Equal(VolumeUnit.CubicMile, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 mm³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.CubicMillimeters, CubicMillimetersTolerance);
                Assert.Equal(VolumeUnit.CubicMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 мм³", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.CubicMillimeters, CubicMillimetersTolerance);
                Assert.Equal(VolumeUnit.CubicMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 yd³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.CubicYards, CubicYardsTolerance);
                Assert.Equal(VolumeUnit.CubicYard, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 ярд³", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.CubicYards, CubicYardsTolerance);
                Assert.Equal(VolumeUnit.CubicYard, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 dal", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Decaliters, DecalitersTolerance);
                Assert.Equal(VolumeUnit.Decaliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 дал", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.Decaliters, DecalitersTolerance);
                Assert.Equal(VolumeUnit.Decaliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 dagal (U.S.)", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.DecausGallons, DecausGallonsTolerance);
                Assert.Equal(VolumeUnit.DecausGallon, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 даАмериканский галлон", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.DecausGallons, DecausGallonsTolerance);
                Assert.Equal(VolumeUnit.DecausGallon, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 dl", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Deciliters, DecilitersTolerance);
                Assert.Equal(VolumeUnit.Deciliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 дл", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.Deciliters, DecilitersTolerance);
                Assert.Equal(VolumeUnit.Deciliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 dgal (U.S.)", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.DeciusGallons, DeciusGallonsTolerance);
                Assert.Equal(VolumeUnit.DeciusGallon, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 дАмериканский галлон", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.DeciusGallons, DeciusGallonsTolerance);
                Assert.Equal(VolumeUnit.DeciusGallon, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 hft³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.HectocubicFeet, HectocubicFeetTolerance);
                Assert.Equal(VolumeUnit.HectocubicFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 гфут³", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.HectocubicFeet, HectocubicFeetTolerance);
                Assert.Equal(VolumeUnit.HectocubicFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 hm³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.HectocubicMeters, HectocubicMetersTolerance);
                Assert.Equal(VolumeUnit.HectocubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 гм³", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.HectocubicMeters, HectocubicMetersTolerance);
                Assert.Equal(VolumeUnit.HectocubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 hl", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Hectoliters, HectolitersTolerance);
                Assert.Equal(VolumeUnit.Hectoliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 гл", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.Hectoliters, HectolitersTolerance);
                Assert.Equal(VolumeUnit.Hectoliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 hgal (U.S.)", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.HectousGallons, HectousGallonsTolerance);
                Assert.Equal(VolumeUnit.HectousGallon, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 гАмериканский галлон", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.HectousGallons, HectousGallonsTolerance);
                Assert.Equal(VolumeUnit.HectousGallon, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 bl (imp.)", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.ImperialBeerBarrels, ImperialBeerBarrelsTolerance);
                Assert.Equal(VolumeUnit.ImperialBeerBarrel, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 gal (imp.)", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.ImperialGallons, ImperialGallonsTolerance);
                Assert.Equal(VolumeUnit.ImperialGallon, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 Английский галлон", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.ImperialGallons, ImperialGallonsTolerance);
                Assert.Equal(VolumeUnit.ImperialGallon, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 oz (imp.)", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.ImperialOunces, ImperialOuncesTolerance);
                Assert.Equal(VolumeUnit.ImperialOunce, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 Английская унция", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.ImperialOunces, ImperialOuncesTolerance);
                Assert.Equal(VolumeUnit.ImperialOunce, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 pt (imp.)", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.ImperialPints, ImperialPintsTolerance);
                Assert.Equal(VolumeUnit.ImperialPint, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 UK pt", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.ImperialPints, ImperialPintsTolerance);
                Assert.Equal(VolumeUnit.ImperialPint, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 pt", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.ImperialPints, ImperialPintsTolerance);
                Assert.Equal(VolumeUnit.ImperialPint, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 p", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.ImperialPints, ImperialPintsTolerance);
                Assert.Equal(VolumeUnit.ImperialPint, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 kft³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilocubicFeet, KilocubicFeetTolerance);
                Assert.Equal(VolumeUnit.KilocubicFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 кфут³", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.KilocubicFeet, KilocubicFeetTolerance);
                Assert.Equal(VolumeUnit.KilocubicFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 km³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilocubicMeters, KilocubicMetersTolerance);
                Assert.Equal(VolumeUnit.KilocubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 км³", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.KilocubicMeters, KilocubicMetersTolerance);
                Assert.Equal(VolumeUnit.KilocubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 kgal (imp.)", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KiloimperialGallons, KiloimperialGallonsTolerance);
                Assert.Equal(VolumeUnit.KiloimperialGallon, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 кАнглийский галлон", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.KiloimperialGallons, KiloimperialGallonsTolerance);
                Assert.Equal(VolumeUnit.KiloimperialGallon, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 kl", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Kiloliters, KilolitersTolerance);
                Assert.Equal(VolumeUnit.Kiloliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 кл", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.Kiloliters, KilolitersTolerance);
                Assert.Equal(VolumeUnit.Kiloliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 kgal (U.S.)", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilousGallons, KilousGallonsTolerance);
                Assert.Equal(VolumeUnit.KilousGallon, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 кАмериканский галлон", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.KilousGallons, KilousGallonsTolerance);
                Assert.Equal(VolumeUnit.KilousGallon, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 l", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Liters, LitersTolerance);
                Assert.Equal(VolumeUnit.Liter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 л", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.Liters, LitersTolerance);
                Assert.Equal(VolumeUnit.Liter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 Mft³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MegacubicFeet, MegacubicFeetTolerance);
                Assert.Equal(VolumeUnit.MegacubicFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 Мфут³", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.MegacubicFeet, MegacubicFeetTolerance);
                Assert.Equal(VolumeUnit.MegacubicFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 Mgal (imp.)", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MegaimperialGallons, MegaimperialGallonsTolerance);
                Assert.Equal(VolumeUnit.MegaimperialGallon, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 МАнглийский галлон", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.MegaimperialGallons, MegaimperialGallonsTolerance);
                Assert.Equal(VolumeUnit.MegaimperialGallon, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 Ml", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Megaliters, MegalitersTolerance);
                Assert.Equal(VolumeUnit.Megaliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 Мл", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.Megaliters, MegalitersTolerance);
                Assert.Equal(VolumeUnit.Megaliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 Mgal (U.S.)", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MegausGallons, MegausGallonsTolerance);
                Assert.Equal(VolumeUnit.MegausGallon, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 МАмериканский галлон", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.MegausGallons, MegausGallonsTolerance);
                Assert.Equal(VolumeUnit.MegausGallon, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 tsp", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MetricTeaspoons, MetricTeaspoonsTolerance);
                Assert.Equal(VolumeUnit.MetricTeaspoon, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 t", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MetricTeaspoons, MetricTeaspoonsTolerance);
                Assert.Equal(VolumeUnit.MetricTeaspoon, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 ts", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MetricTeaspoons, MetricTeaspoonsTolerance);
                Assert.Equal(VolumeUnit.MetricTeaspoon, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 tspn", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MetricTeaspoons, MetricTeaspoonsTolerance);
                Assert.Equal(VolumeUnit.MetricTeaspoon, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 t.", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MetricTeaspoons, MetricTeaspoonsTolerance);
                Assert.Equal(VolumeUnit.MetricTeaspoon, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 ts.", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MetricTeaspoons, MetricTeaspoonsTolerance);
                Assert.Equal(VolumeUnit.MetricTeaspoon, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 tsp.", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MetricTeaspoons, MetricTeaspoonsTolerance);
                Assert.Equal(VolumeUnit.MetricTeaspoon, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 tspn.", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MetricTeaspoons, MetricTeaspoonsTolerance);
                Assert.Equal(VolumeUnit.MetricTeaspoon, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 teaspoon", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MetricTeaspoons, MetricTeaspoonsTolerance);
                Assert.Equal(VolumeUnit.MetricTeaspoon, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 µl", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Microliters, MicrolitersTolerance);
                Assert.Equal(VolumeUnit.Microliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 мкл", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.Microliters, MicrolitersTolerance);
                Assert.Equal(VolumeUnit.Microliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 ml", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Milliliters, MillilitersTolerance);
                Assert.Equal(VolumeUnit.Milliliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 мл", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.Milliliters, MillilitersTolerance);
                Assert.Equal(VolumeUnit.Milliliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 bbl", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.OilBarrels, OilBarrelsTolerance);
                Assert.Equal(VolumeUnit.OilBarrel, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 bl (U.S.)", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.UsBeerBarrels, UsBeerBarrelsTolerance);
                Assert.Equal(VolumeUnit.UsBeerBarrel, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 gal (U.S.)", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.UsGallons, UsGallonsTolerance);
                Assert.Equal(VolumeUnit.UsGallon, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 Американский галлон", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.UsGallons, UsGallonsTolerance);
                Assert.Equal(VolumeUnit.UsGallon, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 oz (U.S.)", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.UsOunces, UsOuncesTolerance);
                Assert.Equal(VolumeUnit.UsOunce, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 Американская унция", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.UsOunces, UsOuncesTolerance);
                Assert.Equal(VolumeUnit.UsOunce, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 pt (U.S.)", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.UsPints, UsPintsTolerance);
                Assert.Equal(VolumeUnit.UsPint, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Volume.Parse("1 qt (U.S.)", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.UsQuarts, UsQuartsTolerance);
                Assert.Equal(VolumeUnit.UsQuart, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParse()
        {
            {
                Assert.True(Volume.TryParse("1 ac-ft", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.AcreFeet, AcreFeetTolerance);
                Assert.Equal(VolumeUnit.AcreFoot, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 acre-foot", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.AcreFeet, AcreFeetTolerance);
                Assert.Equal(VolumeUnit.AcreFoot, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 acre-feet", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.AcreFeet, AcreFeetTolerance);
                Assert.Equal(VolumeUnit.AcreFoot, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 bf", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.BoardFeet, BoardFeetTolerance);
                Assert.Equal(VolumeUnit.BoardFoot, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 board foot", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.BoardFeet, BoardFeetTolerance);
                Assert.Equal(VolumeUnit.BoardFoot, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 board feet", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.BoardFeet, BoardFeetTolerance);
                Assert.Equal(VolumeUnit.BoardFoot, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 pmp", CultureInfo.GetCultureInfo("fr-CA"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.BoardFeet, BoardFeetTolerance);
                Assert.Equal(VolumeUnit.BoardFoot, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 pied-planche", CultureInfo.GetCultureInfo("fr-CA"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.BoardFeet, BoardFeetTolerance);
                Assert.Equal(VolumeUnit.BoardFoot, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 pied de planche", CultureInfo.GetCultureInfo("fr-CA"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.BoardFeet, BoardFeetTolerance);
                Assert.Equal(VolumeUnit.BoardFoot, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 cl", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Centiliters, CentilitersTolerance);
                Assert.Equal(VolumeUnit.Centiliter, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 сл", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Centiliters, CentilitersTolerance);
                Assert.Equal(VolumeUnit.Centiliter, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 cm³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.CubicCentimeters, CubicCentimetersTolerance);
                Assert.Equal(VolumeUnit.CubicCentimeter, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 см³", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.CubicCentimeters, CubicCentimetersTolerance);
                Assert.Equal(VolumeUnit.CubicCentimeter, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 dm³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.CubicDecimeters, CubicDecimetersTolerance);
                Assert.Equal(VolumeUnit.CubicDecimeter, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 дм³", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.CubicDecimeters, CubicDecimetersTolerance);
                Assert.Equal(VolumeUnit.CubicDecimeter, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 ft³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.CubicFeet, CubicFeetTolerance);
                Assert.Equal(VolumeUnit.CubicFoot, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 фут³", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.CubicFeet, CubicFeetTolerance);
                Assert.Equal(VolumeUnit.CubicFoot, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 in³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.CubicInches, CubicInchesTolerance);
                Assert.Equal(VolumeUnit.CubicInch, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 дюйм³", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.CubicInches, CubicInchesTolerance);
                Assert.Equal(VolumeUnit.CubicInch, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 m³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.CubicMeters, CubicMetersTolerance);
                Assert.Equal(VolumeUnit.CubicMeter, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 м³", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.CubicMeters, CubicMetersTolerance);
                Assert.Equal(VolumeUnit.CubicMeter, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 µm³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.CubicMicrometers, CubicMicrometersTolerance);
                Assert.Equal(VolumeUnit.CubicMicrometer, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 мкм³", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.CubicMicrometers, CubicMicrometersTolerance);
                Assert.Equal(VolumeUnit.CubicMicrometer, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 mi³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.CubicMiles, CubicMilesTolerance);
                Assert.Equal(VolumeUnit.CubicMile, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 миля³", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.CubicMiles, CubicMilesTolerance);
                Assert.Equal(VolumeUnit.CubicMile, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 mm³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.CubicMillimeters, CubicMillimetersTolerance);
                Assert.Equal(VolumeUnit.CubicMillimeter, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 мм³", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.CubicMillimeters, CubicMillimetersTolerance);
                Assert.Equal(VolumeUnit.CubicMillimeter, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 yd³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.CubicYards, CubicYardsTolerance);
                Assert.Equal(VolumeUnit.CubicYard, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 ярд³", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.CubicYards, CubicYardsTolerance);
                Assert.Equal(VolumeUnit.CubicYard, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 dal", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Decaliters, DecalitersTolerance);
                Assert.Equal(VolumeUnit.Decaliter, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 дал", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Decaliters, DecalitersTolerance);
                Assert.Equal(VolumeUnit.Decaliter, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 dagal (U.S.)", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DecausGallons, DecausGallonsTolerance);
                Assert.Equal(VolumeUnit.DecausGallon, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 даАмериканский галлон", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DecausGallons, DecausGallonsTolerance);
                Assert.Equal(VolumeUnit.DecausGallon, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 dl", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Deciliters, DecilitersTolerance);
                Assert.Equal(VolumeUnit.Deciliter, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 дл", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Deciliters, DecilitersTolerance);
                Assert.Equal(VolumeUnit.Deciliter, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 dgal (U.S.)", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DeciusGallons, DeciusGallonsTolerance);
                Assert.Equal(VolumeUnit.DeciusGallon, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 дАмериканский галлон", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DeciusGallons, DeciusGallonsTolerance);
                Assert.Equal(VolumeUnit.DeciusGallon, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 hft³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.HectocubicFeet, HectocubicFeetTolerance);
                Assert.Equal(VolumeUnit.HectocubicFoot, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 гфут³", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.HectocubicFeet, HectocubicFeetTolerance);
                Assert.Equal(VolumeUnit.HectocubicFoot, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 hl", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Hectoliters, HectolitersTolerance);
                Assert.Equal(VolumeUnit.Hectoliter, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 гл", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Hectoliters, HectolitersTolerance);
                Assert.Equal(VolumeUnit.Hectoliter, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 hgal (U.S.)", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.HectousGallons, HectousGallonsTolerance);
                Assert.Equal(VolumeUnit.HectousGallon, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 гАмериканский галлон", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.HectousGallons, HectousGallonsTolerance);
                Assert.Equal(VolumeUnit.HectousGallon, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 bl (imp.)", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.ImperialBeerBarrels, ImperialBeerBarrelsTolerance);
                Assert.Equal(VolumeUnit.ImperialBeerBarrel, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 gal (imp.)", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.ImperialGallons, ImperialGallonsTolerance);
                Assert.Equal(VolumeUnit.ImperialGallon, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 Английский галлон", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.ImperialGallons, ImperialGallonsTolerance);
                Assert.Equal(VolumeUnit.ImperialGallon, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 oz (imp.)", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.ImperialOunces, ImperialOuncesTolerance);
                Assert.Equal(VolumeUnit.ImperialOunce, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 Английская унция", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.ImperialOunces, ImperialOuncesTolerance);
                Assert.Equal(VolumeUnit.ImperialOunce, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 pt (imp.)", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.ImperialPints, ImperialPintsTolerance);
                Assert.Equal(VolumeUnit.ImperialPint, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 UK pt", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.ImperialPints, ImperialPintsTolerance);
                Assert.Equal(VolumeUnit.ImperialPint, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 pt", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.ImperialPints, ImperialPintsTolerance);
                Assert.Equal(VolumeUnit.ImperialPint, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 p", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.ImperialPints, ImperialPintsTolerance);
                Assert.Equal(VolumeUnit.ImperialPint, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 kft³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilocubicFeet, KilocubicFeetTolerance);
                Assert.Equal(VolumeUnit.KilocubicFoot, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 кфут³", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilocubicFeet, KilocubicFeetTolerance);
                Assert.Equal(VolumeUnit.KilocubicFoot, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 kgal (imp.)", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KiloimperialGallons, KiloimperialGallonsTolerance);
                Assert.Equal(VolumeUnit.KiloimperialGallon, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 кАнглийский галлон", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KiloimperialGallons, KiloimperialGallonsTolerance);
                Assert.Equal(VolumeUnit.KiloimperialGallon, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 kl", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Kiloliters, KilolitersTolerance);
                Assert.Equal(VolumeUnit.Kiloliter, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 кл", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Kiloliters, KilolitersTolerance);
                Assert.Equal(VolumeUnit.Kiloliter, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 kgal (U.S.)", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilousGallons, KilousGallonsTolerance);
                Assert.Equal(VolumeUnit.KilousGallon, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 кАмериканский галлон", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilousGallons, KilousGallonsTolerance);
                Assert.Equal(VolumeUnit.KilousGallon, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 l", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Liters, LitersTolerance);
                Assert.Equal(VolumeUnit.Liter, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 л", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Liters, LitersTolerance);
                Assert.Equal(VolumeUnit.Liter, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 Mft³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MegacubicFeet, MegacubicFeetTolerance);
                Assert.Equal(VolumeUnit.MegacubicFoot, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 Мфут³", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MegacubicFeet, MegacubicFeetTolerance);
                Assert.Equal(VolumeUnit.MegacubicFoot, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 Mgal (imp.)", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MegaimperialGallons, MegaimperialGallonsTolerance);
                Assert.Equal(VolumeUnit.MegaimperialGallon, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 МАнглийский галлон", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MegaimperialGallons, MegaimperialGallonsTolerance);
                Assert.Equal(VolumeUnit.MegaimperialGallon, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 Mgal (U.S.)", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MegausGallons, MegausGallonsTolerance);
                Assert.Equal(VolumeUnit.MegausGallon, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 МАмериканский галлон", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MegausGallons, MegausGallonsTolerance);
                Assert.Equal(VolumeUnit.MegausGallon, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 tsp", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MetricTeaspoons, MetricTeaspoonsTolerance);
                Assert.Equal(VolumeUnit.MetricTeaspoon, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 t", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MetricTeaspoons, MetricTeaspoonsTolerance);
                Assert.Equal(VolumeUnit.MetricTeaspoon, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 ts", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MetricTeaspoons, MetricTeaspoonsTolerance);
                Assert.Equal(VolumeUnit.MetricTeaspoon, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 tspn", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MetricTeaspoons, MetricTeaspoonsTolerance);
                Assert.Equal(VolumeUnit.MetricTeaspoon, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 t.", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MetricTeaspoons, MetricTeaspoonsTolerance);
                Assert.Equal(VolumeUnit.MetricTeaspoon, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 ts.", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MetricTeaspoons, MetricTeaspoonsTolerance);
                Assert.Equal(VolumeUnit.MetricTeaspoon, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 tsp.", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MetricTeaspoons, MetricTeaspoonsTolerance);
                Assert.Equal(VolumeUnit.MetricTeaspoon, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 tspn.", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MetricTeaspoons, MetricTeaspoonsTolerance);
                Assert.Equal(VolumeUnit.MetricTeaspoon, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 teaspoon", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MetricTeaspoons, MetricTeaspoonsTolerance);
                Assert.Equal(VolumeUnit.MetricTeaspoon, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 µl", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Microliters, MicrolitersTolerance);
                Assert.Equal(VolumeUnit.Microliter, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 мкл", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Microliters, MicrolitersTolerance);
                Assert.Equal(VolumeUnit.Microliter, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 bbl", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.OilBarrels, OilBarrelsTolerance);
                Assert.Equal(VolumeUnit.OilBarrel, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 bl (U.S.)", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.UsBeerBarrels, UsBeerBarrelsTolerance);
                Assert.Equal(VolumeUnit.UsBeerBarrel, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 gal (U.S.)", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.UsGallons, UsGallonsTolerance);
                Assert.Equal(VolumeUnit.UsGallon, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 Американский галлон", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.UsGallons, UsGallonsTolerance);
                Assert.Equal(VolumeUnit.UsGallon, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 oz (U.S.)", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.UsOunces, UsOuncesTolerance);
                Assert.Equal(VolumeUnit.UsOunce, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 Американская унция", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.UsOunces, UsOuncesTolerance);
                Assert.Equal(VolumeUnit.UsOunce, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 pt (U.S.)", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.UsPints, UsPintsTolerance);
                Assert.Equal(VolumeUnit.UsPint, parsed.Unit);
            }

            {
                Assert.True(Volume.TryParse("1 qt (U.S.)", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.UsQuarts, UsQuartsTolerance);
                Assert.Equal(VolumeUnit.UsQuart, parsed.Unit);
            }

        }

        [Fact]
        public void ParseUnit()
        {
            try
            {
                var parsedUnit = Volume.ParseUnit("ac-ft", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.AcreFoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("acre-foot", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.AcreFoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("acre-feet", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.AcreFoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("bf", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.BoardFoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("board foot", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.BoardFoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("board feet", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.BoardFoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("pmp", CultureInfo.GetCultureInfo("fr-CA"));
                Assert.Equal(VolumeUnit.BoardFoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("pied-planche", CultureInfo.GetCultureInfo("fr-CA"));
                Assert.Equal(VolumeUnit.BoardFoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("pied de planche", CultureInfo.GetCultureInfo("fr-CA"));
                Assert.Equal(VolumeUnit.BoardFoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("cl", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.Centiliter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("сл", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(VolumeUnit.Centiliter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("cm³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.CubicCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("см³", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(VolumeUnit.CubicCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("dm³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.CubicDecimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("дм³", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(VolumeUnit.CubicDecimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("ft³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.CubicFoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("фут³", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(VolumeUnit.CubicFoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("hm³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.CubicHectometer, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("гм³", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(VolumeUnit.CubicHectometer, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("in³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.CubicInch, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("дюйм³", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(VolumeUnit.CubicInch, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("km³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.CubicKilometer, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("км³", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(VolumeUnit.CubicKilometer, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("m³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.CubicMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("м³", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(VolumeUnit.CubicMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("µm³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.CubicMicrometer, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("мкм³", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(VolumeUnit.CubicMicrometer, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("mi³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.CubicMile, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("миля³", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(VolumeUnit.CubicMile, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("mm³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.CubicMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("мм³", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(VolumeUnit.CubicMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("yd³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.CubicYard, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("ярд³", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(VolumeUnit.CubicYard, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("dal", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.Decaliter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("дал", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(VolumeUnit.Decaliter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("dagal (U.S.)", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.DecausGallon, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("даАмериканский галлон", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(VolumeUnit.DecausGallon, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("dl", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.Deciliter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("дл", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(VolumeUnit.Deciliter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("dgal (U.S.)", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.DeciusGallon, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("дАмериканский галлон", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(VolumeUnit.DeciusGallon, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("hft³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.HectocubicFoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("гфут³", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(VolumeUnit.HectocubicFoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("hm³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.HectocubicMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("гм³", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(VolumeUnit.HectocubicMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("hl", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.Hectoliter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("гл", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(VolumeUnit.Hectoliter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("hgal (U.S.)", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.HectousGallon, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("гАмериканский галлон", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(VolumeUnit.HectousGallon, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("bl (imp.)", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.ImperialBeerBarrel, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("gal (imp.)", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.ImperialGallon, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("Английский галлон", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(VolumeUnit.ImperialGallon, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("oz (imp.)", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.ImperialOunce, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("Английская унция", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(VolumeUnit.ImperialOunce, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("pt (imp.)", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.ImperialPint, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("UK pt", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.ImperialPint, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("pt", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.ImperialPint, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("p", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.ImperialPint, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("kft³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.KilocubicFoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("кфут³", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(VolumeUnit.KilocubicFoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("km³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.KilocubicMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("км³", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(VolumeUnit.KilocubicMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("kgal (imp.)", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.KiloimperialGallon, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("кАнглийский галлон", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(VolumeUnit.KiloimperialGallon, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("kl", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.Kiloliter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("кл", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(VolumeUnit.Kiloliter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("kgal (U.S.)", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.KilousGallon, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("кАмериканский галлон", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(VolumeUnit.KilousGallon, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("l", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.Liter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("л", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(VolumeUnit.Liter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("Mft³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.MegacubicFoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("Мфут³", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(VolumeUnit.MegacubicFoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("Mgal (imp.)", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.MegaimperialGallon, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("МАнглийский галлон", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(VolumeUnit.MegaimperialGallon, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("Ml", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.Megaliter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("Мл", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(VolumeUnit.Megaliter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("Mgal (U.S.)", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.MegausGallon, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("МАмериканский галлон", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(VolumeUnit.MegausGallon, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("tsp", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.MetricTeaspoon, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("t", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.MetricTeaspoon, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("ts", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.MetricTeaspoon, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("tspn", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.MetricTeaspoon, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("t.", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.MetricTeaspoon, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("ts.", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.MetricTeaspoon, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("tsp.", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.MetricTeaspoon, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("tspn.", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.MetricTeaspoon, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("teaspoon", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.MetricTeaspoon, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("µl", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.Microliter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("мкл", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(VolumeUnit.Microliter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("ml", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.Milliliter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("мл", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(VolumeUnit.Milliliter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("bbl", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.OilBarrel, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("bl (U.S.)", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.UsBeerBarrel, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("gal (U.S.)", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.UsGallon, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("Американский галлон", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(VolumeUnit.UsGallon, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("oz (U.S.)", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.UsOunce, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("Американская унция", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(VolumeUnit.UsOunce, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("pt (U.S.)", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.UsPint, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Volume.ParseUnit("qt (U.S.)", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeUnit.UsQuart, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParseUnit()
        {
            {
                Assert.True(Volume.TryParseUnit("ac-ft", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.AcreFoot, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("acre-foot", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.AcreFoot, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("acre-feet", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.AcreFoot, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("bf", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.BoardFoot, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("board foot", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.BoardFoot, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("board feet", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.BoardFoot, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("pmp", CultureInfo.GetCultureInfo("fr-CA"), out var parsedUnit));
                Assert.Equal(VolumeUnit.BoardFoot, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("pied-planche", CultureInfo.GetCultureInfo("fr-CA"), out var parsedUnit));
                Assert.Equal(VolumeUnit.BoardFoot, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("pied de planche", CultureInfo.GetCultureInfo("fr-CA"), out var parsedUnit));
                Assert.Equal(VolumeUnit.BoardFoot, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("cl", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.Centiliter, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("сл", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(VolumeUnit.Centiliter, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("cm³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.CubicCentimeter, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("см³", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(VolumeUnit.CubicCentimeter, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("dm³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.CubicDecimeter, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("дм³", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(VolumeUnit.CubicDecimeter, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("ft³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.CubicFoot, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("фут³", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(VolumeUnit.CubicFoot, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("in³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.CubicInch, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("дюйм³", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(VolumeUnit.CubicInch, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("m³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.CubicMeter, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("м³", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(VolumeUnit.CubicMeter, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("µm³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.CubicMicrometer, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("мкм³", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(VolumeUnit.CubicMicrometer, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("mi³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.CubicMile, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("миля³", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(VolumeUnit.CubicMile, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("mm³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.CubicMillimeter, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("мм³", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(VolumeUnit.CubicMillimeter, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("yd³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.CubicYard, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("ярд³", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(VolumeUnit.CubicYard, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("dal", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.Decaliter, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("дал", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(VolumeUnit.Decaliter, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("dagal (U.S.)", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.DecausGallon, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("даАмериканский галлон", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(VolumeUnit.DecausGallon, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("dl", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.Deciliter, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("дл", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(VolumeUnit.Deciliter, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("dgal (U.S.)", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.DeciusGallon, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("дАмериканский галлон", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(VolumeUnit.DeciusGallon, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("hft³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.HectocubicFoot, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("гфут³", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(VolumeUnit.HectocubicFoot, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("hl", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.Hectoliter, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("гл", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(VolumeUnit.Hectoliter, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("hgal (U.S.)", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.HectousGallon, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("гАмериканский галлон", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(VolumeUnit.HectousGallon, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("bl (imp.)", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.ImperialBeerBarrel, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("gal (imp.)", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.ImperialGallon, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("Английский галлон", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(VolumeUnit.ImperialGallon, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("oz (imp.)", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.ImperialOunce, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("Английская унция", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(VolumeUnit.ImperialOunce, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("pt (imp.)", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.ImperialPint, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("UK pt", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.ImperialPint, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("pt", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.ImperialPint, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("p", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.ImperialPint, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("kft³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.KilocubicFoot, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("кфут³", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(VolumeUnit.KilocubicFoot, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("kgal (imp.)", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.KiloimperialGallon, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("кАнглийский галлон", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(VolumeUnit.KiloimperialGallon, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("kl", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.Kiloliter, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("кл", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(VolumeUnit.Kiloliter, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("kgal (U.S.)", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.KilousGallon, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("кАмериканский галлон", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(VolumeUnit.KilousGallon, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("l", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.Liter, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("л", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(VolumeUnit.Liter, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("Mft³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.MegacubicFoot, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("Мфут³", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(VolumeUnit.MegacubicFoot, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("Mgal (imp.)", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.MegaimperialGallon, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("МАнглийский галлон", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(VolumeUnit.MegaimperialGallon, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("Mgal (U.S.)", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.MegausGallon, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("МАмериканский галлон", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(VolumeUnit.MegausGallon, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("tsp", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.MetricTeaspoon, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("t", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.MetricTeaspoon, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("ts", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.MetricTeaspoon, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("tspn", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.MetricTeaspoon, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("t.", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.MetricTeaspoon, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("ts.", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.MetricTeaspoon, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("tsp.", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.MetricTeaspoon, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("tspn.", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.MetricTeaspoon, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("teaspoon", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.MetricTeaspoon, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("µl", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.Microliter, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("мкл", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(VolumeUnit.Microliter, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("bbl", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.OilBarrel, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("bl (U.S.)", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.UsBeerBarrel, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("gal (U.S.)", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.UsGallon, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("Американский галлон", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(VolumeUnit.UsGallon, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("oz (U.S.)", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.UsOunce, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("Американская унция", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(VolumeUnit.UsOunce, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("pt (U.S.)", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.UsPint, parsedUnit);
            }

            {
                Assert.True(Volume.TryParseUnit("qt (U.S.)", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeUnit.UsQuart, parsedUnit);
            }

        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(VolumeUnit unit)
        {
            var inBaseUnits = Volume.From(1.0, Volume.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, (double)converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(VolumeUnit unit)
        {
            var quantity = Volume.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(VolumeUnit unit)
        {
            // See if there is a unit available that is not the base unit.
            var fromUnit = Volume.Units.FirstOrDefault(u => u != Volume.BaseUnit && u != VolumeUnit.Undefined);

            // If there is only one unit for the quantity, we must use the base unit.
            if (fromUnit == VolumeUnit.Undefined)
                fromUnit = Volume.BaseUnit;

            var quantity = Volume.From(3.0, fromUnit);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Volume cubicmeter = Volume.FromCubicMeters(1);
            AssertEx.EqualTolerance(1, Volume.FromAcreFeet(cubicmeter.AcreFeet).CubicMeters, AcreFeetTolerance);
            AssertEx.EqualTolerance(1, Volume.FromAuTablespoons(cubicmeter.AuTablespoons).CubicMeters, AuTablespoonsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromBoardFeet(cubicmeter.BoardFeet).CubicMeters, BoardFeetTolerance);
            AssertEx.EqualTolerance(1, Volume.FromCentiliters(cubicmeter.Centiliters).CubicMeters, CentilitersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromCubicCentimeters(cubicmeter.CubicCentimeters).CubicMeters, CubicCentimetersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromCubicDecimeters(cubicmeter.CubicDecimeters).CubicMeters, CubicDecimetersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromCubicFeet(cubicmeter.CubicFeet).CubicMeters, CubicFeetTolerance);
            AssertEx.EqualTolerance(1, Volume.FromCubicHectometers(cubicmeter.CubicHectometers).CubicMeters, CubicHectometersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromCubicInches(cubicmeter.CubicInches).CubicMeters, CubicInchesTolerance);
            AssertEx.EqualTolerance(1, Volume.FromCubicKilometers(cubicmeter.CubicKilometers).CubicMeters, CubicKilometersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromCubicMeters(cubicmeter.CubicMeters).CubicMeters, CubicMetersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromCubicMicrometers(cubicmeter.CubicMicrometers).CubicMeters, CubicMicrometersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromCubicMiles(cubicmeter.CubicMiles).CubicMeters, CubicMilesTolerance);
            AssertEx.EqualTolerance(1, Volume.FromCubicMillimeters(cubicmeter.CubicMillimeters).CubicMeters, CubicMillimetersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromCubicYards(cubicmeter.CubicYards).CubicMeters, CubicYardsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromDecaliters(cubicmeter.Decaliters).CubicMeters, DecalitersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromDecausGallons(cubicmeter.DecausGallons).CubicMeters, DecausGallonsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromDeciliters(cubicmeter.Deciliters).CubicMeters, DecilitersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromDeciusGallons(cubicmeter.DeciusGallons).CubicMeters, DeciusGallonsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromHectocubicFeet(cubicmeter.HectocubicFeet).CubicMeters, HectocubicFeetTolerance);
            AssertEx.EqualTolerance(1, Volume.FromHectocubicMeters(cubicmeter.HectocubicMeters).CubicMeters, HectocubicMetersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromHectoliters(cubicmeter.Hectoliters).CubicMeters, HectolitersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromHectousGallons(cubicmeter.HectousGallons).CubicMeters, HectousGallonsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromImperialBeerBarrels(cubicmeter.ImperialBeerBarrels).CubicMeters, ImperialBeerBarrelsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromImperialGallons(cubicmeter.ImperialGallons).CubicMeters, ImperialGallonsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromImperialOunces(cubicmeter.ImperialOunces).CubicMeters, ImperialOuncesTolerance);
            AssertEx.EqualTolerance(1, Volume.FromImperialPints(cubicmeter.ImperialPints).CubicMeters, ImperialPintsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromKilocubicFeet(cubicmeter.KilocubicFeet).CubicMeters, KilocubicFeetTolerance);
            AssertEx.EqualTolerance(1, Volume.FromKilocubicMeters(cubicmeter.KilocubicMeters).CubicMeters, KilocubicMetersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromKiloimperialGallons(cubicmeter.KiloimperialGallons).CubicMeters, KiloimperialGallonsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromKiloliters(cubicmeter.Kiloliters).CubicMeters, KilolitersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromKilousGallons(cubicmeter.KilousGallons).CubicMeters, KilousGallonsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromLiters(cubicmeter.Liters).CubicMeters, LitersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromMegacubicFeet(cubicmeter.MegacubicFeet).CubicMeters, MegacubicFeetTolerance);
            AssertEx.EqualTolerance(1, Volume.FromMegaimperialGallons(cubicmeter.MegaimperialGallons).CubicMeters, MegaimperialGallonsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromMegaliters(cubicmeter.Megaliters).CubicMeters, MegalitersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromMegausGallons(cubicmeter.MegausGallons).CubicMeters, MegausGallonsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromMetricCups(cubicmeter.MetricCups).CubicMeters, MetricCupsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromMetricTeaspoons(cubicmeter.MetricTeaspoons).CubicMeters, MetricTeaspoonsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromMicroliters(cubicmeter.Microliters).CubicMeters, MicrolitersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromMilliliters(cubicmeter.Milliliters).CubicMeters, MillilitersTolerance);
            AssertEx.EqualTolerance(1, Volume.FromOilBarrels(cubicmeter.OilBarrels).CubicMeters, OilBarrelsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromUkTablespoons(cubicmeter.UkTablespoons).CubicMeters, UkTablespoonsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromUsBeerBarrels(cubicmeter.UsBeerBarrels).CubicMeters, UsBeerBarrelsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromUsCustomaryCups(cubicmeter.UsCustomaryCups).CubicMeters, UsCustomaryCupsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromUsGallons(cubicmeter.UsGallons).CubicMeters, UsGallonsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromUsLegalCups(cubicmeter.UsLegalCups).CubicMeters, UsLegalCupsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromUsOunces(cubicmeter.UsOunces).CubicMeters, UsOuncesTolerance);
            AssertEx.EqualTolerance(1, Volume.FromUsPints(cubicmeter.UsPints).CubicMeters, UsPintsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromUsQuarts(cubicmeter.UsQuarts).CubicMeters, UsQuartsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromUsTablespoons(cubicmeter.UsTablespoons).CubicMeters, UsTablespoonsTolerance);
            AssertEx.EqualTolerance(1, Volume.FromUsTeaspoons(cubicmeter.UsTeaspoons).CubicMeters, UsTeaspoonsTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Volume v = Volume.FromCubicMeters(1);
            AssertEx.EqualTolerance(-1, -v.CubicMeters, CubicMetersTolerance);
            AssertEx.EqualTolerance(2, (Volume.FromCubicMeters(3)-v).CubicMeters, CubicMetersTolerance);
            AssertEx.EqualTolerance(2, (v + v).CubicMeters, CubicMetersTolerance);
            AssertEx.EqualTolerance(10, (v*10).CubicMeters, CubicMetersTolerance);
            AssertEx.EqualTolerance(10, (10*v).CubicMeters, CubicMetersTolerance);
            AssertEx.EqualTolerance(2, (Volume.FromCubicMeters(10)/5).CubicMeters, CubicMetersTolerance);
            AssertEx.EqualTolerance(2, Volume.FromCubicMeters(10)/Volume.FromCubicMeters(5), CubicMetersTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            Volume oneCubicMeter = Volume.FromCubicMeters(1);
            Volume twoCubicMeters = Volume.FromCubicMeters(2);

            Assert.True(oneCubicMeter < twoCubicMeters);
            Assert.True(oneCubicMeter <= twoCubicMeters);
            Assert.True(twoCubicMeters > oneCubicMeter);
            Assert.True(twoCubicMeters >= oneCubicMeter);

            Assert.False(oneCubicMeter > twoCubicMeters);
            Assert.False(oneCubicMeter >= twoCubicMeters);
            Assert.False(twoCubicMeters < oneCubicMeter);
            Assert.False(twoCubicMeters <= oneCubicMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Volume cubicmeter = Volume.FromCubicMeters(1);
            Assert.Equal(0, cubicmeter.CompareTo(cubicmeter));
            Assert.True(cubicmeter.CompareTo(Volume.Zero) > 0);
            Assert.True(Volume.Zero.CompareTo(cubicmeter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Volume cubicmeter = Volume.FromCubicMeters(1);
            Assert.Throws<ArgumentException>(() => cubicmeter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Volume cubicmeter = Volume.FromCubicMeters(1);
            Assert.Throws<ArgumentNullException>(() => cubicmeter.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = Volume.FromCubicMeters(1);
            var b = Volume.FromCubicMeters(2);

#pragma warning disable CS8073
// ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
#pragma warning restore CS8073
        }

        [Fact]
        public void Equals_SameType_IsImplemented()
        {
            var a = Volume.FromCubicMeters(1);
            var b = Volume.FromCubicMeters(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
        }

        [Fact]
        public void Equals_QuantityAsObject_IsImplemented()
        {
            object a = Volume.FromCubicMeters(1);
            object b = Volume.FromCubicMeters(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals((object)null));
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = Volume.FromCubicMeters(1);
            Assert.True(v.Equals(Volume.FromCubicMeters(1), CubicMetersTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(Volume.Zero, CubicMetersTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = Volume.FromCubicMeters(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(Volume.FromCubicMeters(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Volume cubicmeter = Volume.FromCubicMeters(1);
            Assert.False(cubicmeter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Volume cubicmeter = Volume.FromCubicMeters(1);
            Assert.False(cubicmeter.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(VolumeUnit.Undefined, Volume.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(VolumeUnit)).Cast<VolumeUnit>();
            foreach(var unit in units)
            {
                if (unit == VolumeUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Volume.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentUICulture;
            Thread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 ac-ft", new Volume(1, VolumeUnit.AcreFoot).ToString());
                Assert.Equal("1", new Volume(1, VolumeUnit.AuTablespoon).ToString());
                Assert.Equal("1 bf", new Volume(1, VolumeUnit.BoardFoot).ToString());
                Assert.Equal("1 cl", new Volume(1, VolumeUnit.Centiliter).ToString());
                Assert.Equal("1 cm³", new Volume(1, VolumeUnit.CubicCentimeter).ToString());
                Assert.Equal("1 dm³", new Volume(1, VolumeUnit.CubicDecimeter).ToString());
                Assert.Equal("1 ft³", new Volume(1, VolumeUnit.CubicFoot).ToString());
                Assert.Equal("1 hm³", new Volume(1, VolumeUnit.CubicHectometer).ToString());
                Assert.Equal("1 in³", new Volume(1, VolumeUnit.CubicInch).ToString());
                Assert.Equal("1 km³", new Volume(1, VolumeUnit.CubicKilometer).ToString());
                Assert.Equal("1 m³", new Volume(1, VolumeUnit.CubicMeter).ToString());
                Assert.Equal("1 µm³", new Volume(1, VolumeUnit.CubicMicrometer).ToString());
                Assert.Equal("1 mi³", new Volume(1, VolumeUnit.CubicMile).ToString());
                Assert.Equal("1 mm³", new Volume(1, VolumeUnit.CubicMillimeter).ToString());
                Assert.Equal("1 yd³", new Volume(1, VolumeUnit.CubicYard).ToString());
                Assert.Equal("1 dal", new Volume(1, VolumeUnit.Decaliter).ToString());
                Assert.Equal("1 dagal (U.S.)", new Volume(1, VolumeUnit.DecausGallon).ToString());
                Assert.Equal("1 dl", new Volume(1, VolumeUnit.Deciliter).ToString());
                Assert.Equal("1 dgal (U.S.)", new Volume(1, VolumeUnit.DeciusGallon).ToString());
                Assert.Equal("1 hft³", new Volume(1, VolumeUnit.HectocubicFoot).ToString());
                Assert.Equal("1 hm³", new Volume(1, VolumeUnit.HectocubicMeter).ToString());
                Assert.Equal("1 hl", new Volume(1, VolumeUnit.Hectoliter).ToString());
                Assert.Equal("1 hgal (U.S.)", new Volume(1, VolumeUnit.HectousGallon).ToString());
                Assert.Equal("1 bl (imp.)", new Volume(1, VolumeUnit.ImperialBeerBarrel).ToString());
                Assert.Equal("1 gal (imp.)", new Volume(1, VolumeUnit.ImperialGallon).ToString());
                Assert.Equal("1 oz (imp.)", new Volume(1, VolumeUnit.ImperialOunce).ToString());
                Assert.Equal("1 pt (imp.)", new Volume(1, VolumeUnit.ImperialPint).ToString());
                Assert.Equal("1 kft³", new Volume(1, VolumeUnit.KilocubicFoot).ToString());
                Assert.Equal("1 km³", new Volume(1, VolumeUnit.KilocubicMeter).ToString());
                Assert.Equal("1 kgal (imp.)", new Volume(1, VolumeUnit.KiloimperialGallon).ToString());
                Assert.Equal("1 kl", new Volume(1, VolumeUnit.Kiloliter).ToString());
                Assert.Equal("1 kgal (U.S.)", new Volume(1, VolumeUnit.KilousGallon).ToString());
                Assert.Equal("1 l", new Volume(1, VolumeUnit.Liter).ToString());
                Assert.Equal("1 Mft³", new Volume(1, VolumeUnit.MegacubicFoot).ToString());
                Assert.Equal("1 Mgal (imp.)", new Volume(1, VolumeUnit.MegaimperialGallon).ToString());
                Assert.Equal("1 Ml", new Volume(1, VolumeUnit.Megaliter).ToString());
                Assert.Equal("1 Mgal (U.S.)", new Volume(1, VolumeUnit.MegausGallon).ToString());
                Assert.Equal("1", new Volume(1, VolumeUnit.MetricCup).ToString());
                Assert.Equal("1 tsp", new Volume(1, VolumeUnit.MetricTeaspoon).ToString());
                Assert.Equal("1 µl", new Volume(1, VolumeUnit.Microliter).ToString());
                Assert.Equal("1 ml", new Volume(1, VolumeUnit.Milliliter).ToString());
                Assert.Equal("1 bbl", new Volume(1, VolumeUnit.OilBarrel).ToString());
                Assert.Equal("1", new Volume(1, VolumeUnit.UkTablespoon).ToString());
                Assert.Equal("1 bl (U.S.)", new Volume(1, VolumeUnit.UsBeerBarrel).ToString());
                Assert.Equal("1", new Volume(1, VolumeUnit.UsCustomaryCup).ToString());
                Assert.Equal("1 gal (U.S.)", new Volume(1, VolumeUnit.UsGallon).ToString());
                Assert.Equal("1", new Volume(1, VolumeUnit.UsLegalCup).ToString());
                Assert.Equal("1 oz (U.S.)", new Volume(1, VolumeUnit.UsOunce).ToString());
                Assert.Equal("1 pt (U.S.)", new Volume(1, VolumeUnit.UsPint).ToString());
                Assert.Equal("1 qt (U.S.)", new Volume(1, VolumeUnit.UsQuart).ToString());
                Assert.Equal("1", new Volume(1, VolumeUnit.UsTablespoon).ToString());
                Assert.Equal("1", new Volume(1, VolumeUnit.UsTeaspoon).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentUICulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 ac-ft", new Volume(1, VolumeUnit.AcreFoot).ToString(swedishCulture));
            Assert.Equal("1", new Volume(1, VolumeUnit.AuTablespoon).ToString(swedishCulture));
            Assert.Equal("1 bf", new Volume(1, VolumeUnit.BoardFoot).ToString(swedishCulture));
            Assert.Equal("1 cl", new Volume(1, VolumeUnit.Centiliter).ToString(swedishCulture));
            Assert.Equal("1 cm³", new Volume(1, VolumeUnit.CubicCentimeter).ToString(swedishCulture));
            Assert.Equal("1 dm³", new Volume(1, VolumeUnit.CubicDecimeter).ToString(swedishCulture));
            Assert.Equal("1 ft³", new Volume(1, VolumeUnit.CubicFoot).ToString(swedishCulture));
            Assert.Equal("1 hm³", new Volume(1, VolumeUnit.CubicHectometer).ToString(swedishCulture));
            Assert.Equal("1 in³", new Volume(1, VolumeUnit.CubicInch).ToString(swedishCulture));
            Assert.Equal("1 km³", new Volume(1, VolumeUnit.CubicKilometer).ToString(swedishCulture));
            Assert.Equal("1 m³", new Volume(1, VolumeUnit.CubicMeter).ToString(swedishCulture));
            Assert.Equal("1 µm³", new Volume(1, VolumeUnit.CubicMicrometer).ToString(swedishCulture));
            Assert.Equal("1 mi³", new Volume(1, VolumeUnit.CubicMile).ToString(swedishCulture));
            Assert.Equal("1 mm³", new Volume(1, VolumeUnit.CubicMillimeter).ToString(swedishCulture));
            Assert.Equal("1 yd³", new Volume(1, VolumeUnit.CubicYard).ToString(swedishCulture));
            Assert.Equal("1 dal", new Volume(1, VolumeUnit.Decaliter).ToString(swedishCulture));
            Assert.Equal("1 dagal (U.S.)", new Volume(1, VolumeUnit.DecausGallon).ToString(swedishCulture));
            Assert.Equal("1 dl", new Volume(1, VolumeUnit.Deciliter).ToString(swedishCulture));
            Assert.Equal("1 dgal (U.S.)", new Volume(1, VolumeUnit.DeciusGallon).ToString(swedishCulture));
            Assert.Equal("1 hft³", new Volume(1, VolumeUnit.HectocubicFoot).ToString(swedishCulture));
            Assert.Equal("1 hm³", new Volume(1, VolumeUnit.HectocubicMeter).ToString(swedishCulture));
            Assert.Equal("1 hl", new Volume(1, VolumeUnit.Hectoliter).ToString(swedishCulture));
            Assert.Equal("1 hgal (U.S.)", new Volume(1, VolumeUnit.HectousGallon).ToString(swedishCulture));
            Assert.Equal("1 bl (imp.)", new Volume(1, VolumeUnit.ImperialBeerBarrel).ToString(swedishCulture));
            Assert.Equal("1 gal (imp.)", new Volume(1, VolumeUnit.ImperialGallon).ToString(swedishCulture));
            Assert.Equal("1 oz (imp.)", new Volume(1, VolumeUnit.ImperialOunce).ToString(swedishCulture));
            Assert.Equal("1 pt (imp.)", new Volume(1, VolumeUnit.ImperialPint).ToString(swedishCulture));
            Assert.Equal("1 kft³", new Volume(1, VolumeUnit.KilocubicFoot).ToString(swedishCulture));
            Assert.Equal("1 km³", new Volume(1, VolumeUnit.KilocubicMeter).ToString(swedishCulture));
            Assert.Equal("1 kgal (imp.)", new Volume(1, VolumeUnit.KiloimperialGallon).ToString(swedishCulture));
            Assert.Equal("1 kl", new Volume(1, VolumeUnit.Kiloliter).ToString(swedishCulture));
            Assert.Equal("1 kgal (U.S.)", new Volume(1, VolumeUnit.KilousGallon).ToString(swedishCulture));
            Assert.Equal("1 l", new Volume(1, VolumeUnit.Liter).ToString(swedishCulture));
            Assert.Equal("1 Mft³", new Volume(1, VolumeUnit.MegacubicFoot).ToString(swedishCulture));
            Assert.Equal("1 Mgal (imp.)", new Volume(1, VolumeUnit.MegaimperialGallon).ToString(swedishCulture));
            Assert.Equal("1 Ml", new Volume(1, VolumeUnit.Megaliter).ToString(swedishCulture));
            Assert.Equal("1 Mgal (U.S.)", new Volume(1, VolumeUnit.MegausGallon).ToString(swedishCulture));
            Assert.Equal("1", new Volume(1, VolumeUnit.MetricCup).ToString(swedishCulture));
            Assert.Equal("1 tsp", new Volume(1, VolumeUnit.MetricTeaspoon).ToString(swedishCulture));
            Assert.Equal("1 µl", new Volume(1, VolumeUnit.Microliter).ToString(swedishCulture));
            Assert.Equal("1 ml", new Volume(1, VolumeUnit.Milliliter).ToString(swedishCulture));
            Assert.Equal("1 bbl", new Volume(1, VolumeUnit.OilBarrel).ToString(swedishCulture));
            Assert.Equal("1", new Volume(1, VolumeUnit.UkTablespoon).ToString(swedishCulture));
            Assert.Equal("1 bl (U.S.)", new Volume(1, VolumeUnit.UsBeerBarrel).ToString(swedishCulture));
            Assert.Equal("1", new Volume(1, VolumeUnit.UsCustomaryCup).ToString(swedishCulture));
            Assert.Equal("1 gal (U.S.)", new Volume(1, VolumeUnit.UsGallon).ToString(swedishCulture));
            Assert.Equal("1", new Volume(1, VolumeUnit.UsLegalCup).ToString(swedishCulture));
            Assert.Equal("1 oz (U.S.)", new Volume(1, VolumeUnit.UsOunce).ToString(swedishCulture));
            Assert.Equal("1 pt (U.S.)", new Volume(1, VolumeUnit.UsPint).ToString(swedishCulture));
            Assert.Equal("1 qt (U.S.)", new Volume(1, VolumeUnit.UsQuart).ToString(swedishCulture));
            Assert.Equal("1", new Volume(1, VolumeUnit.UsTablespoon).ToString(swedishCulture));
            Assert.Equal("1", new Volume(1, VolumeUnit.UsTeaspoon).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentUICulture;
            try
            {
                CultureInfo.CurrentUICulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 m³", new Volume(0.123456, VolumeUnit.CubicMeter).ToString("s1"));
                Assert.Equal("0.12 m³", new Volume(0.123456, VolumeUnit.CubicMeter).ToString("s2"));
                Assert.Equal("0.123 m³", new Volume(0.123456, VolumeUnit.CubicMeter).ToString("s3"));
                Assert.Equal("0.1235 m³", new Volume(0.123456, VolumeUnit.CubicMeter).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentUICulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 m³", new Volume(0.123456, VolumeUnit.CubicMeter).ToString("s1", culture));
            Assert.Equal("0.12 m³", new Volume(0.123456, VolumeUnit.CubicMeter).ToString("s2", culture));
            Assert.Equal("0.123 m³", new Volume(0.123456, VolumeUnit.CubicMeter).ToString("s3", culture));
            Assert.Equal("0.1235 m³", new Volume(0.123456, VolumeUnit.CubicMeter).ToString("s4", culture));
        }


        [Fact]
        public void ToString_NullFormat_ThrowsArgumentNullException()
        {
            var quantity = Volume.FromCubicMeters(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, null, null));
        }

        [Fact]
        public void ToString_NullArgs_ThrowsArgumentNullException()
        {
            var quantity = Volume.FromCubicMeters(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, "g", null));
        }

        [Fact]
        public void ToString_NullProvider_EqualsCurrentUICulture()
        {
            var quantity = Volume.FromCubicMeters(1.0);
            Assert.Equal(quantity.ToString(CultureInfo.CurrentUICulture, "g"), quantity.ToString(null, "g"));
        }


        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = Volume.FromCubicMeters(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = Volume.FromCubicMeters(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = Volume.FromCubicMeters(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = Volume.FromCubicMeters(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = Volume.FromCubicMeters(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = Volume.FromCubicMeters(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = Volume.FromCubicMeters(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = Volume.FromCubicMeters(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = Volume.FromCubicMeters(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = Volume.FromCubicMeters(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = Volume.FromCubicMeters(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = Volume.FromCubicMeters(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = Volume.FromCubicMeters(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = Volume.FromCubicMeters(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = Volume.FromCubicMeters(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = Volume.FromCubicMeters(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(Volume)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = Volume.FromCubicMeters(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(VolumeUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityType_EqualsQuantityType()
        {
            var quantity = Volume.FromCubicMeters(1.0);
            Assert.Equal(QuantityType.Volume, Convert.ChangeType(quantity, typeof(QuantityType)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = Volume.FromCubicMeters(1.0);
            Assert.Equal(Volume.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = Volume.FromCubicMeters(1.0);
            Assert.Equal(Volume.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = Volume.FromCubicMeters(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = Volume.FromCubicMeters(1.0);
            Assert.Equal(new {Volume.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = Volume.FromCubicMeters(value);
            Assert.Equal(Volume.FromCubicMeters(-value), -quantity);
        }
    }
}
