//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Mass.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class MassTestsBase : QuantityTestsBase
    {
        protected abstract double CentigramsInOneKilogram { get; }
        protected abstract double DecagramsInOneKilogram { get; }
        protected abstract double DecigramsInOneKilogram { get; }
        protected abstract double EarthMassesInOneKilogram { get; }
        protected abstract double GrainsInOneKilogram { get; }
        protected abstract double GramsInOneKilogram { get; }
        protected abstract double HectogramsInOneKilogram { get; }
        protected abstract double KilogramsInOneKilogram { get; }
        protected abstract double KilopoundsInOneKilogram { get; }
        protected abstract double KilotonnesInOneKilogram { get; }
        protected abstract double LongHundredweightInOneKilogram { get; }
        protected abstract double LongTonsInOneKilogram { get; }
        protected abstract double MegapoundsInOneKilogram { get; }
        protected abstract double MegatonnesInOneKilogram { get; }
        protected abstract double MicrogramsInOneKilogram { get; }
        protected abstract double MilligramsInOneKilogram { get; }
        protected abstract double NanogramsInOneKilogram { get; }
        protected abstract double OuncesInOneKilogram { get; }
        protected abstract double PoundsInOneKilogram { get; }
        protected abstract double ShortHundredweightInOneKilogram { get; }
        protected abstract double ShortTonsInOneKilogram { get; }
        protected abstract double SlugsInOneKilogram { get; }
        protected abstract double SolarMassesInOneKilogram { get; }
        protected abstract double StoneInOneKilogram { get; }
        protected abstract double TonnesInOneKilogram { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double CentigramsTolerance { get { return 1e-5; } }
        protected virtual double DecagramsTolerance { get { return 1e-5; } }
        protected virtual double DecigramsTolerance { get { return 1e-5; } }
        protected virtual double EarthMassesTolerance { get { return 1e-5; } }
        protected virtual double GrainsTolerance { get { return 1e-5; } }
        protected virtual double GramsTolerance { get { return 1e-5; } }
        protected virtual double HectogramsTolerance { get { return 1e-5; } }
        protected virtual double KilogramsTolerance { get { return 1e-5; } }
        protected virtual double KilopoundsTolerance { get { return 1e-5; } }
        protected virtual double KilotonnesTolerance { get { return 1e-5; } }
        protected virtual double LongHundredweightTolerance { get { return 1e-5; } }
        protected virtual double LongTonsTolerance { get { return 1e-5; } }
        protected virtual double MegapoundsTolerance { get { return 1e-5; } }
        protected virtual double MegatonnesTolerance { get { return 1e-5; } }
        protected virtual double MicrogramsTolerance { get { return 1e-5; } }
        protected virtual double MilligramsTolerance { get { return 1e-5; } }
        protected virtual double NanogramsTolerance { get { return 1e-5; } }
        protected virtual double OuncesTolerance { get { return 1e-5; } }
        protected virtual double PoundsTolerance { get { return 1e-5; } }
        protected virtual double ShortHundredweightTolerance { get { return 1e-5; } }
        protected virtual double ShortTonsTolerance { get { return 1e-5; } }
        protected virtual double SlugsTolerance { get { return 1e-5; } }
        protected virtual double SolarMassesTolerance { get { return 1e-5; } }
        protected virtual double StoneTolerance { get { return 1e-5; } }
        protected virtual double TonnesTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(MassUnit unit)
        {
            return unit switch
            {
                MassUnit.Centigram => (CentigramsInOneKilogram, CentigramsTolerance),
                MassUnit.Decagram => (DecagramsInOneKilogram, DecagramsTolerance),
                MassUnit.Decigram => (DecigramsInOneKilogram, DecigramsTolerance),
                MassUnit.EarthMass => (EarthMassesInOneKilogram, EarthMassesTolerance),
                MassUnit.Grain => (GrainsInOneKilogram, GrainsTolerance),
                MassUnit.Gram => (GramsInOneKilogram, GramsTolerance),
                MassUnit.Hectogram => (HectogramsInOneKilogram, HectogramsTolerance),
                MassUnit.Kilogram => (KilogramsInOneKilogram, KilogramsTolerance),
                MassUnit.Kilopound => (KilopoundsInOneKilogram, KilopoundsTolerance),
                MassUnit.Kilotonne => (KilotonnesInOneKilogram, KilotonnesTolerance),
                MassUnit.LongHundredweight => (LongHundredweightInOneKilogram, LongHundredweightTolerance),
                MassUnit.LongTon => (LongTonsInOneKilogram, LongTonsTolerance),
                MassUnit.Megapound => (MegapoundsInOneKilogram, MegapoundsTolerance),
                MassUnit.Megatonne => (MegatonnesInOneKilogram, MegatonnesTolerance),
                MassUnit.Microgram => (MicrogramsInOneKilogram, MicrogramsTolerance),
                MassUnit.Milligram => (MilligramsInOneKilogram, MilligramsTolerance),
                MassUnit.Nanogram => (NanogramsInOneKilogram, NanogramsTolerance),
                MassUnit.Ounce => (OuncesInOneKilogram, OuncesTolerance),
                MassUnit.Pound => (PoundsInOneKilogram, PoundsTolerance),
                MassUnit.ShortHundredweight => (ShortHundredweightInOneKilogram, ShortHundredweightTolerance),
                MassUnit.ShortTon => (ShortTonsInOneKilogram, ShortTonsTolerance),
                MassUnit.Slug => (SlugsInOneKilogram, SlugsTolerance),
                MassUnit.SolarMass => (SolarMassesInOneKilogram, SolarMassesTolerance),
                MassUnit.Stone => (StoneInOneKilogram, StoneTolerance),
                MassUnit.Tonne => (TonnesInOneKilogram, TonnesTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { MassUnit.Centigram },
            new object[] { MassUnit.Decagram },
            new object[] { MassUnit.Decigram },
            new object[] { MassUnit.EarthMass },
            new object[] { MassUnit.Grain },
            new object[] { MassUnit.Gram },
            new object[] { MassUnit.Hectogram },
            new object[] { MassUnit.Kilogram },
            new object[] { MassUnit.Kilopound },
            new object[] { MassUnit.Kilotonne },
            new object[] { MassUnit.LongHundredweight },
            new object[] { MassUnit.LongTon },
            new object[] { MassUnit.Megapound },
            new object[] { MassUnit.Megatonne },
            new object[] { MassUnit.Microgram },
            new object[] { MassUnit.Milligram },
            new object[] { MassUnit.Nanogram },
            new object[] { MassUnit.Ounce },
            new object[] { MassUnit.Pound },
            new object[] { MassUnit.ShortHundredweight },
            new object[] { MassUnit.ShortTon },
            new object[] { MassUnit.Slug },
            new object[] { MassUnit.SolarMass },
            new object[] { MassUnit.Stone },
            new object[] { MassUnit.Tonne },
        };

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Mass((double)0.0, MassUnit.Undefined));
        }

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new Mass();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(MassUnit.Kilogram, quantity.Unit);
        }


        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Mass(double.PositiveInfinity, MassUnit.Kilogram));
            Assert.Throws<ArgumentException>(() => new Mass(double.NegativeInfinity, MassUnit.Kilogram));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Mass(double.NaN, MassUnit.Kilogram));
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new Mass(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            Func<object> TestCode = () => new Mass(value: 1, unitSystem: UnitSystem.SI);
            if (SupportsSIUnitSystem)
            {
                var quantity = (Mass) TestCode();
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(TestCode);
            }
        }

        [Fact]
        public void Mass_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new Mass(1, MassUnit.Kilogram);

            QuantityInfo<MassUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(Mass.Zero, quantityInfo.Zero);
            Assert.Equal("Mass", quantityInfo.Name);
            Assert.Equal(QuantityType.Mass, quantityInfo.QuantityType);

            var units = EnumUtils.GetEnumValues<MassUnit>().Except(new[] {MassUnit.Undefined}).OrderBy(x => x.ToString()).ToArray();
            var unitNames = units.Select(x => x.ToString());

            // Obsolete members
            Assert.Equal(units, quantityInfo.Units);
            Assert.Equal(unitNames, quantityInfo.UnitNames);
        }

        [Fact]
        public void KilogramToMassUnits()
        {
            Mass kilogram = Mass.FromKilograms(1);
            AssertEx.EqualTolerance(CentigramsInOneKilogram, kilogram.Centigrams, CentigramsTolerance);
            AssertEx.EqualTolerance(DecagramsInOneKilogram, kilogram.Decagrams, DecagramsTolerance);
            AssertEx.EqualTolerance(DecigramsInOneKilogram, kilogram.Decigrams, DecigramsTolerance);
            AssertEx.EqualTolerance(EarthMassesInOneKilogram, kilogram.EarthMasses, EarthMassesTolerance);
            AssertEx.EqualTolerance(GrainsInOneKilogram, kilogram.Grains, GrainsTolerance);
            AssertEx.EqualTolerance(GramsInOneKilogram, kilogram.Grams, GramsTolerance);
            AssertEx.EqualTolerance(HectogramsInOneKilogram, kilogram.Hectograms, HectogramsTolerance);
            AssertEx.EqualTolerance(KilogramsInOneKilogram, kilogram.Kilograms, KilogramsTolerance);
            AssertEx.EqualTolerance(KilopoundsInOneKilogram, kilogram.Kilopounds, KilopoundsTolerance);
            AssertEx.EqualTolerance(KilotonnesInOneKilogram, kilogram.Kilotonnes, KilotonnesTolerance);
            AssertEx.EqualTolerance(LongHundredweightInOneKilogram, kilogram.LongHundredweight, LongHundredweightTolerance);
            AssertEx.EqualTolerance(LongTonsInOneKilogram, kilogram.LongTons, LongTonsTolerance);
            AssertEx.EqualTolerance(MegapoundsInOneKilogram, kilogram.Megapounds, MegapoundsTolerance);
            AssertEx.EqualTolerance(MegatonnesInOneKilogram, kilogram.Megatonnes, MegatonnesTolerance);
            AssertEx.EqualTolerance(MicrogramsInOneKilogram, kilogram.Micrograms, MicrogramsTolerance);
            AssertEx.EqualTolerance(MilligramsInOneKilogram, kilogram.Milligrams, MilligramsTolerance);
            AssertEx.EqualTolerance(NanogramsInOneKilogram, kilogram.Nanograms, NanogramsTolerance);
            AssertEx.EqualTolerance(OuncesInOneKilogram, kilogram.Ounces, OuncesTolerance);
            AssertEx.EqualTolerance(PoundsInOneKilogram, kilogram.Pounds, PoundsTolerance);
            AssertEx.EqualTolerance(ShortHundredweightInOneKilogram, kilogram.ShortHundredweight, ShortHundredweightTolerance);
            AssertEx.EqualTolerance(ShortTonsInOneKilogram, kilogram.ShortTons, ShortTonsTolerance);
            AssertEx.EqualTolerance(SlugsInOneKilogram, kilogram.Slugs, SlugsTolerance);
            AssertEx.EqualTolerance(SolarMassesInOneKilogram, kilogram.SolarMasses, SolarMassesTolerance);
            AssertEx.EqualTolerance(StoneInOneKilogram, kilogram.Stone, StoneTolerance);
            AssertEx.EqualTolerance(TonnesInOneKilogram, kilogram.Tonnes, TonnesTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = Mass.From(1, MassUnit.Centigram);
            AssertEx.EqualTolerance(1, quantity00.Centigrams, CentigramsTolerance);
            Assert.Equal(MassUnit.Centigram, quantity00.Unit);

            var quantity01 = Mass.From(1, MassUnit.Decagram);
            AssertEx.EqualTolerance(1, quantity01.Decagrams, DecagramsTolerance);
            Assert.Equal(MassUnit.Decagram, quantity01.Unit);

            var quantity02 = Mass.From(1, MassUnit.Decigram);
            AssertEx.EqualTolerance(1, quantity02.Decigrams, DecigramsTolerance);
            Assert.Equal(MassUnit.Decigram, quantity02.Unit);

            var quantity03 = Mass.From(1, MassUnit.EarthMass);
            AssertEx.EqualTolerance(1, quantity03.EarthMasses, EarthMassesTolerance);
            Assert.Equal(MassUnit.EarthMass, quantity03.Unit);

            var quantity04 = Mass.From(1, MassUnit.Grain);
            AssertEx.EqualTolerance(1, quantity04.Grains, GrainsTolerance);
            Assert.Equal(MassUnit.Grain, quantity04.Unit);

            var quantity05 = Mass.From(1, MassUnit.Gram);
            AssertEx.EqualTolerance(1, quantity05.Grams, GramsTolerance);
            Assert.Equal(MassUnit.Gram, quantity05.Unit);

            var quantity06 = Mass.From(1, MassUnit.Hectogram);
            AssertEx.EqualTolerance(1, quantity06.Hectograms, HectogramsTolerance);
            Assert.Equal(MassUnit.Hectogram, quantity06.Unit);

            var quantity07 = Mass.From(1, MassUnit.Kilogram);
            AssertEx.EqualTolerance(1, quantity07.Kilograms, KilogramsTolerance);
            Assert.Equal(MassUnit.Kilogram, quantity07.Unit);

            var quantity08 = Mass.From(1, MassUnit.Kilopound);
            AssertEx.EqualTolerance(1, quantity08.Kilopounds, KilopoundsTolerance);
            Assert.Equal(MassUnit.Kilopound, quantity08.Unit);

            var quantity09 = Mass.From(1, MassUnit.Kilotonne);
            AssertEx.EqualTolerance(1, quantity09.Kilotonnes, KilotonnesTolerance);
            Assert.Equal(MassUnit.Kilotonne, quantity09.Unit);

            var quantity10 = Mass.From(1, MassUnit.LongHundredweight);
            AssertEx.EqualTolerance(1, quantity10.LongHundredweight, LongHundredweightTolerance);
            Assert.Equal(MassUnit.LongHundredweight, quantity10.Unit);

            var quantity11 = Mass.From(1, MassUnit.LongTon);
            AssertEx.EqualTolerance(1, quantity11.LongTons, LongTonsTolerance);
            Assert.Equal(MassUnit.LongTon, quantity11.Unit);

            var quantity12 = Mass.From(1, MassUnit.Megapound);
            AssertEx.EqualTolerance(1, quantity12.Megapounds, MegapoundsTolerance);
            Assert.Equal(MassUnit.Megapound, quantity12.Unit);

            var quantity13 = Mass.From(1, MassUnit.Megatonne);
            AssertEx.EqualTolerance(1, quantity13.Megatonnes, MegatonnesTolerance);
            Assert.Equal(MassUnit.Megatonne, quantity13.Unit);

            var quantity14 = Mass.From(1, MassUnit.Microgram);
            AssertEx.EqualTolerance(1, quantity14.Micrograms, MicrogramsTolerance);
            Assert.Equal(MassUnit.Microgram, quantity14.Unit);

            var quantity15 = Mass.From(1, MassUnit.Milligram);
            AssertEx.EqualTolerance(1, quantity15.Milligrams, MilligramsTolerance);
            Assert.Equal(MassUnit.Milligram, quantity15.Unit);

            var quantity16 = Mass.From(1, MassUnit.Nanogram);
            AssertEx.EqualTolerance(1, quantity16.Nanograms, NanogramsTolerance);
            Assert.Equal(MassUnit.Nanogram, quantity16.Unit);

            var quantity17 = Mass.From(1, MassUnit.Ounce);
            AssertEx.EqualTolerance(1, quantity17.Ounces, OuncesTolerance);
            Assert.Equal(MassUnit.Ounce, quantity17.Unit);

            var quantity18 = Mass.From(1, MassUnit.Pound);
            AssertEx.EqualTolerance(1, quantity18.Pounds, PoundsTolerance);
            Assert.Equal(MassUnit.Pound, quantity18.Unit);

            var quantity19 = Mass.From(1, MassUnit.ShortHundredweight);
            AssertEx.EqualTolerance(1, quantity19.ShortHundredweight, ShortHundredweightTolerance);
            Assert.Equal(MassUnit.ShortHundredweight, quantity19.Unit);

            var quantity20 = Mass.From(1, MassUnit.ShortTon);
            AssertEx.EqualTolerance(1, quantity20.ShortTons, ShortTonsTolerance);
            Assert.Equal(MassUnit.ShortTon, quantity20.Unit);

            var quantity21 = Mass.From(1, MassUnit.Slug);
            AssertEx.EqualTolerance(1, quantity21.Slugs, SlugsTolerance);
            Assert.Equal(MassUnit.Slug, quantity21.Unit);

            var quantity22 = Mass.From(1, MassUnit.SolarMass);
            AssertEx.EqualTolerance(1, quantity22.SolarMasses, SolarMassesTolerance);
            Assert.Equal(MassUnit.SolarMass, quantity22.Unit);

            var quantity23 = Mass.From(1, MassUnit.Stone);
            AssertEx.EqualTolerance(1, quantity23.Stone, StoneTolerance);
            Assert.Equal(MassUnit.Stone, quantity23.Unit);

            var quantity24 = Mass.From(1, MassUnit.Tonne);
            AssertEx.EqualTolerance(1, quantity24.Tonnes, TonnesTolerance);
            Assert.Equal(MassUnit.Tonne, quantity24.Unit);

        }

        [Fact]
        public void FromKilograms_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => Mass.FromKilograms(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => Mass.FromKilograms(double.NegativeInfinity));
        }

        [Fact]
        public void FromKilograms_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => Mass.FromKilograms(double.NaN));
        }

        [Fact]
        public void As()
        {
            var kilogram = Mass.FromKilograms(1);
            AssertEx.EqualTolerance(CentigramsInOneKilogram, kilogram.As(MassUnit.Centigram), CentigramsTolerance);
            AssertEx.EqualTolerance(DecagramsInOneKilogram, kilogram.As(MassUnit.Decagram), DecagramsTolerance);
            AssertEx.EqualTolerance(DecigramsInOneKilogram, kilogram.As(MassUnit.Decigram), DecigramsTolerance);
            AssertEx.EqualTolerance(EarthMassesInOneKilogram, kilogram.As(MassUnit.EarthMass), EarthMassesTolerance);
            AssertEx.EqualTolerance(GrainsInOneKilogram, kilogram.As(MassUnit.Grain), GrainsTolerance);
            AssertEx.EqualTolerance(GramsInOneKilogram, kilogram.As(MassUnit.Gram), GramsTolerance);
            AssertEx.EqualTolerance(HectogramsInOneKilogram, kilogram.As(MassUnit.Hectogram), HectogramsTolerance);
            AssertEx.EqualTolerance(KilogramsInOneKilogram, kilogram.As(MassUnit.Kilogram), KilogramsTolerance);
            AssertEx.EqualTolerance(KilopoundsInOneKilogram, kilogram.As(MassUnit.Kilopound), KilopoundsTolerance);
            AssertEx.EqualTolerance(KilotonnesInOneKilogram, kilogram.As(MassUnit.Kilotonne), KilotonnesTolerance);
            AssertEx.EqualTolerance(LongHundredweightInOneKilogram, kilogram.As(MassUnit.LongHundredweight), LongHundredweightTolerance);
            AssertEx.EqualTolerance(LongTonsInOneKilogram, kilogram.As(MassUnit.LongTon), LongTonsTolerance);
            AssertEx.EqualTolerance(MegapoundsInOneKilogram, kilogram.As(MassUnit.Megapound), MegapoundsTolerance);
            AssertEx.EqualTolerance(MegatonnesInOneKilogram, kilogram.As(MassUnit.Megatonne), MegatonnesTolerance);
            AssertEx.EqualTolerance(MicrogramsInOneKilogram, kilogram.As(MassUnit.Microgram), MicrogramsTolerance);
            AssertEx.EqualTolerance(MilligramsInOneKilogram, kilogram.As(MassUnit.Milligram), MilligramsTolerance);
            AssertEx.EqualTolerance(NanogramsInOneKilogram, kilogram.As(MassUnit.Nanogram), NanogramsTolerance);
            AssertEx.EqualTolerance(OuncesInOneKilogram, kilogram.As(MassUnit.Ounce), OuncesTolerance);
            AssertEx.EqualTolerance(PoundsInOneKilogram, kilogram.As(MassUnit.Pound), PoundsTolerance);
            AssertEx.EqualTolerance(ShortHundredweightInOneKilogram, kilogram.As(MassUnit.ShortHundredweight), ShortHundredweightTolerance);
            AssertEx.EqualTolerance(ShortTonsInOneKilogram, kilogram.As(MassUnit.ShortTon), ShortTonsTolerance);
            AssertEx.EqualTolerance(SlugsInOneKilogram, kilogram.As(MassUnit.Slug), SlugsTolerance);
            AssertEx.EqualTolerance(SolarMassesInOneKilogram, kilogram.As(MassUnit.SolarMass), SolarMassesTolerance);
            AssertEx.EqualTolerance(StoneInOneKilogram, kilogram.As(MassUnit.Stone), StoneTolerance);
            AssertEx.EqualTolerance(TonnesInOneKilogram, kilogram.As(MassUnit.Tonne), TonnesTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new Mass(value: 1, unit: Mass.BaseUnit);
            Func<object> AsWithSIUnitSystem = () => quantity.As(UnitSystem.SI);

            if (SupportsSIUnitSystem)
            {
                var value = (double) AsWithSIUnitSystem();
                Assert.Equal(1, value);
            }
            else
            {
                Assert.Throws<ArgumentException>(AsWithSIUnitSystem);
            }
        }

        [Fact]
        public void Parse()
        {
            try
            {
                var parsed = Mass.Parse("1 cg", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Centigrams, CentigramsTolerance);
                Assert.Equal(MassUnit.Centigram, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 сг", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.Centigrams, CentigramsTolerance);
                Assert.Equal(MassUnit.Centigram, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 厘克", CultureInfo.GetCultureInfo("zh-CN"));
                AssertEx.EqualTolerance(1, parsed.Centigrams, CentigramsTolerance);
                Assert.Equal(MassUnit.Centigram, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 dag", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Decagrams, DecagramsTolerance);
                Assert.Equal(MassUnit.Decagram, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 даг", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.Decagrams, DecagramsTolerance);
                Assert.Equal(MassUnit.Decagram, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 十克", CultureInfo.GetCultureInfo("zh-CN"));
                AssertEx.EqualTolerance(1, parsed.Decagrams, DecagramsTolerance);
                Assert.Equal(MassUnit.Decagram, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 dg", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Decigrams, DecigramsTolerance);
                Assert.Equal(MassUnit.Decigram, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 дг", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.Decigrams, DecigramsTolerance);
                Assert.Equal(MassUnit.Decigram, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 分克", CultureInfo.GetCultureInfo("zh-CN"));
                AssertEx.EqualTolerance(1, parsed.Decigrams, DecigramsTolerance);
                Assert.Equal(MassUnit.Decigram, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 em", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.EarthMasses, EarthMassesTolerance);
                Assert.Equal(MassUnit.EarthMass, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 gr", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Grains, GrainsTolerance);
                Assert.Equal(MassUnit.Grain, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 g", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Grams, GramsTolerance);
                Assert.Equal(MassUnit.Gram, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 г", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.Grams, GramsTolerance);
                Assert.Equal(MassUnit.Gram, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 克", CultureInfo.GetCultureInfo("zh-CN"));
                AssertEx.EqualTolerance(1, parsed.Grams, GramsTolerance);
                Assert.Equal(MassUnit.Gram, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 hg", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Hectograms, HectogramsTolerance);
                Assert.Equal(MassUnit.Hectogram, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 гг", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.Hectograms, HectogramsTolerance);
                Assert.Equal(MassUnit.Hectogram, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 百克", CultureInfo.GetCultureInfo("zh-CN"));
                AssertEx.EqualTolerance(1, parsed.Hectograms, HectogramsTolerance);
                Assert.Equal(MassUnit.Hectogram, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 kg", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Kilograms, KilogramsTolerance);
                Assert.Equal(MassUnit.Kilogram, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 кг", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.Kilograms, KilogramsTolerance);
                Assert.Equal(MassUnit.Kilogram, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 千克", CultureInfo.GetCultureInfo("zh-CN"));
                AssertEx.EqualTolerance(1, parsed.Kilograms, KilogramsTolerance);
                Assert.Equal(MassUnit.Kilogram, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 klb", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Kilopounds, KilopoundsTolerance);
                Assert.Equal(MassUnit.Kilopound, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 klbs", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Kilopounds, KilopoundsTolerance);
                Assert.Equal(MassUnit.Kilopound, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 klbm", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Kilopounds, KilopoundsTolerance);
                Assert.Equal(MassUnit.Kilopound, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 кфунт", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.Kilopounds, KilopoundsTolerance);
                Assert.Equal(MassUnit.Kilopound, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 千磅", CultureInfo.GetCultureInfo("zh-CN"));
                AssertEx.EqualTolerance(1, parsed.Kilopounds, KilopoundsTolerance);
                Assert.Equal(MassUnit.Kilopound, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 kt", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Kilotonnes, KilotonnesTolerance);
                Assert.Equal(MassUnit.Kilotonne, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 кт", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.Kilotonnes, KilotonnesTolerance);
                Assert.Equal(MassUnit.Kilotonne, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 千吨", CultureInfo.GetCultureInfo("zh-CN"));
                AssertEx.EqualTolerance(1, parsed.Kilotonnes, KilotonnesTolerance);
                Assert.Equal(MassUnit.Kilotonne, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 cwt", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.LongHundredweight, LongHundredweightTolerance);
                Assert.Equal(MassUnit.LongHundredweight, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 long tn", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.LongTons, LongTonsTolerance);
                Assert.Equal(MassUnit.LongTon, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 тонна большая", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.LongTons, LongTonsTolerance);
                Assert.Equal(MassUnit.LongTon, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 长吨", CultureInfo.GetCultureInfo("zh-CN"));
                AssertEx.EqualTolerance(1, parsed.LongTons, LongTonsTolerance);
                Assert.Equal(MassUnit.LongTon, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 Mlb", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Megapounds, MegapoundsTolerance);
                Assert.Equal(MassUnit.Megapound, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 Mlbs", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Megapounds, MegapoundsTolerance);
                Assert.Equal(MassUnit.Megapound, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 Mlbm", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Megapounds, MegapoundsTolerance);
                Assert.Equal(MassUnit.Megapound, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 Мфунт", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.Megapounds, MegapoundsTolerance);
                Assert.Equal(MassUnit.Megapound, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 兆磅", CultureInfo.GetCultureInfo("zh-CN"));
                AssertEx.EqualTolerance(1, parsed.Megapounds, MegapoundsTolerance);
                Assert.Equal(MassUnit.Megapound, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 Mt", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Megatonnes, MegatonnesTolerance);
                Assert.Equal(MassUnit.Megatonne, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 Мт", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.Megatonnes, MegatonnesTolerance);
                Assert.Equal(MassUnit.Megatonne, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 兆吨", CultureInfo.GetCultureInfo("zh-CN"));
                AssertEx.EqualTolerance(1, parsed.Megatonnes, MegatonnesTolerance);
                Assert.Equal(MassUnit.Megatonne, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 µg", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Micrograms, MicrogramsTolerance);
                Assert.Equal(MassUnit.Microgram, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 мкг", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.Micrograms, MicrogramsTolerance);
                Assert.Equal(MassUnit.Microgram, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 微克", CultureInfo.GetCultureInfo("zh-CN"));
                AssertEx.EqualTolerance(1, parsed.Micrograms, MicrogramsTolerance);
                Assert.Equal(MassUnit.Microgram, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 mg", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Milligrams, MilligramsTolerance);
                Assert.Equal(MassUnit.Milligram, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 мг", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.Milligrams, MilligramsTolerance);
                Assert.Equal(MassUnit.Milligram, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 毫克", CultureInfo.GetCultureInfo("zh-CN"));
                AssertEx.EqualTolerance(1, parsed.Milligrams, MilligramsTolerance);
                Assert.Equal(MassUnit.Milligram, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 ng", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Nanograms, NanogramsTolerance);
                Assert.Equal(MassUnit.Nanogram, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 нг", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.Nanograms, NanogramsTolerance);
                Assert.Equal(MassUnit.Nanogram, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 纳克", CultureInfo.GetCultureInfo("zh-CN"));
                AssertEx.EqualTolerance(1, parsed.Nanograms, NanogramsTolerance);
                Assert.Equal(MassUnit.Nanogram, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 oz", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Ounces, OuncesTolerance);
                Assert.Equal(MassUnit.Ounce, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 盎司", CultureInfo.GetCultureInfo("zh-CN"));
                AssertEx.EqualTolerance(1, parsed.Ounces, OuncesTolerance);
                Assert.Equal(MassUnit.Ounce, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 lb", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Pounds, PoundsTolerance);
                Assert.Equal(MassUnit.Pound, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 lbs", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Pounds, PoundsTolerance);
                Assert.Equal(MassUnit.Pound, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 lbm", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Pounds, PoundsTolerance);
                Assert.Equal(MassUnit.Pound, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 фунт", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.Pounds, PoundsTolerance);
                Assert.Equal(MassUnit.Pound, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 磅", CultureInfo.GetCultureInfo("zh-CN"));
                AssertEx.EqualTolerance(1, parsed.Pounds, PoundsTolerance);
                Assert.Equal(MassUnit.Pound, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 cwt", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.ShortHundredweight, ShortHundredweightTolerance);
                Assert.Equal(MassUnit.ShortHundredweight, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 t (short)", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.ShortTons, ShortTonsTolerance);
                Assert.Equal(MassUnit.ShortTon, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 short tn", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.ShortTons, ShortTonsTolerance);
                Assert.Equal(MassUnit.ShortTon, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 ST", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.ShortTons, ShortTonsTolerance);
                Assert.Equal(MassUnit.ShortTon, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 тонна малая", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.ShortTons, ShortTonsTolerance);
                Assert.Equal(MassUnit.ShortTon, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 短吨", CultureInfo.GetCultureInfo("zh-CN"));
                AssertEx.EqualTolerance(1, parsed.ShortTons, ShortTonsTolerance);
                Assert.Equal(MassUnit.ShortTon, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 slug", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Slugs, SlugsTolerance);
                Assert.Equal(MassUnit.Slug, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 M⊙", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.SolarMasses, SolarMassesTolerance);
                Assert.Equal(MassUnit.SolarMass, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 st", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Stone, StoneTolerance);
                Assert.Equal(MassUnit.Stone, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 t", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Tonnes, TonnesTolerance);
                Assert.Equal(MassUnit.Tonne, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 т", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.Tonnes, TonnesTolerance);
                Assert.Equal(MassUnit.Tonne, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Mass.Parse("1 吨", CultureInfo.GetCultureInfo("zh-CN"));
                AssertEx.EqualTolerance(1, parsed.Tonnes, TonnesTolerance);
                Assert.Equal(MassUnit.Tonne, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParse()
        {
            {
                Assert.True(Mass.TryParse("1 cg", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Centigrams, CentigramsTolerance);
                Assert.Equal(MassUnit.Centigram, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 сг", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Centigrams, CentigramsTolerance);
                Assert.Equal(MassUnit.Centigram, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 厘克", CultureInfo.GetCultureInfo("zh-CN"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Centigrams, CentigramsTolerance);
                Assert.Equal(MassUnit.Centigram, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 dag", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Decagrams, DecagramsTolerance);
                Assert.Equal(MassUnit.Decagram, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 даг", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Decagrams, DecagramsTolerance);
                Assert.Equal(MassUnit.Decagram, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 十克", CultureInfo.GetCultureInfo("zh-CN"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Decagrams, DecagramsTolerance);
                Assert.Equal(MassUnit.Decagram, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 dg", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Decigrams, DecigramsTolerance);
                Assert.Equal(MassUnit.Decigram, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 дг", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Decigrams, DecigramsTolerance);
                Assert.Equal(MassUnit.Decigram, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 分克", CultureInfo.GetCultureInfo("zh-CN"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Decigrams, DecigramsTolerance);
                Assert.Equal(MassUnit.Decigram, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 em", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.EarthMasses, EarthMassesTolerance);
                Assert.Equal(MassUnit.EarthMass, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 gr", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Grains, GrainsTolerance);
                Assert.Equal(MassUnit.Grain, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 g", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Grams, GramsTolerance);
                Assert.Equal(MassUnit.Gram, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 г", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Grams, GramsTolerance);
                Assert.Equal(MassUnit.Gram, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 克", CultureInfo.GetCultureInfo("zh-CN"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Grams, GramsTolerance);
                Assert.Equal(MassUnit.Gram, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 hg", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Hectograms, HectogramsTolerance);
                Assert.Equal(MassUnit.Hectogram, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 гг", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Hectograms, HectogramsTolerance);
                Assert.Equal(MassUnit.Hectogram, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 百克", CultureInfo.GetCultureInfo("zh-CN"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Hectograms, HectogramsTolerance);
                Assert.Equal(MassUnit.Hectogram, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 kg", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Kilograms, KilogramsTolerance);
                Assert.Equal(MassUnit.Kilogram, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 кг", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Kilograms, KilogramsTolerance);
                Assert.Equal(MassUnit.Kilogram, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 千克", CultureInfo.GetCultureInfo("zh-CN"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Kilograms, KilogramsTolerance);
                Assert.Equal(MassUnit.Kilogram, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 klb", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Kilopounds, KilopoundsTolerance);
                Assert.Equal(MassUnit.Kilopound, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 klbs", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Kilopounds, KilopoundsTolerance);
                Assert.Equal(MassUnit.Kilopound, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 klbm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Kilopounds, KilopoundsTolerance);
                Assert.Equal(MassUnit.Kilopound, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 кфунт", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Kilopounds, KilopoundsTolerance);
                Assert.Equal(MassUnit.Kilopound, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 千磅", CultureInfo.GetCultureInfo("zh-CN"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Kilopounds, KilopoundsTolerance);
                Assert.Equal(MassUnit.Kilopound, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 kt", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Kilotonnes, KilotonnesTolerance);
                Assert.Equal(MassUnit.Kilotonne, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 кт", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Kilotonnes, KilotonnesTolerance);
                Assert.Equal(MassUnit.Kilotonne, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 千吨", CultureInfo.GetCultureInfo("zh-CN"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Kilotonnes, KilotonnesTolerance);
                Assert.Equal(MassUnit.Kilotonne, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 long tn", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.LongTons, LongTonsTolerance);
                Assert.Equal(MassUnit.LongTon, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 тонна большая", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.LongTons, LongTonsTolerance);
                Assert.Equal(MassUnit.LongTon, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 长吨", CultureInfo.GetCultureInfo("zh-CN"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.LongTons, LongTonsTolerance);
                Assert.Equal(MassUnit.LongTon, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 Mlb", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Megapounds, MegapoundsTolerance);
                Assert.Equal(MassUnit.Megapound, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 Mlbs", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Megapounds, MegapoundsTolerance);
                Assert.Equal(MassUnit.Megapound, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 Mlbm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Megapounds, MegapoundsTolerance);
                Assert.Equal(MassUnit.Megapound, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 Мфунт", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Megapounds, MegapoundsTolerance);
                Assert.Equal(MassUnit.Megapound, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 兆磅", CultureInfo.GetCultureInfo("zh-CN"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Megapounds, MegapoundsTolerance);
                Assert.Equal(MassUnit.Megapound, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 Mt", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Megatonnes, MegatonnesTolerance);
                Assert.Equal(MassUnit.Megatonne, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 Мт", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Megatonnes, MegatonnesTolerance);
                Assert.Equal(MassUnit.Megatonne, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 兆吨", CultureInfo.GetCultureInfo("zh-CN"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Megatonnes, MegatonnesTolerance);
                Assert.Equal(MassUnit.Megatonne, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 µg", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Micrograms, MicrogramsTolerance);
                Assert.Equal(MassUnit.Microgram, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 мкг", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Micrograms, MicrogramsTolerance);
                Assert.Equal(MassUnit.Microgram, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 微克", CultureInfo.GetCultureInfo("zh-CN"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Micrograms, MicrogramsTolerance);
                Assert.Equal(MassUnit.Microgram, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 mg", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Milligrams, MilligramsTolerance);
                Assert.Equal(MassUnit.Milligram, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 мг", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Milligrams, MilligramsTolerance);
                Assert.Equal(MassUnit.Milligram, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 毫克", CultureInfo.GetCultureInfo("zh-CN"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Milligrams, MilligramsTolerance);
                Assert.Equal(MassUnit.Milligram, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 ng", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Nanograms, NanogramsTolerance);
                Assert.Equal(MassUnit.Nanogram, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 нг", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Nanograms, NanogramsTolerance);
                Assert.Equal(MassUnit.Nanogram, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 纳克", CultureInfo.GetCultureInfo("zh-CN"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Nanograms, NanogramsTolerance);
                Assert.Equal(MassUnit.Nanogram, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 oz", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Ounces, OuncesTolerance);
                Assert.Equal(MassUnit.Ounce, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 盎司", CultureInfo.GetCultureInfo("zh-CN"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Ounces, OuncesTolerance);
                Assert.Equal(MassUnit.Ounce, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 lb", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Pounds, PoundsTolerance);
                Assert.Equal(MassUnit.Pound, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 lbs", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Pounds, PoundsTolerance);
                Assert.Equal(MassUnit.Pound, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 lbm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Pounds, PoundsTolerance);
                Assert.Equal(MassUnit.Pound, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 фунт", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Pounds, PoundsTolerance);
                Assert.Equal(MassUnit.Pound, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 磅", CultureInfo.GetCultureInfo("zh-CN"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Pounds, PoundsTolerance);
                Assert.Equal(MassUnit.Pound, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 t (short)", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.ShortTons, ShortTonsTolerance);
                Assert.Equal(MassUnit.ShortTon, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 short tn", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.ShortTons, ShortTonsTolerance);
                Assert.Equal(MassUnit.ShortTon, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 тонна малая", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.ShortTons, ShortTonsTolerance);
                Assert.Equal(MassUnit.ShortTon, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 短吨", CultureInfo.GetCultureInfo("zh-CN"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.ShortTons, ShortTonsTolerance);
                Assert.Equal(MassUnit.ShortTon, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 slug", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Slugs, SlugsTolerance);
                Assert.Equal(MassUnit.Slug, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 M⊙", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.SolarMasses, SolarMassesTolerance);
                Assert.Equal(MassUnit.SolarMass, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 t", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Tonnes, TonnesTolerance);
                Assert.Equal(MassUnit.Tonne, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 т", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Tonnes, TonnesTolerance);
                Assert.Equal(MassUnit.Tonne, parsed.Unit);
            }

            {
                Assert.True(Mass.TryParse("1 吨", CultureInfo.GetCultureInfo("zh-CN"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Tonnes, TonnesTolerance);
                Assert.Equal(MassUnit.Tonne, parsed.Unit);
            }

        }

        [Fact]
        public void ParseUnit()
        {
            try
            {
                var parsedUnit = Mass.ParseUnit("cg", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MassUnit.Centigram, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("сг", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(MassUnit.Centigram, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("厘克", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(MassUnit.Centigram, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("dag", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MassUnit.Decagram, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("даг", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(MassUnit.Decagram, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("十克", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(MassUnit.Decagram, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("dg", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MassUnit.Decigram, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("дг", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(MassUnit.Decigram, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("分克", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(MassUnit.Decigram, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("em", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MassUnit.EarthMass, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("gr", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MassUnit.Grain, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("g", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MassUnit.Gram, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("г", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(MassUnit.Gram, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("克", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(MassUnit.Gram, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("hg", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MassUnit.Hectogram, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("гг", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(MassUnit.Hectogram, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("百克", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(MassUnit.Hectogram, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("kg", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MassUnit.Kilogram, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("кг", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(MassUnit.Kilogram, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("千克", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(MassUnit.Kilogram, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("klb", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MassUnit.Kilopound, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("klbs", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MassUnit.Kilopound, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("klbm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MassUnit.Kilopound, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("кфунт", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(MassUnit.Kilopound, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("千磅", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(MassUnit.Kilopound, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("kt", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MassUnit.Kilotonne, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("кт", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(MassUnit.Kilotonne, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("千吨", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(MassUnit.Kilotonne, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("cwt", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MassUnit.LongHundredweight, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("long tn", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MassUnit.LongTon, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("тонна большая", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(MassUnit.LongTon, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("长吨", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(MassUnit.LongTon, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("Mlb", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MassUnit.Megapound, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("Mlbs", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MassUnit.Megapound, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("Mlbm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MassUnit.Megapound, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("Мфунт", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(MassUnit.Megapound, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("兆磅", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(MassUnit.Megapound, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("Mt", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MassUnit.Megatonne, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("Мт", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(MassUnit.Megatonne, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("兆吨", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(MassUnit.Megatonne, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("µg", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MassUnit.Microgram, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("мкг", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(MassUnit.Microgram, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("微克", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(MassUnit.Microgram, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("mg", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MassUnit.Milligram, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("мг", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(MassUnit.Milligram, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("毫克", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(MassUnit.Milligram, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("ng", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MassUnit.Nanogram, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("нг", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(MassUnit.Nanogram, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("纳克", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(MassUnit.Nanogram, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("oz", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MassUnit.Ounce, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("盎司", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(MassUnit.Ounce, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("lb", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MassUnit.Pound, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("lbs", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MassUnit.Pound, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("lbm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MassUnit.Pound, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("фунт", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(MassUnit.Pound, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("磅", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(MassUnit.Pound, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("cwt", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MassUnit.ShortHundredweight, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("t (short)", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MassUnit.ShortTon, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("short tn", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MassUnit.ShortTon, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("ST", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MassUnit.ShortTon, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("тонна малая", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(MassUnit.ShortTon, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("短吨", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(MassUnit.ShortTon, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("slug", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MassUnit.Slug, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("M⊙", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MassUnit.SolarMass, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("st", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MassUnit.Stone, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("t", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MassUnit.Tonne, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("т", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(MassUnit.Tonne, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Mass.ParseUnit("吨", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(MassUnit.Tonne, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParseUnit()
        {
            {
                Assert.True(Mass.TryParseUnit("cg", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MassUnit.Centigram, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("сг", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(MassUnit.Centigram, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("厘克", CultureInfo.GetCultureInfo("zh-CN"), out var parsedUnit));
                Assert.Equal(MassUnit.Centigram, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("dag", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MassUnit.Decagram, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("даг", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(MassUnit.Decagram, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("十克", CultureInfo.GetCultureInfo("zh-CN"), out var parsedUnit));
                Assert.Equal(MassUnit.Decagram, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("dg", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MassUnit.Decigram, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("дг", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(MassUnit.Decigram, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("分克", CultureInfo.GetCultureInfo("zh-CN"), out var parsedUnit));
                Assert.Equal(MassUnit.Decigram, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("em", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MassUnit.EarthMass, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("gr", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MassUnit.Grain, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("g", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MassUnit.Gram, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("г", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(MassUnit.Gram, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("克", CultureInfo.GetCultureInfo("zh-CN"), out var parsedUnit));
                Assert.Equal(MassUnit.Gram, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("hg", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MassUnit.Hectogram, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("гг", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(MassUnit.Hectogram, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("百克", CultureInfo.GetCultureInfo("zh-CN"), out var parsedUnit));
                Assert.Equal(MassUnit.Hectogram, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("kg", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MassUnit.Kilogram, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("кг", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(MassUnit.Kilogram, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("千克", CultureInfo.GetCultureInfo("zh-CN"), out var parsedUnit));
                Assert.Equal(MassUnit.Kilogram, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("klb", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MassUnit.Kilopound, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("klbs", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MassUnit.Kilopound, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("klbm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MassUnit.Kilopound, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("кфунт", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(MassUnit.Kilopound, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("千磅", CultureInfo.GetCultureInfo("zh-CN"), out var parsedUnit));
                Assert.Equal(MassUnit.Kilopound, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("kt", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MassUnit.Kilotonne, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("кт", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(MassUnit.Kilotonne, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("千吨", CultureInfo.GetCultureInfo("zh-CN"), out var parsedUnit));
                Assert.Equal(MassUnit.Kilotonne, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("long tn", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MassUnit.LongTon, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("тонна большая", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(MassUnit.LongTon, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("长吨", CultureInfo.GetCultureInfo("zh-CN"), out var parsedUnit));
                Assert.Equal(MassUnit.LongTon, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("Mlb", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MassUnit.Megapound, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("Mlbs", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MassUnit.Megapound, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("Mlbm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MassUnit.Megapound, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("Мфунт", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(MassUnit.Megapound, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("兆磅", CultureInfo.GetCultureInfo("zh-CN"), out var parsedUnit));
                Assert.Equal(MassUnit.Megapound, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("Mt", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MassUnit.Megatonne, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("Мт", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(MassUnit.Megatonne, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("兆吨", CultureInfo.GetCultureInfo("zh-CN"), out var parsedUnit));
                Assert.Equal(MassUnit.Megatonne, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("µg", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MassUnit.Microgram, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("мкг", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(MassUnit.Microgram, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("微克", CultureInfo.GetCultureInfo("zh-CN"), out var parsedUnit));
                Assert.Equal(MassUnit.Microgram, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("mg", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MassUnit.Milligram, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("мг", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(MassUnit.Milligram, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("毫克", CultureInfo.GetCultureInfo("zh-CN"), out var parsedUnit));
                Assert.Equal(MassUnit.Milligram, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("ng", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MassUnit.Nanogram, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("нг", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(MassUnit.Nanogram, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("纳克", CultureInfo.GetCultureInfo("zh-CN"), out var parsedUnit));
                Assert.Equal(MassUnit.Nanogram, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("oz", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MassUnit.Ounce, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("盎司", CultureInfo.GetCultureInfo("zh-CN"), out var parsedUnit));
                Assert.Equal(MassUnit.Ounce, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("lb", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MassUnit.Pound, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("lbs", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MassUnit.Pound, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("lbm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MassUnit.Pound, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("фунт", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(MassUnit.Pound, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("磅", CultureInfo.GetCultureInfo("zh-CN"), out var parsedUnit));
                Assert.Equal(MassUnit.Pound, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("t (short)", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MassUnit.ShortTon, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("short tn", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MassUnit.ShortTon, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("тонна малая", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(MassUnit.ShortTon, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("短吨", CultureInfo.GetCultureInfo("zh-CN"), out var parsedUnit));
                Assert.Equal(MassUnit.ShortTon, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("slug", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MassUnit.Slug, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("M⊙", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MassUnit.SolarMass, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("t", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MassUnit.Tonne, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("т", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(MassUnit.Tonne, parsedUnit);
            }

            {
                Assert.True(Mass.TryParseUnit("吨", CultureInfo.GetCultureInfo("zh-CN"), out var parsedUnit));
                Assert.Equal(MassUnit.Tonne, parsedUnit);
            }

        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(MassUnit unit)
        {
            var inBaseUnits = Mass.From(1.0, Mass.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, (double)converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(MassUnit unit)
        {
            var quantity = Mass.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(MassUnit unit)
        {
            // See if there is a unit available that is not the base unit.
            var fromUnit = Mass.Units.FirstOrDefault(u => u != Mass.BaseUnit && u != MassUnit.Undefined);

            // If there is only one unit for the quantity, we must use the base unit.
            if (fromUnit == MassUnit.Undefined)
                fromUnit = Mass.BaseUnit;

            var quantity = Mass.From(3.0, fromUnit);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Mass kilogram = Mass.FromKilograms(1);
            AssertEx.EqualTolerance(1, Mass.FromCentigrams(kilogram.Centigrams).Kilograms, CentigramsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromDecagrams(kilogram.Decagrams).Kilograms, DecagramsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromDecigrams(kilogram.Decigrams).Kilograms, DecigramsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromEarthMasses(kilogram.EarthMasses).Kilograms, EarthMassesTolerance);
            AssertEx.EqualTolerance(1, Mass.FromGrains(kilogram.Grains).Kilograms, GrainsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromGrams(kilogram.Grams).Kilograms, GramsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromHectograms(kilogram.Hectograms).Kilograms, HectogramsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromKilograms(kilogram.Kilograms).Kilograms, KilogramsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromKilopounds(kilogram.Kilopounds).Kilograms, KilopoundsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromKilotonnes(kilogram.Kilotonnes).Kilograms, KilotonnesTolerance);
            AssertEx.EqualTolerance(1, Mass.FromLongHundredweight(kilogram.LongHundredweight).Kilograms, LongHundredweightTolerance);
            AssertEx.EqualTolerance(1, Mass.FromLongTons(kilogram.LongTons).Kilograms, LongTonsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromMegapounds(kilogram.Megapounds).Kilograms, MegapoundsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromMegatonnes(kilogram.Megatonnes).Kilograms, MegatonnesTolerance);
            AssertEx.EqualTolerance(1, Mass.FromMicrograms(kilogram.Micrograms).Kilograms, MicrogramsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromMilligrams(kilogram.Milligrams).Kilograms, MilligramsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromNanograms(kilogram.Nanograms).Kilograms, NanogramsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromOunces(kilogram.Ounces).Kilograms, OuncesTolerance);
            AssertEx.EqualTolerance(1, Mass.FromPounds(kilogram.Pounds).Kilograms, PoundsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromShortHundredweight(kilogram.ShortHundredweight).Kilograms, ShortHundredweightTolerance);
            AssertEx.EqualTolerance(1, Mass.FromShortTons(kilogram.ShortTons).Kilograms, ShortTonsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromSlugs(kilogram.Slugs).Kilograms, SlugsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromSolarMasses(kilogram.SolarMasses).Kilograms, SolarMassesTolerance);
            AssertEx.EqualTolerance(1, Mass.FromStone(kilogram.Stone).Kilograms, StoneTolerance);
            AssertEx.EqualTolerance(1, Mass.FromTonnes(kilogram.Tonnes).Kilograms, TonnesTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Mass v = Mass.FromKilograms(1);
            AssertEx.EqualTolerance(-1, -v.Kilograms, KilogramsTolerance);
            AssertEx.EqualTolerance(2, (Mass.FromKilograms(3)-v).Kilograms, KilogramsTolerance);
            AssertEx.EqualTolerance(2, (v + v).Kilograms, KilogramsTolerance);
            AssertEx.EqualTolerance(10, (v*10).Kilograms, KilogramsTolerance);
            AssertEx.EqualTolerance(10, (10*v).Kilograms, KilogramsTolerance);
            AssertEx.EqualTolerance(2, (Mass.FromKilograms(10)/5).Kilograms, KilogramsTolerance);
            AssertEx.EqualTolerance(2, Mass.FromKilograms(10)/Mass.FromKilograms(5), KilogramsTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            Mass oneKilogram = Mass.FromKilograms(1);
            Mass twoKilograms = Mass.FromKilograms(2);

            Assert.True(oneKilogram < twoKilograms);
            Assert.True(oneKilogram <= twoKilograms);
            Assert.True(twoKilograms > oneKilogram);
            Assert.True(twoKilograms >= oneKilogram);

            Assert.False(oneKilogram > twoKilograms);
            Assert.False(oneKilogram >= twoKilograms);
            Assert.False(twoKilograms < oneKilogram);
            Assert.False(twoKilograms <= oneKilogram);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Mass kilogram = Mass.FromKilograms(1);
            Assert.Equal(0, kilogram.CompareTo(kilogram));
            Assert.True(kilogram.CompareTo(Mass.Zero) > 0);
            Assert.True(Mass.Zero.CompareTo(kilogram) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Mass kilogram = Mass.FromKilograms(1);
            Assert.Throws<ArgumentException>(() => kilogram.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Mass kilogram = Mass.FromKilograms(1);
            Assert.Throws<ArgumentNullException>(() => kilogram.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = Mass.FromKilograms(1);
            var b = Mass.FromKilograms(2);

#pragma warning disable CS8073
// ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
#pragma warning restore CS8073
        }

        [Fact]
        public void Equals_SameType_IsImplemented()
        {
            var a = Mass.FromKilograms(1);
            var b = Mass.FromKilograms(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
        }

        [Fact]
        public void Equals_QuantityAsObject_IsImplemented()
        {
            object a = Mass.FromKilograms(1);
            object b = Mass.FromKilograms(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals((object)null));
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = Mass.FromKilograms(1);
            Assert.True(v.Equals(Mass.FromKilograms(1), KilogramsTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(Mass.Zero, KilogramsTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = Mass.FromKilograms(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(Mass.FromKilograms(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Mass kilogram = Mass.FromKilograms(1);
            Assert.False(kilogram.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Mass kilogram = Mass.FromKilograms(1);
            Assert.False(kilogram.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(MassUnit.Undefined, Mass.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(MassUnit)).Cast<MassUnit>();
            foreach(var unit in units)
            {
                if (unit == MassUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Mass.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentUICulture;
            Thread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 cg", new Mass(1, MassUnit.Centigram).ToString());
                Assert.Equal("1 dag", new Mass(1, MassUnit.Decagram).ToString());
                Assert.Equal("1 dg", new Mass(1, MassUnit.Decigram).ToString());
                Assert.Equal("1 em", new Mass(1, MassUnit.EarthMass).ToString());
                Assert.Equal("1 gr", new Mass(1, MassUnit.Grain).ToString());
                Assert.Equal("1 g", new Mass(1, MassUnit.Gram).ToString());
                Assert.Equal("1 hg", new Mass(1, MassUnit.Hectogram).ToString());
                Assert.Equal("1 kg", new Mass(1, MassUnit.Kilogram).ToString());
                Assert.Equal("1 klb", new Mass(1, MassUnit.Kilopound).ToString());
                Assert.Equal("1 kt", new Mass(1, MassUnit.Kilotonne).ToString());
                Assert.Equal("1 cwt", new Mass(1, MassUnit.LongHundredweight).ToString());
                Assert.Equal("1 long tn", new Mass(1, MassUnit.LongTon).ToString());
                Assert.Equal("1 Mlb", new Mass(1, MassUnit.Megapound).ToString());
                Assert.Equal("1 Mt", new Mass(1, MassUnit.Megatonne).ToString());
                Assert.Equal("1 µg", new Mass(1, MassUnit.Microgram).ToString());
                Assert.Equal("1 mg", new Mass(1, MassUnit.Milligram).ToString());
                Assert.Equal("1 ng", new Mass(1, MassUnit.Nanogram).ToString());
                Assert.Equal("1 oz", new Mass(1, MassUnit.Ounce).ToString());
                Assert.Equal("1 lb", new Mass(1, MassUnit.Pound).ToString());
                Assert.Equal("1 cwt", new Mass(1, MassUnit.ShortHundredweight).ToString());
                Assert.Equal("1 t (short)", new Mass(1, MassUnit.ShortTon).ToString());
                Assert.Equal("1 slug", new Mass(1, MassUnit.Slug).ToString());
                Assert.Equal("1 M⊙", new Mass(1, MassUnit.SolarMass).ToString());
                Assert.Equal("1 st", new Mass(1, MassUnit.Stone).ToString());
                Assert.Equal("1 t", new Mass(1, MassUnit.Tonne).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentUICulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 cg", new Mass(1, MassUnit.Centigram).ToString(swedishCulture));
            Assert.Equal("1 dag", new Mass(1, MassUnit.Decagram).ToString(swedishCulture));
            Assert.Equal("1 dg", new Mass(1, MassUnit.Decigram).ToString(swedishCulture));
            Assert.Equal("1 em", new Mass(1, MassUnit.EarthMass).ToString(swedishCulture));
            Assert.Equal("1 gr", new Mass(1, MassUnit.Grain).ToString(swedishCulture));
            Assert.Equal("1 g", new Mass(1, MassUnit.Gram).ToString(swedishCulture));
            Assert.Equal("1 hg", new Mass(1, MassUnit.Hectogram).ToString(swedishCulture));
            Assert.Equal("1 kg", new Mass(1, MassUnit.Kilogram).ToString(swedishCulture));
            Assert.Equal("1 klb", new Mass(1, MassUnit.Kilopound).ToString(swedishCulture));
            Assert.Equal("1 kt", new Mass(1, MassUnit.Kilotonne).ToString(swedishCulture));
            Assert.Equal("1 cwt", new Mass(1, MassUnit.LongHundredweight).ToString(swedishCulture));
            Assert.Equal("1 long tn", new Mass(1, MassUnit.LongTon).ToString(swedishCulture));
            Assert.Equal("1 Mlb", new Mass(1, MassUnit.Megapound).ToString(swedishCulture));
            Assert.Equal("1 Mt", new Mass(1, MassUnit.Megatonne).ToString(swedishCulture));
            Assert.Equal("1 µg", new Mass(1, MassUnit.Microgram).ToString(swedishCulture));
            Assert.Equal("1 mg", new Mass(1, MassUnit.Milligram).ToString(swedishCulture));
            Assert.Equal("1 ng", new Mass(1, MassUnit.Nanogram).ToString(swedishCulture));
            Assert.Equal("1 oz", new Mass(1, MassUnit.Ounce).ToString(swedishCulture));
            Assert.Equal("1 lb", new Mass(1, MassUnit.Pound).ToString(swedishCulture));
            Assert.Equal("1 cwt", new Mass(1, MassUnit.ShortHundredweight).ToString(swedishCulture));
            Assert.Equal("1 t (short)", new Mass(1, MassUnit.ShortTon).ToString(swedishCulture));
            Assert.Equal("1 slug", new Mass(1, MassUnit.Slug).ToString(swedishCulture));
            Assert.Equal("1 M⊙", new Mass(1, MassUnit.SolarMass).ToString(swedishCulture));
            Assert.Equal("1 st", new Mass(1, MassUnit.Stone).ToString(swedishCulture));
            Assert.Equal("1 t", new Mass(1, MassUnit.Tonne).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentUICulture;
            try
            {
                CultureInfo.CurrentUICulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 kg", new Mass(0.123456, MassUnit.Kilogram).ToString("s1"));
                Assert.Equal("0.12 kg", new Mass(0.123456, MassUnit.Kilogram).ToString("s2"));
                Assert.Equal("0.123 kg", new Mass(0.123456, MassUnit.Kilogram).ToString("s3"));
                Assert.Equal("0.1235 kg", new Mass(0.123456, MassUnit.Kilogram).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentUICulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 kg", new Mass(0.123456, MassUnit.Kilogram).ToString("s1", culture));
            Assert.Equal("0.12 kg", new Mass(0.123456, MassUnit.Kilogram).ToString("s2", culture));
            Assert.Equal("0.123 kg", new Mass(0.123456, MassUnit.Kilogram).ToString("s3", culture));
            Assert.Equal("0.1235 kg", new Mass(0.123456, MassUnit.Kilogram).ToString("s4", culture));
        }


        [Fact]
        public void ToString_NullFormat_ThrowsArgumentNullException()
        {
            var quantity = Mass.FromKilograms(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, null, null));
        }

        [Fact]
        public void ToString_NullArgs_ThrowsArgumentNullException()
        {
            var quantity = Mass.FromKilograms(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, "g", null));
        }

        [Fact]
        public void ToString_NullProvider_EqualsCurrentUICulture()
        {
            var quantity = Mass.FromKilograms(1.0);
            Assert.Equal(quantity.ToString(CultureInfo.CurrentUICulture, "g"), quantity.ToString(null, "g"));
        }


        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = Mass.FromKilograms(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = Mass.FromKilograms(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = Mass.FromKilograms(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = Mass.FromKilograms(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = Mass.FromKilograms(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = Mass.FromKilograms(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = Mass.FromKilograms(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = Mass.FromKilograms(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = Mass.FromKilograms(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = Mass.FromKilograms(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = Mass.FromKilograms(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = Mass.FromKilograms(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = Mass.FromKilograms(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = Mass.FromKilograms(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = Mass.FromKilograms(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = Mass.FromKilograms(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(Mass)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = Mass.FromKilograms(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(MassUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityType_EqualsQuantityType()
        {
            var quantity = Mass.FromKilograms(1.0);
            Assert.Equal(QuantityType.Mass, Convert.ChangeType(quantity, typeof(QuantityType)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = Mass.FromKilograms(1.0);
            Assert.Equal(Mass.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = Mass.FromKilograms(1.0);
            Assert.Equal(Mass.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = Mass.FromKilograms(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = Mass.FromKilograms(1.0);
            Assert.Equal(new {Mass.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = Mass.FromKilograms(value);
            Assert.Equal(Mass.FromKilograms(-value), -quantity);
        }
    }
}
