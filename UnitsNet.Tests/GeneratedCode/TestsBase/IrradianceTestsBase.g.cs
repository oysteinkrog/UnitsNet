//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Irradiance.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class IrradianceTestsBase : QuantityTestsBase
    {
        protected abstract double KilowattsPerSquareCentimeterInOneWattPerSquareMeter { get; }
        protected abstract double KilowattsPerSquareMeterInOneWattPerSquareMeter { get; }
        protected abstract double MegawattsPerSquareCentimeterInOneWattPerSquareMeter { get; }
        protected abstract double MegawattsPerSquareMeterInOneWattPerSquareMeter { get; }
        protected abstract double MicrowattsPerSquareCentimeterInOneWattPerSquareMeter { get; }
        protected abstract double MicrowattsPerSquareMeterInOneWattPerSquareMeter { get; }
        protected abstract double MilliwattsPerSquareCentimeterInOneWattPerSquareMeter { get; }
        protected abstract double MilliwattsPerSquareMeterInOneWattPerSquareMeter { get; }
        protected abstract double NanowattsPerSquareCentimeterInOneWattPerSquareMeter { get; }
        protected abstract double NanowattsPerSquareMeterInOneWattPerSquareMeter { get; }
        protected abstract double PicowattsPerSquareCentimeterInOneWattPerSquareMeter { get; }
        protected abstract double PicowattsPerSquareMeterInOneWattPerSquareMeter { get; }
        protected abstract double WattsPerSquareCentimeterInOneWattPerSquareMeter { get; }
        protected abstract double WattsPerSquareMeterInOneWattPerSquareMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double KilowattsPerSquareCentimeterTolerance { get { return 1e-5; } }
        protected virtual double KilowattsPerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double MegawattsPerSquareCentimeterTolerance { get { return 1e-5; } }
        protected virtual double MegawattsPerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double MicrowattsPerSquareCentimeterTolerance { get { return 1e-5; } }
        protected virtual double MicrowattsPerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double MilliwattsPerSquareCentimeterTolerance { get { return 1e-5; } }
        protected virtual double MilliwattsPerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double NanowattsPerSquareCentimeterTolerance { get { return 1e-5; } }
        protected virtual double NanowattsPerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double PicowattsPerSquareCentimeterTolerance { get { return 1e-5; } }
        protected virtual double PicowattsPerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double WattsPerSquareCentimeterTolerance { get { return 1e-5; } }
        protected virtual double WattsPerSquareMeterTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(IrradianceUnit unit)
        {
            return unit switch
            {
                IrradianceUnit.KilowattPerSquareCentimeter => (KilowattsPerSquareCentimeterInOneWattPerSquareMeter, KilowattsPerSquareCentimeterTolerance),
                IrradianceUnit.KilowattPerSquareMeter => (KilowattsPerSquareMeterInOneWattPerSquareMeter, KilowattsPerSquareMeterTolerance),
                IrradianceUnit.MegawattPerSquareCentimeter => (MegawattsPerSquareCentimeterInOneWattPerSquareMeter, MegawattsPerSquareCentimeterTolerance),
                IrradianceUnit.MegawattPerSquareMeter => (MegawattsPerSquareMeterInOneWattPerSquareMeter, MegawattsPerSquareMeterTolerance),
                IrradianceUnit.MicrowattPerSquareCentimeter => (MicrowattsPerSquareCentimeterInOneWattPerSquareMeter, MicrowattsPerSquareCentimeterTolerance),
                IrradianceUnit.MicrowattPerSquareMeter => (MicrowattsPerSquareMeterInOneWattPerSquareMeter, MicrowattsPerSquareMeterTolerance),
                IrradianceUnit.MilliwattPerSquareCentimeter => (MilliwattsPerSquareCentimeterInOneWattPerSquareMeter, MilliwattsPerSquareCentimeterTolerance),
                IrradianceUnit.MilliwattPerSquareMeter => (MilliwattsPerSquareMeterInOneWattPerSquareMeter, MilliwattsPerSquareMeterTolerance),
                IrradianceUnit.NanowattPerSquareCentimeter => (NanowattsPerSquareCentimeterInOneWattPerSquareMeter, NanowattsPerSquareCentimeterTolerance),
                IrradianceUnit.NanowattPerSquareMeter => (NanowattsPerSquareMeterInOneWattPerSquareMeter, NanowattsPerSquareMeterTolerance),
                IrradianceUnit.PicowattPerSquareCentimeter => (PicowattsPerSquareCentimeterInOneWattPerSquareMeter, PicowattsPerSquareCentimeterTolerance),
                IrradianceUnit.PicowattPerSquareMeter => (PicowattsPerSquareMeterInOneWattPerSquareMeter, PicowattsPerSquareMeterTolerance),
                IrradianceUnit.WattPerSquareCentimeter => (WattsPerSquareCentimeterInOneWattPerSquareMeter, WattsPerSquareCentimeterTolerance),
                IrradianceUnit.WattPerSquareMeter => (WattsPerSquareMeterInOneWattPerSquareMeter, WattsPerSquareMeterTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { IrradianceUnit.KilowattPerSquareCentimeter },
            new object[] { IrradianceUnit.KilowattPerSquareMeter },
            new object[] { IrradianceUnit.MegawattPerSquareCentimeter },
            new object[] { IrradianceUnit.MegawattPerSquareMeter },
            new object[] { IrradianceUnit.MicrowattPerSquareCentimeter },
            new object[] { IrradianceUnit.MicrowattPerSquareMeter },
            new object[] { IrradianceUnit.MilliwattPerSquareCentimeter },
            new object[] { IrradianceUnit.MilliwattPerSquareMeter },
            new object[] { IrradianceUnit.NanowattPerSquareCentimeter },
            new object[] { IrradianceUnit.NanowattPerSquareMeter },
            new object[] { IrradianceUnit.PicowattPerSquareCentimeter },
            new object[] { IrradianceUnit.PicowattPerSquareMeter },
            new object[] { IrradianceUnit.WattPerSquareCentimeter },
            new object[] { IrradianceUnit.WattPerSquareMeter },
        };

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Irradiance((double)0.0, IrradianceUnit.Undefined));
        }

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new Irradiance();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(IrradianceUnit.WattPerSquareMeter, quantity.Unit);
        }


        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Irradiance(double.PositiveInfinity, IrradianceUnit.WattPerSquareMeter));
            Assert.Throws<ArgumentException>(() => new Irradiance(double.NegativeInfinity, IrradianceUnit.WattPerSquareMeter));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Irradiance(double.NaN, IrradianceUnit.WattPerSquareMeter));
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new Irradiance(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            Func<object> TestCode = () => new Irradiance(value: 1, unitSystem: UnitSystem.SI);
            if (SupportsSIUnitSystem)
            {
                var quantity = (Irradiance) TestCode();
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(TestCode);
            }
        }

        [Fact]
        public void Irradiance_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new Irradiance(1, IrradianceUnit.WattPerSquareMeter);

            QuantityInfo<IrradianceUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(Irradiance.Zero, quantityInfo.Zero);
            Assert.Equal("Irradiance", quantityInfo.Name);
            Assert.Equal(QuantityType.Irradiance, quantityInfo.QuantityType);

            var units = EnumUtils.GetEnumValues<IrradianceUnit>().Except(new[] {IrradianceUnit.Undefined}).OrderBy(x => x.ToString()).ToArray();
            var unitNames = units.Select(x => x.ToString());

            // Obsolete members
            Assert.Equal(units, quantityInfo.Units);
            Assert.Equal(unitNames, quantityInfo.UnitNames);
        }

        [Fact]
        public void WattPerSquareMeterToIrradianceUnits()
        {
            Irradiance wattpersquaremeter = Irradiance.FromWattsPerSquareMeter(1);
            AssertEx.EqualTolerance(KilowattsPerSquareCentimeterInOneWattPerSquareMeter, wattpersquaremeter.KilowattsPerSquareCentimeter, KilowattsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(KilowattsPerSquareMeterInOneWattPerSquareMeter, wattpersquaremeter.KilowattsPerSquareMeter, KilowattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(MegawattsPerSquareCentimeterInOneWattPerSquareMeter, wattpersquaremeter.MegawattsPerSquareCentimeter, MegawattsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(MegawattsPerSquareMeterInOneWattPerSquareMeter, wattpersquaremeter.MegawattsPerSquareMeter, MegawattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(MicrowattsPerSquareCentimeterInOneWattPerSquareMeter, wattpersquaremeter.MicrowattsPerSquareCentimeter, MicrowattsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(MicrowattsPerSquareMeterInOneWattPerSquareMeter, wattpersquaremeter.MicrowattsPerSquareMeter, MicrowattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(MilliwattsPerSquareCentimeterInOneWattPerSquareMeter, wattpersquaremeter.MilliwattsPerSquareCentimeter, MilliwattsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(MilliwattsPerSquareMeterInOneWattPerSquareMeter, wattpersquaremeter.MilliwattsPerSquareMeter, MilliwattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(NanowattsPerSquareCentimeterInOneWattPerSquareMeter, wattpersquaremeter.NanowattsPerSquareCentimeter, NanowattsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(NanowattsPerSquareMeterInOneWattPerSquareMeter, wattpersquaremeter.NanowattsPerSquareMeter, NanowattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(PicowattsPerSquareCentimeterInOneWattPerSquareMeter, wattpersquaremeter.PicowattsPerSquareCentimeter, PicowattsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(PicowattsPerSquareMeterInOneWattPerSquareMeter, wattpersquaremeter.PicowattsPerSquareMeter, PicowattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(WattsPerSquareCentimeterInOneWattPerSquareMeter, wattpersquaremeter.WattsPerSquareCentimeter, WattsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(WattsPerSquareMeterInOneWattPerSquareMeter, wattpersquaremeter.WattsPerSquareMeter, WattsPerSquareMeterTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = Irradiance.From(1, IrradianceUnit.KilowattPerSquareCentimeter);
            AssertEx.EqualTolerance(1, quantity00.KilowattsPerSquareCentimeter, KilowattsPerSquareCentimeterTolerance);
            Assert.Equal(IrradianceUnit.KilowattPerSquareCentimeter, quantity00.Unit);

            var quantity01 = Irradiance.From(1, IrradianceUnit.KilowattPerSquareMeter);
            AssertEx.EqualTolerance(1, quantity01.KilowattsPerSquareMeter, KilowattsPerSquareMeterTolerance);
            Assert.Equal(IrradianceUnit.KilowattPerSquareMeter, quantity01.Unit);

            var quantity02 = Irradiance.From(1, IrradianceUnit.MegawattPerSquareCentimeter);
            AssertEx.EqualTolerance(1, quantity02.MegawattsPerSquareCentimeter, MegawattsPerSquareCentimeterTolerance);
            Assert.Equal(IrradianceUnit.MegawattPerSquareCentimeter, quantity02.Unit);

            var quantity03 = Irradiance.From(1, IrradianceUnit.MegawattPerSquareMeter);
            AssertEx.EqualTolerance(1, quantity03.MegawattsPerSquareMeter, MegawattsPerSquareMeterTolerance);
            Assert.Equal(IrradianceUnit.MegawattPerSquareMeter, quantity03.Unit);

            var quantity04 = Irradiance.From(1, IrradianceUnit.MicrowattPerSquareCentimeter);
            AssertEx.EqualTolerance(1, quantity04.MicrowattsPerSquareCentimeter, MicrowattsPerSquareCentimeterTolerance);
            Assert.Equal(IrradianceUnit.MicrowattPerSquareCentimeter, quantity04.Unit);

            var quantity05 = Irradiance.From(1, IrradianceUnit.MicrowattPerSquareMeter);
            AssertEx.EqualTolerance(1, quantity05.MicrowattsPerSquareMeter, MicrowattsPerSquareMeterTolerance);
            Assert.Equal(IrradianceUnit.MicrowattPerSquareMeter, quantity05.Unit);

            var quantity06 = Irradiance.From(1, IrradianceUnit.MilliwattPerSquareCentimeter);
            AssertEx.EqualTolerance(1, quantity06.MilliwattsPerSquareCentimeter, MilliwattsPerSquareCentimeterTolerance);
            Assert.Equal(IrradianceUnit.MilliwattPerSquareCentimeter, quantity06.Unit);

            var quantity07 = Irradiance.From(1, IrradianceUnit.MilliwattPerSquareMeter);
            AssertEx.EqualTolerance(1, quantity07.MilliwattsPerSquareMeter, MilliwattsPerSquareMeterTolerance);
            Assert.Equal(IrradianceUnit.MilliwattPerSquareMeter, quantity07.Unit);

            var quantity08 = Irradiance.From(1, IrradianceUnit.NanowattPerSquareCentimeter);
            AssertEx.EqualTolerance(1, quantity08.NanowattsPerSquareCentimeter, NanowattsPerSquareCentimeterTolerance);
            Assert.Equal(IrradianceUnit.NanowattPerSquareCentimeter, quantity08.Unit);

            var quantity09 = Irradiance.From(1, IrradianceUnit.NanowattPerSquareMeter);
            AssertEx.EqualTolerance(1, quantity09.NanowattsPerSquareMeter, NanowattsPerSquareMeterTolerance);
            Assert.Equal(IrradianceUnit.NanowattPerSquareMeter, quantity09.Unit);

            var quantity10 = Irradiance.From(1, IrradianceUnit.PicowattPerSquareCentimeter);
            AssertEx.EqualTolerance(1, quantity10.PicowattsPerSquareCentimeter, PicowattsPerSquareCentimeterTolerance);
            Assert.Equal(IrradianceUnit.PicowattPerSquareCentimeter, quantity10.Unit);

            var quantity11 = Irradiance.From(1, IrradianceUnit.PicowattPerSquareMeter);
            AssertEx.EqualTolerance(1, quantity11.PicowattsPerSquareMeter, PicowattsPerSquareMeterTolerance);
            Assert.Equal(IrradianceUnit.PicowattPerSquareMeter, quantity11.Unit);

            var quantity12 = Irradiance.From(1, IrradianceUnit.WattPerSquareCentimeter);
            AssertEx.EqualTolerance(1, quantity12.WattsPerSquareCentimeter, WattsPerSquareCentimeterTolerance);
            Assert.Equal(IrradianceUnit.WattPerSquareCentimeter, quantity12.Unit);

            var quantity13 = Irradiance.From(1, IrradianceUnit.WattPerSquareMeter);
            AssertEx.EqualTolerance(1, quantity13.WattsPerSquareMeter, WattsPerSquareMeterTolerance);
            Assert.Equal(IrradianceUnit.WattPerSquareMeter, quantity13.Unit);

        }

        [Fact]
        public void FromWattsPerSquareMeter_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => Irradiance.FromWattsPerSquareMeter(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => Irradiance.FromWattsPerSquareMeter(double.NegativeInfinity));
        }

        [Fact]
        public void FromWattsPerSquareMeter_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => Irradiance.FromWattsPerSquareMeter(double.NaN));
        }

        [Fact]
        public void As()
        {
            var wattpersquaremeter = Irradiance.FromWattsPerSquareMeter(1);
            AssertEx.EqualTolerance(KilowattsPerSquareCentimeterInOneWattPerSquareMeter, wattpersquaremeter.As(IrradianceUnit.KilowattPerSquareCentimeter), KilowattsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(KilowattsPerSquareMeterInOneWattPerSquareMeter, wattpersquaremeter.As(IrradianceUnit.KilowattPerSquareMeter), KilowattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(MegawattsPerSquareCentimeterInOneWattPerSquareMeter, wattpersquaremeter.As(IrradianceUnit.MegawattPerSquareCentimeter), MegawattsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(MegawattsPerSquareMeterInOneWattPerSquareMeter, wattpersquaremeter.As(IrradianceUnit.MegawattPerSquareMeter), MegawattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(MicrowattsPerSquareCentimeterInOneWattPerSquareMeter, wattpersquaremeter.As(IrradianceUnit.MicrowattPerSquareCentimeter), MicrowattsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(MicrowattsPerSquareMeterInOneWattPerSquareMeter, wattpersquaremeter.As(IrradianceUnit.MicrowattPerSquareMeter), MicrowattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(MilliwattsPerSquareCentimeterInOneWattPerSquareMeter, wattpersquaremeter.As(IrradianceUnit.MilliwattPerSquareCentimeter), MilliwattsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(MilliwattsPerSquareMeterInOneWattPerSquareMeter, wattpersquaremeter.As(IrradianceUnit.MilliwattPerSquareMeter), MilliwattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(NanowattsPerSquareCentimeterInOneWattPerSquareMeter, wattpersquaremeter.As(IrradianceUnit.NanowattPerSquareCentimeter), NanowattsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(NanowattsPerSquareMeterInOneWattPerSquareMeter, wattpersquaremeter.As(IrradianceUnit.NanowattPerSquareMeter), NanowattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(PicowattsPerSquareCentimeterInOneWattPerSquareMeter, wattpersquaremeter.As(IrradianceUnit.PicowattPerSquareCentimeter), PicowattsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(PicowattsPerSquareMeterInOneWattPerSquareMeter, wattpersquaremeter.As(IrradianceUnit.PicowattPerSquareMeter), PicowattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(WattsPerSquareCentimeterInOneWattPerSquareMeter, wattpersquaremeter.As(IrradianceUnit.WattPerSquareCentimeter), WattsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(WattsPerSquareMeterInOneWattPerSquareMeter, wattpersquaremeter.As(IrradianceUnit.WattPerSquareMeter), WattsPerSquareMeterTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new Irradiance(value: 1, unit: Irradiance.BaseUnit);
            Func<object> AsWithSIUnitSystem = () => quantity.As(UnitSystem.SI);

            if (SupportsSIUnitSystem)
            {
                var value = (double) AsWithSIUnitSystem();
                Assert.Equal(1, value);
            }
            else
            {
                Assert.Throws<ArgumentException>(AsWithSIUnitSystem);
            }
        }

        [Fact]
        public void Parse()
        {
            try
            {
                var parsed = Irradiance.Parse("1 kW/cm²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilowattsPerSquareCentimeter, KilowattsPerSquareCentimeterTolerance);
                Assert.Equal(IrradianceUnit.KilowattPerSquareCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Irradiance.Parse("1 kW/m²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilowattsPerSquareMeter, KilowattsPerSquareMeterTolerance);
                Assert.Equal(IrradianceUnit.KilowattPerSquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Irradiance.Parse("1 MW/cm²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MegawattsPerSquareCentimeter, MegawattsPerSquareCentimeterTolerance);
                Assert.Equal(IrradianceUnit.MegawattPerSquareCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Irradiance.Parse("1 MW/m²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MegawattsPerSquareMeter, MegawattsPerSquareMeterTolerance);
                Assert.Equal(IrradianceUnit.MegawattPerSquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Irradiance.Parse("1 µW/cm²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MicrowattsPerSquareCentimeter, MicrowattsPerSquareCentimeterTolerance);
                Assert.Equal(IrradianceUnit.MicrowattPerSquareCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Irradiance.Parse("1 µW/m²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MicrowattsPerSquareMeter, MicrowattsPerSquareMeterTolerance);
                Assert.Equal(IrradianceUnit.MicrowattPerSquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Irradiance.Parse("1 mW/cm²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MilliwattsPerSquareCentimeter, MilliwattsPerSquareCentimeterTolerance);
                Assert.Equal(IrradianceUnit.MilliwattPerSquareCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Irradiance.Parse("1 mW/m²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MilliwattsPerSquareMeter, MilliwattsPerSquareMeterTolerance);
                Assert.Equal(IrradianceUnit.MilliwattPerSquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Irradiance.Parse("1 nW/cm²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.NanowattsPerSquareCentimeter, NanowattsPerSquareCentimeterTolerance);
                Assert.Equal(IrradianceUnit.NanowattPerSquareCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Irradiance.Parse("1 nW/m²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.NanowattsPerSquareMeter, NanowattsPerSquareMeterTolerance);
                Assert.Equal(IrradianceUnit.NanowattPerSquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Irradiance.Parse("1 pW/cm²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PicowattsPerSquareCentimeter, PicowattsPerSquareCentimeterTolerance);
                Assert.Equal(IrradianceUnit.PicowattPerSquareCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Irradiance.Parse("1 pW/m²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PicowattsPerSquareMeter, PicowattsPerSquareMeterTolerance);
                Assert.Equal(IrradianceUnit.PicowattPerSquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Irradiance.Parse("1 W/cm²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.WattsPerSquareCentimeter, WattsPerSquareCentimeterTolerance);
                Assert.Equal(IrradianceUnit.WattPerSquareCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Irradiance.Parse("1 W/m²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.WattsPerSquareMeter, WattsPerSquareMeterTolerance);
                Assert.Equal(IrradianceUnit.WattPerSquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParse()
        {
            {
                Assert.True(Irradiance.TryParse("1 kW/cm²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilowattsPerSquareCentimeter, KilowattsPerSquareCentimeterTolerance);
                Assert.Equal(IrradianceUnit.KilowattPerSquareCentimeter, parsed.Unit);
            }

            {
                Assert.True(Irradiance.TryParse("1 kW/m²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilowattsPerSquareMeter, KilowattsPerSquareMeterTolerance);
                Assert.Equal(IrradianceUnit.KilowattPerSquareMeter, parsed.Unit);
            }

            {
                Assert.True(Irradiance.TryParse("1 µW/cm²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MicrowattsPerSquareCentimeter, MicrowattsPerSquareCentimeterTolerance);
                Assert.Equal(IrradianceUnit.MicrowattPerSquareCentimeter, parsed.Unit);
            }

            {
                Assert.True(Irradiance.TryParse("1 µW/m²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MicrowattsPerSquareMeter, MicrowattsPerSquareMeterTolerance);
                Assert.Equal(IrradianceUnit.MicrowattPerSquareMeter, parsed.Unit);
            }

            {
                Assert.True(Irradiance.TryParse("1 nW/cm²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.NanowattsPerSquareCentimeter, NanowattsPerSquareCentimeterTolerance);
                Assert.Equal(IrradianceUnit.NanowattPerSquareCentimeter, parsed.Unit);
            }

            {
                Assert.True(Irradiance.TryParse("1 nW/m²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.NanowattsPerSquareMeter, NanowattsPerSquareMeterTolerance);
                Assert.Equal(IrradianceUnit.NanowattPerSquareMeter, parsed.Unit);
            }

            {
                Assert.True(Irradiance.TryParse("1 pW/cm²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PicowattsPerSquareCentimeter, PicowattsPerSquareCentimeterTolerance);
                Assert.Equal(IrradianceUnit.PicowattPerSquareCentimeter, parsed.Unit);
            }

            {
                Assert.True(Irradiance.TryParse("1 pW/m²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PicowattsPerSquareMeter, PicowattsPerSquareMeterTolerance);
                Assert.Equal(IrradianceUnit.PicowattPerSquareMeter, parsed.Unit);
            }

            {
                Assert.True(Irradiance.TryParse("1 W/cm²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.WattsPerSquareCentimeter, WattsPerSquareCentimeterTolerance);
                Assert.Equal(IrradianceUnit.WattPerSquareCentimeter, parsed.Unit);
            }

            {
                Assert.True(Irradiance.TryParse("1 W/m²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.WattsPerSquareMeter, WattsPerSquareMeterTolerance);
                Assert.Equal(IrradianceUnit.WattPerSquareMeter, parsed.Unit);
            }

        }

        [Fact]
        public void ParseUnit()
        {
            try
            {
                var parsedUnit = Irradiance.ParseUnit("kW/cm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(IrradianceUnit.KilowattPerSquareCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Irradiance.ParseUnit("kW/m²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(IrradianceUnit.KilowattPerSquareMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Irradiance.ParseUnit("MW/cm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(IrradianceUnit.MegawattPerSquareCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Irradiance.ParseUnit("MW/m²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(IrradianceUnit.MegawattPerSquareMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Irradiance.ParseUnit("µW/cm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(IrradianceUnit.MicrowattPerSquareCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Irradiance.ParseUnit("µW/m²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(IrradianceUnit.MicrowattPerSquareMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Irradiance.ParseUnit("mW/cm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(IrradianceUnit.MilliwattPerSquareCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Irradiance.ParseUnit("mW/m²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(IrradianceUnit.MilliwattPerSquareMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Irradiance.ParseUnit("nW/cm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(IrradianceUnit.NanowattPerSquareCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Irradiance.ParseUnit("nW/m²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(IrradianceUnit.NanowattPerSquareMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Irradiance.ParseUnit("pW/cm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(IrradianceUnit.PicowattPerSquareCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Irradiance.ParseUnit("pW/m²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(IrradianceUnit.PicowattPerSquareMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Irradiance.ParseUnit("W/cm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(IrradianceUnit.WattPerSquareCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Irradiance.ParseUnit("W/m²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(IrradianceUnit.WattPerSquareMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParseUnit()
        {
            {
                Assert.True(Irradiance.TryParseUnit("kW/cm²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(IrradianceUnit.KilowattPerSquareCentimeter, parsedUnit);
            }

            {
                Assert.True(Irradiance.TryParseUnit("kW/m²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(IrradianceUnit.KilowattPerSquareMeter, parsedUnit);
            }

            {
                Assert.True(Irradiance.TryParseUnit("µW/cm²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(IrradianceUnit.MicrowattPerSquareCentimeter, parsedUnit);
            }

            {
                Assert.True(Irradiance.TryParseUnit("µW/m²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(IrradianceUnit.MicrowattPerSquareMeter, parsedUnit);
            }

            {
                Assert.True(Irradiance.TryParseUnit("nW/cm²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(IrradianceUnit.NanowattPerSquareCentimeter, parsedUnit);
            }

            {
                Assert.True(Irradiance.TryParseUnit("nW/m²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(IrradianceUnit.NanowattPerSquareMeter, parsedUnit);
            }

            {
                Assert.True(Irradiance.TryParseUnit("pW/cm²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(IrradianceUnit.PicowattPerSquareCentimeter, parsedUnit);
            }

            {
                Assert.True(Irradiance.TryParseUnit("pW/m²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(IrradianceUnit.PicowattPerSquareMeter, parsedUnit);
            }

            {
                Assert.True(Irradiance.TryParseUnit("W/cm²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(IrradianceUnit.WattPerSquareCentimeter, parsedUnit);
            }

            {
                Assert.True(Irradiance.TryParseUnit("W/m²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(IrradianceUnit.WattPerSquareMeter, parsedUnit);
            }

        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(IrradianceUnit unit)
        {
            var inBaseUnits = Irradiance.From(1.0, Irradiance.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, (double)converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(IrradianceUnit unit)
        {
            var quantity = Irradiance.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(IrradianceUnit unit)
        {
            // See if there is a unit available that is not the base unit.
            var fromUnit = Irradiance.Units.FirstOrDefault(u => u != Irradiance.BaseUnit && u != IrradianceUnit.Undefined);

            // If there is only one unit for the quantity, we must use the base unit.
            if (fromUnit == IrradianceUnit.Undefined)
                fromUnit = Irradiance.BaseUnit;

            var quantity = Irradiance.From(3.0, fromUnit);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Irradiance wattpersquaremeter = Irradiance.FromWattsPerSquareMeter(1);
            AssertEx.EqualTolerance(1, Irradiance.FromKilowattsPerSquareCentimeter(wattpersquaremeter.KilowattsPerSquareCentimeter).WattsPerSquareMeter, KilowattsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(1, Irradiance.FromKilowattsPerSquareMeter(wattpersquaremeter.KilowattsPerSquareMeter).WattsPerSquareMeter, KilowattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, Irradiance.FromMegawattsPerSquareCentimeter(wattpersquaremeter.MegawattsPerSquareCentimeter).WattsPerSquareMeter, MegawattsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(1, Irradiance.FromMegawattsPerSquareMeter(wattpersquaremeter.MegawattsPerSquareMeter).WattsPerSquareMeter, MegawattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, Irradiance.FromMicrowattsPerSquareCentimeter(wattpersquaremeter.MicrowattsPerSquareCentimeter).WattsPerSquareMeter, MicrowattsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(1, Irradiance.FromMicrowattsPerSquareMeter(wattpersquaremeter.MicrowattsPerSquareMeter).WattsPerSquareMeter, MicrowattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, Irradiance.FromMilliwattsPerSquareCentimeter(wattpersquaremeter.MilliwattsPerSquareCentimeter).WattsPerSquareMeter, MilliwattsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(1, Irradiance.FromMilliwattsPerSquareMeter(wattpersquaremeter.MilliwattsPerSquareMeter).WattsPerSquareMeter, MilliwattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, Irradiance.FromNanowattsPerSquareCentimeter(wattpersquaremeter.NanowattsPerSquareCentimeter).WattsPerSquareMeter, NanowattsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(1, Irradiance.FromNanowattsPerSquareMeter(wattpersquaremeter.NanowattsPerSquareMeter).WattsPerSquareMeter, NanowattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, Irradiance.FromPicowattsPerSquareCentimeter(wattpersquaremeter.PicowattsPerSquareCentimeter).WattsPerSquareMeter, PicowattsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(1, Irradiance.FromPicowattsPerSquareMeter(wattpersquaremeter.PicowattsPerSquareMeter).WattsPerSquareMeter, PicowattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, Irradiance.FromWattsPerSquareCentimeter(wattpersquaremeter.WattsPerSquareCentimeter).WattsPerSquareMeter, WattsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(1, Irradiance.FromWattsPerSquareMeter(wattpersquaremeter.WattsPerSquareMeter).WattsPerSquareMeter, WattsPerSquareMeterTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Irradiance v = Irradiance.FromWattsPerSquareMeter(1);
            AssertEx.EqualTolerance(-1, -v.WattsPerSquareMeter, WattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(2, (Irradiance.FromWattsPerSquareMeter(3)-v).WattsPerSquareMeter, WattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(2, (v + v).WattsPerSquareMeter, WattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(10, (v*10).WattsPerSquareMeter, WattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(10, (10*v).WattsPerSquareMeter, WattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(2, (Irradiance.FromWattsPerSquareMeter(10)/5).WattsPerSquareMeter, WattsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(2, Irradiance.FromWattsPerSquareMeter(10)/Irradiance.FromWattsPerSquareMeter(5), WattsPerSquareMeterTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            Irradiance oneWattPerSquareMeter = Irradiance.FromWattsPerSquareMeter(1);
            Irradiance twoWattsPerSquareMeter = Irradiance.FromWattsPerSquareMeter(2);

            Assert.True(oneWattPerSquareMeter < twoWattsPerSquareMeter);
            Assert.True(oneWattPerSquareMeter <= twoWattsPerSquareMeter);
            Assert.True(twoWattsPerSquareMeter > oneWattPerSquareMeter);
            Assert.True(twoWattsPerSquareMeter >= oneWattPerSquareMeter);

            Assert.False(oneWattPerSquareMeter > twoWattsPerSquareMeter);
            Assert.False(oneWattPerSquareMeter >= twoWattsPerSquareMeter);
            Assert.False(twoWattsPerSquareMeter < oneWattPerSquareMeter);
            Assert.False(twoWattsPerSquareMeter <= oneWattPerSquareMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Irradiance wattpersquaremeter = Irradiance.FromWattsPerSquareMeter(1);
            Assert.Equal(0, wattpersquaremeter.CompareTo(wattpersquaremeter));
            Assert.True(wattpersquaremeter.CompareTo(Irradiance.Zero) > 0);
            Assert.True(Irradiance.Zero.CompareTo(wattpersquaremeter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Irradiance wattpersquaremeter = Irradiance.FromWattsPerSquareMeter(1);
            Assert.Throws<ArgumentException>(() => wattpersquaremeter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Irradiance wattpersquaremeter = Irradiance.FromWattsPerSquareMeter(1);
            Assert.Throws<ArgumentNullException>(() => wattpersquaremeter.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = Irradiance.FromWattsPerSquareMeter(1);
            var b = Irradiance.FromWattsPerSquareMeter(2);

#pragma warning disable CS8073
// ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
#pragma warning restore CS8073
        }

        [Fact]
        public void Equals_SameType_IsImplemented()
        {
            var a = Irradiance.FromWattsPerSquareMeter(1);
            var b = Irradiance.FromWattsPerSquareMeter(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
        }

        [Fact]
        public void Equals_QuantityAsObject_IsImplemented()
        {
            object a = Irradiance.FromWattsPerSquareMeter(1);
            object b = Irradiance.FromWattsPerSquareMeter(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals((object)null));
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = Irradiance.FromWattsPerSquareMeter(1);
            Assert.True(v.Equals(Irradiance.FromWattsPerSquareMeter(1), WattsPerSquareMeterTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(Irradiance.Zero, WattsPerSquareMeterTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = Irradiance.FromWattsPerSquareMeter(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(Irradiance.FromWattsPerSquareMeter(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Irradiance wattpersquaremeter = Irradiance.FromWattsPerSquareMeter(1);
            Assert.False(wattpersquaremeter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Irradiance wattpersquaremeter = Irradiance.FromWattsPerSquareMeter(1);
            Assert.False(wattpersquaremeter.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(IrradianceUnit.Undefined, Irradiance.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(IrradianceUnit)).Cast<IrradianceUnit>();
            foreach(var unit in units)
            {
                if (unit == IrradianceUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Irradiance.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentUICulture;
            Thread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 kW/cm²", new Irradiance(1, IrradianceUnit.KilowattPerSquareCentimeter).ToString());
                Assert.Equal("1 kW/m²", new Irradiance(1, IrradianceUnit.KilowattPerSquareMeter).ToString());
                Assert.Equal("1 MW/cm²", new Irradiance(1, IrradianceUnit.MegawattPerSquareCentimeter).ToString());
                Assert.Equal("1 MW/m²", new Irradiance(1, IrradianceUnit.MegawattPerSquareMeter).ToString());
                Assert.Equal("1 µW/cm²", new Irradiance(1, IrradianceUnit.MicrowattPerSquareCentimeter).ToString());
                Assert.Equal("1 µW/m²", new Irradiance(1, IrradianceUnit.MicrowattPerSquareMeter).ToString());
                Assert.Equal("1 mW/cm²", new Irradiance(1, IrradianceUnit.MilliwattPerSquareCentimeter).ToString());
                Assert.Equal("1 mW/m²", new Irradiance(1, IrradianceUnit.MilliwattPerSquareMeter).ToString());
                Assert.Equal("1 nW/cm²", new Irradiance(1, IrradianceUnit.NanowattPerSquareCentimeter).ToString());
                Assert.Equal("1 nW/m²", new Irradiance(1, IrradianceUnit.NanowattPerSquareMeter).ToString());
                Assert.Equal("1 pW/cm²", new Irradiance(1, IrradianceUnit.PicowattPerSquareCentimeter).ToString());
                Assert.Equal("1 pW/m²", new Irradiance(1, IrradianceUnit.PicowattPerSquareMeter).ToString());
                Assert.Equal("1 W/cm²", new Irradiance(1, IrradianceUnit.WattPerSquareCentimeter).ToString());
                Assert.Equal("1 W/m²", new Irradiance(1, IrradianceUnit.WattPerSquareMeter).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentUICulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 kW/cm²", new Irradiance(1, IrradianceUnit.KilowattPerSquareCentimeter).ToString(swedishCulture));
            Assert.Equal("1 kW/m²", new Irradiance(1, IrradianceUnit.KilowattPerSquareMeter).ToString(swedishCulture));
            Assert.Equal("1 MW/cm²", new Irradiance(1, IrradianceUnit.MegawattPerSquareCentimeter).ToString(swedishCulture));
            Assert.Equal("1 MW/m²", new Irradiance(1, IrradianceUnit.MegawattPerSquareMeter).ToString(swedishCulture));
            Assert.Equal("1 µW/cm²", new Irradiance(1, IrradianceUnit.MicrowattPerSquareCentimeter).ToString(swedishCulture));
            Assert.Equal("1 µW/m²", new Irradiance(1, IrradianceUnit.MicrowattPerSquareMeter).ToString(swedishCulture));
            Assert.Equal("1 mW/cm²", new Irradiance(1, IrradianceUnit.MilliwattPerSquareCentimeter).ToString(swedishCulture));
            Assert.Equal("1 mW/m²", new Irradiance(1, IrradianceUnit.MilliwattPerSquareMeter).ToString(swedishCulture));
            Assert.Equal("1 nW/cm²", new Irradiance(1, IrradianceUnit.NanowattPerSquareCentimeter).ToString(swedishCulture));
            Assert.Equal("1 nW/m²", new Irradiance(1, IrradianceUnit.NanowattPerSquareMeter).ToString(swedishCulture));
            Assert.Equal("1 pW/cm²", new Irradiance(1, IrradianceUnit.PicowattPerSquareCentimeter).ToString(swedishCulture));
            Assert.Equal("1 pW/m²", new Irradiance(1, IrradianceUnit.PicowattPerSquareMeter).ToString(swedishCulture));
            Assert.Equal("1 W/cm²", new Irradiance(1, IrradianceUnit.WattPerSquareCentimeter).ToString(swedishCulture));
            Assert.Equal("1 W/m²", new Irradiance(1, IrradianceUnit.WattPerSquareMeter).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentUICulture;
            try
            {
                CultureInfo.CurrentUICulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 W/m²", new Irradiance(0.123456, IrradianceUnit.WattPerSquareMeter).ToString("s1"));
                Assert.Equal("0.12 W/m²", new Irradiance(0.123456, IrradianceUnit.WattPerSquareMeter).ToString("s2"));
                Assert.Equal("0.123 W/m²", new Irradiance(0.123456, IrradianceUnit.WattPerSquareMeter).ToString("s3"));
                Assert.Equal("0.1235 W/m²", new Irradiance(0.123456, IrradianceUnit.WattPerSquareMeter).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentUICulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 W/m²", new Irradiance(0.123456, IrradianceUnit.WattPerSquareMeter).ToString("s1", culture));
            Assert.Equal("0.12 W/m²", new Irradiance(0.123456, IrradianceUnit.WattPerSquareMeter).ToString("s2", culture));
            Assert.Equal("0.123 W/m²", new Irradiance(0.123456, IrradianceUnit.WattPerSquareMeter).ToString("s3", culture));
            Assert.Equal("0.1235 W/m²", new Irradiance(0.123456, IrradianceUnit.WattPerSquareMeter).ToString("s4", culture));
        }


        [Fact]
        public void ToString_NullFormat_ThrowsArgumentNullException()
        {
            var quantity = Irradiance.FromWattsPerSquareMeter(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, null, null));
        }

        [Fact]
        public void ToString_NullArgs_ThrowsArgumentNullException()
        {
            var quantity = Irradiance.FromWattsPerSquareMeter(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, "g", null));
        }

        [Fact]
        public void ToString_NullProvider_EqualsCurrentUICulture()
        {
            var quantity = Irradiance.FromWattsPerSquareMeter(1.0);
            Assert.Equal(quantity.ToString(CultureInfo.CurrentUICulture, "g"), quantity.ToString(null, "g"));
        }


        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = Irradiance.FromWattsPerSquareMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = Irradiance.FromWattsPerSquareMeter(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = Irradiance.FromWattsPerSquareMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = Irradiance.FromWattsPerSquareMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = Irradiance.FromWattsPerSquareMeter(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = Irradiance.FromWattsPerSquareMeter(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = Irradiance.FromWattsPerSquareMeter(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = Irradiance.FromWattsPerSquareMeter(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = Irradiance.FromWattsPerSquareMeter(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = Irradiance.FromWattsPerSquareMeter(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = Irradiance.FromWattsPerSquareMeter(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = Irradiance.FromWattsPerSquareMeter(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = Irradiance.FromWattsPerSquareMeter(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = Irradiance.FromWattsPerSquareMeter(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = Irradiance.FromWattsPerSquareMeter(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = Irradiance.FromWattsPerSquareMeter(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(Irradiance)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = Irradiance.FromWattsPerSquareMeter(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(IrradianceUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityType_EqualsQuantityType()
        {
            var quantity = Irradiance.FromWattsPerSquareMeter(1.0);
            Assert.Equal(QuantityType.Irradiance, Convert.ChangeType(quantity, typeof(QuantityType)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = Irradiance.FromWattsPerSquareMeter(1.0);
            Assert.Equal(Irradiance.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = Irradiance.FromWattsPerSquareMeter(1.0);
            Assert.Equal(Irradiance.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = Irradiance.FromWattsPerSquareMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = Irradiance.FromWattsPerSquareMeter(1.0);
            Assert.Equal(new {Irradiance.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = Irradiance.FromWattsPerSquareMeter(value);
            Assert.Equal(Irradiance.FromWattsPerSquareMeter(-value), -quantity);
        }
    }
}
