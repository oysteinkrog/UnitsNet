//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Acceleration.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class AccelerationTestsBase : QuantityTestsBase
    {
        protected abstract double CentimetersPerSecondSquaredInOneMeterPerSecondSquared { get; }
        protected abstract double DecimetersPerSecondSquaredInOneMeterPerSecondSquared { get; }
        protected abstract double FeetPerSecondSquaredInOneMeterPerSecondSquared { get; }
        protected abstract double InchesPerSecondSquaredInOneMeterPerSecondSquared { get; }
        protected abstract double KilometersPerSecondSquaredInOneMeterPerSecondSquared { get; }
        protected abstract double KnotsPerHourInOneMeterPerSecondSquared { get; }
        protected abstract double KnotsPerMinuteInOneMeterPerSecondSquared { get; }
        protected abstract double KnotsPerSecondInOneMeterPerSecondSquared { get; }
        protected abstract double MetersPerSecondSquaredInOneMeterPerSecondSquared { get; }
        protected abstract double MicrometersPerSecondSquaredInOneMeterPerSecondSquared { get; }
        protected abstract double MillimetersPerSecondSquaredInOneMeterPerSecondSquared { get; }
        protected abstract double MillistandardGravityInOneMeterPerSecondSquared { get; }
        protected abstract double NanometersPerSecondSquaredInOneMeterPerSecondSquared { get; }
        protected abstract double StandardGravityInOneMeterPerSecondSquared { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double CentimetersPerSecondSquaredTolerance { get { return 1e-5; } }
        protected virtual double DecimetersPerSecondSquaredTolerance { get { return 1e-5; } }
        protected virtual double FeetPerSecondSquaredTolerance { get { return 1e-5; } }
        protected virtual double InchesPerSecondSquaredTolerance { get { return 1e-5; } }
        protected virtual double KilometersPerSecondSquaredTolerance { get { return 1e-5; } }
        protected virtual double KnotsPerHourTolerance { get { return 1e-5; } }
        protected virtual double KnotsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double KnotsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MetersPerSecondSquaredTolerance { get { return 1e-5; } }
        protected virtual double MicrometersPerSecondSquaredTolerance { get { return 1e-5; } }
        protected virtual double MillimetersPerSecondSquaredTolerance { get { return 1e-5; } }
        protected virtual double MillistandardGravityTolerance { get { return 1e-5; } }
        protected virtual double NanometersPerSecondSquaredTolerance { get { return 1e-5; } }
        protected virtual double StandardGravityTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(AccelerationUnit unit)
        {
            return unit switch
            {
                AccelerationUnit.CentimeterPerSecondSquared => (CentimetersPerSecondSquaredInOneMeterPerSecondSquared, CentimetersPerSecondSquaredTolerance),
                AccelerationUnit.DecimeterPerSecondSquared => (DecimetersPerSecondSquaredInOneMeterPerSecondSquared, DecimetersPerSecondSquaredTolerance),
                AccelerationUnit.FootPerSecondSquared => (FeetPerSecondSquaredInOneMeterPerSecondSquared, FeetPerSecondSquaredTolerance),
                AccelerationUnit.InchPerSecondSquared => (InchesPerSecondSquaredInOneMeterPerSecondSquared, InchesPerSecondSquaredTolerance),
                AccelerationUnit.KilometerPerSecondSquared => (KilometersPerSecondSquaredInOneMeterPerSecondSquared, KilometersPerSecondSquaredTolerance),
                AccelerationUnit.KnotPerHour => (KnotsPerHourInOneMeterPerSecondSquared, KnotsPerHourTolerance),
                AccelerationUnit.KnotPerMinute => (KnotsPerMinuteInOneMeterPerSecondSquared, KnotsPerMinuteTolerance),
                AccelerationUnit.KnotPerSecond => (KnotsPerSecondInOneMeterPerSecondSquared, KnotsPerSecondTolerance),
                AccelerationUnit.MeterPerSecondSquared => (MetersPerSecondSquaredInOneMeterPerSecondSquared, MetersPerSecondSquaredTolerance),
                AccelerationUnit.MicrometerPerSecondSquared => (MicrometersPerSecondSquaredInOneMeterPerSecondSquared, MicrometersPerSecondSquaredTolerance),
                AccelerationUnit.MillimeterPerSecondSquared => (MillimetersPerSecondSquaredInOneMeterPerSecondSquared, MillimetersPerSecondSquaredTolerance),
                AccelerationUnit.MillistandardGravity => (MillistandardGravityInOneMeterPerSecondSquared, MillistandardGravityTolerance),
                AccelerationUnit.NanometerPerSecondSquared => (NanometersPerSecondSquaredInOneMeterPerSecondSquared, NanometersPerSecondSquaredTolerance),
                AccelerationUnit.StandardGravity => (StandardGravityInOneMeterPerSecondSquared, StandardGravityTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { AccelerationUnit.CentimeterPerSecondSquared },
            new object[] { AccelerationUnit.DecimeterPerSecondSquared },
            new object[] { AccelerationUnit.FootPerSecondSquared },
            new object[] { AccelerationUnit.InchPerSecondSquared },
            new object[] { AccelerationUnit.KilometerPerSecondSquared },
            new object[] { AccelerationUnit.KnotPerHour },
            new object[] { AccelerationUnit.KnotPerMinute },
            new object[] { AccelerationUnit.KnotPerSecond },
            new object[] { AccelerationUnit.MeterPerSecondSquared },
            new object[] { AccelerationUnit.MicrometerPerSecondSquared },
            new object[] { AccelerationUnit.MillimeterPerSecondSquared },
            new object[] { AccelerationUnit.MillistandardGravity },
            new object[] { AccelerationUnit.NanometerPerSecondSquared },
            new object[] { AccelerationUnit.StandardGravity },
        };

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Acceleration((double)0.0, AccelerationUnit.Undefined));
        }

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new Acceleration();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(AccelerationUnit.MeterPerSecondSquared, quantity.Unit);
        }


        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Acceleration(double.PositiveInfinity, AccelerationUnit.MeterPerSecondSquared));
            Assert.Throws<ArgumentException>(() => new Acceleration(double.NegativeInfinity, AccelerationUnit.MeterPerSecondSquared));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Acceleration(double.NaN, AccelerationUnit.MeterPerSecondSquared));
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new Acceleration(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            Func<object> TestCode = () => new Acceleration(value: 1, unitSystem: UnitSystem.SI);
            if (SupportsSIUnitSystem)
            {
                var quantity = (Acceleration) TestCode();
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(TestCode);
            }
        }

        [Fact]
        public void Acceleration_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new Acceleration(1, AccelerationUnit.MeterPerSecondSquared);

            QuantityInfo<AccelerationUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(Acceleration.Zero, quantityInfo.Zero);
            Assert.Equal("Acceleration", quantityInfo.Name);
            Assert.Equal(QuantityType.Acceleration, quantityInfo.QuantityType);

            var units = EnumUtils.GetEnumValues<AccelerationUnit>().Except(new[] {AccelerationUnit.Undefined}).OrderBy(x => x.ToString()).ToArray();
            var unitNames = units.Select(x => x.ToString());

            // Obsolete members
            Assert.Equal(units, quantityInfo.Units);
            Assert.Equal(unitNames, quantityInfo.UnitNames);
        }

        [Fact]
        public void MeterPerSecondSquaredToAccelerationUnits()
        {
            Acceleration meterpersecondsquared = Acceleration.FromMetersPerSecondSquared(1);
            AssertEx.EqualTolerance(CentimetersPerSecondSquaredInOneMeterPerSecondSquared, meterpersecondsquared.CentimetersPerSecondSquared, CentimetersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(DecimetersPerSecondSquaredInOneMeterPerSecondSquared, meterpersecondsquared.DecimetersPerSecondSquared, DecimetersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(FeetPerSecondSquaredInOneMeterPerSecondSquared, meterpersecondsquared.FeetPerSecondSquared, FeetPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(InchesPerSecondSquaredInOneMeterPerSecondSquared, meterpersecondsquared.InchesPerSecondSquared, InchesPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(KilometersPerSecondSquaredInOneMeterPerSecondSquared, meterpersecondsquared.KilometersPerSecondSquared, KilometersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(KnotsPerHourInOneMeterPerSecondSquared, meterpersecondsquared.KnotsPerHour, KnotsPerHourTolerance);
            AssertEx.EqualTolerance(KnotsPerMinuteInOneMeterPerSecondSquared, meterpersecondsquared.KnotsPerMinute, KnotsPerMinuteTolerance);
            AssertEx.EqualTolerance(KnotsPerSecondInOneMeterPerSecondSquared, meterpersecondsquared.KnotsPerSecond, KnotsPerSecondTolerance);
            AssertEx.EqualTolerance(MetersPerSecondSquaredInOneMeterPerSecondSquared, meterpersecondsquared.MetersPerSecondSquared, MetersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(MicrometersPerSecondSquaredInOneMeterPerSecondSquared, meterpersecondsquared.MicrometersPerSecondSquared, MicrometersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(MillimetersPerSecondSquaredInOneMeterPerSecondSquared, meterpersecondsquared.MillimetersPerSecondSquared, MillimetersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(MillistandardGravityInOneMeterPerSecondSquared, meterpersecondsquared.MillistandardGravity, MillistandardGravityTolerance);
            AssertEx.EqualTolerance(NanometersPerSecondSquaredInOneMeterPerSecondSquared, meterpersecondsquared.NanometersPerSecondSquared, NanometersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(StandardGravityInOneMeterPerSecondSquared, meterpersecondsquared.StandardGravity, StandardGravityTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = Acceleration.From(1, AccelerationUnit.CentimeterPerSecondSquared);
            AssertEx.EqualTolerance(1, quantity00.CentimetersPerSecondSquared, CentimetersPerSecondSquaredTolerance);
            Assert.Equal(AccelerationUnit.CentimeterPerSecondSquared, quantity00.Unit);

            var quantity01 = Acceleration.From(1, AccelerationUnit.DecimeterPerSecondSquared);
            AssertEx.EqualTolerance(1, quantity01.DecimetersPerSecondSquared, DecimetersPerSecondSquaredTolerance);
            Assert.Equal(AccelerationUnit.DecimeterPerSecondSquared, quantity01.Unit);

            var quantity02 = Acceleration.From(1, AccelerationUnit.FootPerSecondSquared);
            AssertEx.EqualTolerance(1, quantity02.FeetPerSecondSquared, FeetPerSecondSquaredTolerance);
            Assert.Equal(AccelerationUnit.FootPerSecondSquared, quantity02.Unit);

            var quantity03 = Acceleration.From(1, AccelerationUnit.InchPerSecondSquared);
            AssertEx.EqualTolerance(1, quantity03.InchesPerSecondSquared, InchesPerSecondSquaredTolerance);
            Assert.Equal(AccelerationUnit.InchPerSecondSquared, quantity03.Unit);

            var quantity04 = Acceleration.From(1, AccelerationUnit.KilometerPerSecondSquared);
            AssertEx.EqualTolerance(1, quantity04.KilometersPerSecondSquared, KilometersPerSecondSquaredTolerance);
            Assert.Equal(AccelerationUnit.KilometerPerSecondSquared, quantity04.Unit);

            var quantity05 = Acceleration.From(1, AccelerationUnit.KnotPerHour);
            AssertEx.EqualTolerance(1, quantity05.KnotsPerHour, KnotsPerHourTolerance);
            Assert.Equal(AccelerationUnit.KnotPerHour, quantity05.Unit);

            var quantity06 = Acceleration.From(1, AccelerationUnit.KnotPerMinute);
            AssertEx.EqualTolerance(1, quantity06.KnotsPerMinute, KnotsPerMinuteTolerance);
            Assert.Equal(AccelerationUnit.KnotPerMinute, quantity06.Unit);

            var quantity07 = Acceleration.From(1, AccelerationUnit.KnotPerSecond);
            AssertEx.EqualTolerance(1, quantity07.KnotsPerSecond, KnotsPerSecondTolerance);
            Assert.Equal(AccelerationUnit.KnotPerSecond, quantity07.Unit);

            var quantity08 = Acceleration.From(1, AccelerationUnit.MeterPerSecondSquared);
            AssertEx.EqualTolerance(1, quantity08.MetersPerSecondSquared, MetersPerSecondSquaredTolerance);
            Assert.Equal(AccelerationUnit.MeterPerSecondSquared, quantity08.Unit);

            var quantity09 = Acceleration.From(1, AccelerationUnit.MicrometerPerSecondSquared);
            AssertEx.EqualTolerance(1, quantity09.MicrometersPerSecondSquared, MicrometersPerSecondSquaredTolerance);
            Assert.Equal(AccelerationUnit.MicrometerPerSecondSquared, quantity09.Unit);

            var quantity10 = Acceleration.From(1, AccelerationUnit.MillimeterPerSecondSquared);
            AssertEx.EqualTolerance(1, quantity10.MillimetersPerSecondSquared, MillimetersPerSecondSquaredTolerance);
            Assert.Equal(AccelerationUnit.MillimeterPerSecondSquared, quantity10.Unit);

            var quantity11 = Acceleration.From(1, AccelerationUnit.MillistandardGravity);
            AssertEx.EqualTolerance(1, quantity11.MillistandardGravity, MillistandardGravityTolerance);
            Assert.Equal(AccelerationUnit.MillistandardGravity, quantity11.Unit);

            var quantity12 = Acceleration.From(1, AccelerationUnit.NanometerPerSecondSquared);
            AssertEx.EqualTolerance(1, quantity12.NanometersPerSecondSquared, NanometersPerSecondSquaredTolerance);
            Assert.Equal(AccelerationUnit.NanometerPerSecondSquared, quantity12.Unit);

            var quantity13 = Acceleration.From(1, AccelerationUnit.StandardGravity);
            AssertEx.EqualTolerance(1, quantity13.StandardGravity, StandardGravityTolerance);
            Assert.Equal(AccelerationUnit.StandardGravity, quantity13.Unit);

        }

        [Fact]
        public void FromMetersPerSecondSquared_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => Acceleration.FromMetersPerSecondSquared(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => Acceleration.FromMetersPerSecondSquared(double.NegativeInfinity));
        }

        [Fact]
        public void FromMetersPerSecondSquared_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => Acceleration.FromMetersPerSecondSquared(double.NaN));
        }

        [Fact]
        public void As()
        {
            var meterpersecondsquared = Acceleration.FromMetersPerSecondSquared(1);
            AssertEx.EqualTolerance(CentimetersPerSecondSquaredInOneMeterPerSecondSquared, meterpersecondsquared.As(AccelerationUnit.CentimeterPerSecondSquared), CentimetersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(DecimetersPerSecondSquaredInOneMeterPerSecondSquared, meterpersecondsquared.As(AccelerationUnit.DecimeterPerSecondSquared), DecimetersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(FeetPerSecondSquaredInOneMeterPerSecondSquared, meterpersecondsquared.As(AccelerationUnit.FootPerSecondSquared), FeetPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(InchesPerSecondSquaredInOneMeterPerSecondSquared, meterpersecondsquared.As(AccelerationUnit.InchPerSecondSquared), InchesPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(KilometersPerSecondSquaredInOneMeterPerSecondSquared, meterpersecondsquared.As(AccelerationUnit.KilometerPerSecondSquared), KilometersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(KnotsPerHourInOneMeterPerSecondSquared, meterpersecondsquared.As(AccelerationUnit.KnotPerHour), KnotsPerHourTolerance);
            AssertEx.EqualTolerance(KnotsPerMinuteInOneMeterPerSecondSquared, meterpersecondsquared.As(AccelerationUnit.KnotPerMinute), KnotsPerMinuteTolerance);
            AssertEx.EqualTolerance(KnotsPerSecondInOneMeterPerSecondSquared, meterpersecondsquared.As(AccelerationUnit.KnotPerSecond), KnotsPerSecondTolerance);
            AssertEx.EqualTolerance(MetersPerSecondSquaredInOneMeterPerSecondSquared, meterpersecondsquared.As(AccelerationUnit.MeterPerSecondSquared), MetersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(MicrometersPerSecondSquaredInOneMeterPerSecondSquared, meterpersecondsquared.As(AccelerationUnit.MicrometerPerSecondSquared), MicrometersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(MillimetersPerSecondSquaredInOneMeterPerSecondSquared, meterpersecondsquared.As(AccelerationUnit.MillimeterPerSecondSquared), MillimetersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(MillistandardGravityInOneMeterPerSecondSquared, meterpersecondsquared.As(AccelerationUnit.MillistandardGravity), MillistandardGravityTolerance);
            AssertEx.EqualTolerance(NanometersPerSecondSquaredInOneMeterPerSecondSquared, meterpersecondsquared.As(AccelerationUnit.NanometerPerSecondSquared), NanometersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(StandardGravityInOneMeterPerSecondSquared, meterpersecondsquared.As(AccelerationUnit.StandardGravity), StandardGravityTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new Acceleration(value: 1, unit: Acceleration.BaseUnit);
            Func<object> AsWithSIUnitSystem = () => quantity.As(UnitSystem.SI);

            if (SupportsSIUnitSystem)
            {
                var value = (double) AsWithSIUnitSystem();
                Assert.Equal(1, value);
            }
            else
            {
                Assert.Throws<ArgumentException>(AsWithSIUnitSystem);
            }
        }

        [Fact]
        public void Parse()
        {
            try
            {
                var parsed = Acceleration.Parse("1 cm/s²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.CentimetersPerSecondSquared, CentimetersPerSecondSquaredTolerance);
                Assert.Equal(AccelerationUnit.CentimeterPerSecondSquared, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Acceleration.Parse("1 см/с²", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.CentimetersPerSecondSquared, CentimetersPerSecondSquaredTolerance);
                Assert.Equal(AccelerationUnit.CentimeterPerSecondSquared, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Acceleration.Parse("1 dm/s²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.DecimetersPerSecondSquared, DecimetersPerSecondSquaredTolerance);
                Assert.Equal(AccelerationUnit.DecimeterPerSecondSquared, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Acceleration.Parse("1 дм/с²", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.DecimetersPerSecondSquared, DecimetersPerSecondSquaredTolerance);
                Assert.Equal(AccelerationUnit.DecimeterPerSecondSquared, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Acceleration.Parse("1 ft/s²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.FeetPerSecondSquared, FeetPerSecondSquaredTolerance);
                Assert.Equal(AccelerationUnit.FootPerSecondSquared, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Acceleration.Parse("1 фут/с²", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.FeetPerSecondSquared, FeetPerSecondSquaredTolerance);
                Assert.Equal(AccelerationUnit.FootPerSecondSquared, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Acceleration.Parse("1 in/s²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.InchesPerSecondSquared, InchesPerSecondSquaredTolerance);
                Assert.Equal(AccelerationUnit.InchPerSecondSquared, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Acceleration.Parse("1 дюйм/с²", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.InchesPerSecondSquared, InchesPerSecondSquaredTolerance);
                Assert.Equal(AccelerationUnit.InchPerSecondSquared, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Acceleration.Parse("1 km/s²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilometersPerSecondSquared, KilometersPerSecondSquaredTolerance);
                Assert.Equal(AccelerationUnit.KilometerPerSecondSquared, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Acceleration.Parse("1 км/с²", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.KilometersPerSecondSquared, KilometersPerSecondSquaredTolerance);
                Assert.Equal(AccelerationUnit.KilometerPerSecondSquared, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Acceleration.Parse("1 kn/h", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KnotsPerHour, KnotsPerHourTolerance);
                Assert.Equal(AccelerationUnit.KnotPerHour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Acceleration.Parse("1 узел/час", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.KnotsPerHour, KnotsPerHourTolerance);
                Assert.Equal(AccelerationUnit.KnotPerHour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Acceleration.Parse("1 kn/min", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KnotsPerMinute, KnotsPerMinuteTolerance);
                Assert.Equal(AccelerationUnit.KnotPerMinute, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Acceleration.Parse("1 узел/мин", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.KnotsPerMinute, KnotsPerMinuteTolerance);
                Assert.Equal(AccelerationUnit.KnotPerMinute, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Acceleration.Parse("1 kn/s", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KnotsPerSecond, KnotsPerSecondTolerance);
                Assert.Equal(AccelerationUnit.KnotPerSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Acceleration.Parse("1 узел/с", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.KnotsPerSecond, KnotsPerSecondTolerance);
                Assert.Equal(AccelerationUnit.KnotPerSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Acceleration.Parse("1 m/s²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MetersPerSecondSquared, MetersPerSecondSquaredTolerance);
                Assert.Equal(AccelerationUnit.MeterPerSecondSquared, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Acceleration.Parse("1 м/с²", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.MetersPerSecondSquared, MetersPerSecondSquaredTolerance);
                Assert.Equal(AccelerationUnit.MeterPerSecondSquared, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Acceleration.Parse("1 µm/s²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MicrometersPerSecondSquared, MicrometersPerSecondSquaredTolerance);
                Assert.Equal(AccelerationUnit.MicrometerPerSecondSquared, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Acceleration.Parse("1 мкм/с²", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.MicrometersPerSecondSquared, MicrometersPerSecondSquaredTolerance);
                Assert.Equal(AccelerationUnit.MicrometerPerSecondSquared, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Acceleration.Parse("1 mm/s²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MillimetersPerSecondSquared, MillimetersPerSecondSquaredTolerance);
                Assert.Equal(AccelerationUnit.MillimeterPerSecondSquared, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Acceleration.Parse("1 мм/с²", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.MillimetersPerSecondSquared, MillimetersPerSecondSquaredTolerance);
                Assert.Equal(AccelerationUnit.MillimeterPerSecondSquared, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Acceleration.Parse("1 mg", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MillistandardGravity, MillistandardGravityTolerance);
                Assert.Equal(AccelerationUnit.MillistandardGravity, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Acceleration.Parse("1 мg", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.MillistandardGravity, MillistandardGravityTolerance);
                Assert.Equal(AccelerationUnit.MillistandardGravity, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Acceleration.Parse("1 nm/s²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.NanometersPerSecondSquared, NanometersPerSecondSquaredTolerance);
                Assert.Equal(AccelerationUnit.NanometerPerSecondSquared, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Acceleration.Parse("1 нм/с²", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.NanometersPerSecondSquared, NanometersPerSecondSquaredTolerance);
                Assert.Equal(AccelerationUnit.NanometerPerSecondSquared, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Acceleration.Parse("1 g", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.StandardGravity, StandardGravityTolerance);
                Assert.Equal(AccelerationUnit.StandardGravity, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Acceleration.Parse("1 g", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.StandardGravity, StandardGravityTolerance);
                Assert.Equal(AccelerationUnit.StandardGravity, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParse()
        {
            {
                Assert.True(Acceleration.TryParse("1 cm/s²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.CentimetersPerSecondSquared, CentimetersPerSecondSquaredTolerance);
                Assert.Equal(AccelerationUnit.CentimeterPerSecondSquared, parsed.Unit);
            }

            {
                Assert.True(Acceleration.TryParse("1 см/с²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.CentimetersPerSecondSquared, CentimetersPerSecondSquaredTolerance);
                Assert.Equal(AccelerationUnit.CentimeterPerSecondSquared, parsed.Unit);
            }

            {
                Assert.True(Acceleration.TryParse("1 dm/s²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DecimetersPerSecondSquared, DecimetersPerSecondSquaredTolerance);
                Assert.Equal(AccelerationUnit.DecimeterPerSecondSquared, parsed.Unit);
            }

            {
                Assert.True(Acceleration.TryParse("1 дм/с²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DecimetersPerSecondSquared, DecimetersPerSecondSquaredTolerance);
                Assert.Equal(AccelerationUnit.DecimeterPerSecondSquared, parsed.Unit);
            }

            {
                Assert.True(Acceleration.TryParse("1 ft/s²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.FeetPerSecondSquared, FeetPerSecondSquaredTolerance);
                Assert.Equal(AccelerationUnit.FootPerSecondSquared, parsed.Unit);
            }

            {
                Assert.True(Acceleration.TryParse("1 фут/с²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.FeetPerSecondSquared, FeetPerSecondSquaredTolerance);
                Assert.Equal(AccelerationUnit.FootPerSecondSquared, parsed.Unit);
            }

            {
                Assert.True(Acceleration.TryParse("1 in/s²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.InchesPerSecondSquared, InchesPerSecondSquaredTolerance);
                Assert.Equal(AccelerationUnit.InchPerSecondSquared, parsed.Unit);
            }

            {
                Assert.True(Acceleration.TryParse("1 дюйм/с²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.InchesPerSecondSquared, InchesPerSecondSquaredTolerance);
                Assert.Equal(AccelerationUnit.InchPerSecondSquared, parsed.Unit);
            }

            {
                Assert.True(Acceleration.TryParse("1 km/s²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilometersPerSecondSquared, KilometersPerSecondSquaredTolerance);
                Assert.Equal(AccelerationUnit.KilometerPerSecondSquared, parsed.Unit);
            }

            {
                Assert.True(Acceleration.TryParse("1 км/с²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilometersPerSecondSquared, KilometersPerSecondSquaredTolerance);
                Assert.Equal(AccelerationUnit.KilometerPerSecondSquared, parsed.Unit);
            }

            {
                Assert.True(Acceleration.TryParse("1 kn/h", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KnotsPerHour, KnotsPerHourTolerance);
                Assert.Equal(AccelerationUnit.KnotPerHour, parsed.Unit);
            }

            {
                Assert.True(Acceleration.TryParse("1 узел/час", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KnotsPerHour, KnotsPerHourTolerance);
                Assert.Equal(AccelerationUnit.KnotPerHour, parsed.Unit);
            }

            {
                Assert.True(Acceleration.TryParse("1 kn/min", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KnotsPerMinute, KnotsPerMinuteTolerance);
                Assert.Equal(AccelerationUnit.KnotPerMinute, parsed.Unit);
            }

            {
                Assert.True(Acceleration.TryParse("1 узел/мин", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KnotsPerMinute, KnotsPerMinuteTolerance);
                Assert.Equal(AccelerationUnit.KnotPerMinute, parsed.Unit);
            }

            {
                Assert.True(Acceleration.TryParse("1 kn/s", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KnotsPerSecond, KnotsPerSecondTolerance);
                Assert.Equal(AccelerationUnit.KnotPerSecond, parsed.Unit);
            }

            {
                Assert.True(Acceleration.TryParse("1 узел/с", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KnotsPerSecond, KnotsPerSecondTolerance);
                Assert.Equal(AccelerationUnit.KnotPerSecond, parsed.Unit);
            }

            {
                Assert.True(Acceleration.TryParse("1 m/s²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MetersPerSecondSquared, MetersPerSecondSquaredTolerance);
                Assert.Equal(AccelerationUnit.MeterPerSecondSquared, parsed.Unit);
            }

            {
                Assert.True(Acceleration.TryParse("1 м/с²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MetersPerSecondSquared, MetersPerSecondSquaredTolerance);
                Assert.Equal(AccelerationUnit.MeterPerSecondSquared, parsed.Unit);
            }

            {
                Assert.True(Acceleration.TryParse("1 µm/s²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MicrometersPerSecondSquared, MicrometersPerSecondSquaredTolerance);
                Assert.Equal(AccelerationUnit.MicrometerPerSecondSquared, parsed.Unit);
            }

            {
                Assert.True(Acceleration.TryParse("1 мкм/с²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MicrometersPerSecondSquared, MicrometersPerSecondSquaredTolerance);
                Assert.Equal(AccelerationUnit.MicrometerPerSecondSquared, parsed.Unit);
            }

            {
                Assert.True(Acceleration.TryParse("1 mm/s²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MillimetersPerSecondSquared, MillimetersPerSecondSquaredTolerance);
                Assert.Equal(AccelerationUnit.MillimeterPerSecondSquared, parsed.Unit);
            }

            {
                Assert.True(Acceleration.TryParse("1 мм/с²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MillimetersPerSecondSquared, MillimetersPerSecondSquaredTolerance);
                Assert.Equal(AccelerationUnit.MillimeterPerSecondSquared, parsed.Unit);
            }

            {
                Assert.True(Acceleration.TryParse("1 mg", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MillistandardGravity, MillistandardGravityTolerance);
                Assert.Equal(AccelerationUnit.MillistandardGravity, parsed.Unit);
            }

            {
                Assert.True(Acceleration.TryParse("1 мg", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MillistandardGravity, MillistandardGravityTolerance);
                Assert.Equal(AccelerationUnit.MillistandardGravity, parsed.Unit);
            }

            {
                Assert.True(Acceleration.TryParse("1 nm/s²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.NanometersPerSecondSquared, NanometersPerSecondSquaredTolerance);
                Assert.Equal(AccelerationUnit.NanometerPerSecondSquared, parsed.Unit);
            }

            {
                Assert.True(Acceleration.TryParse("1 нм/с²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.NanometersPerSecondSquared, NanometersPerSecondSquaredTolerance);
                Assert.Equal(AccelerationUnit.NanometerPerSecondSquared, parsed.Unit);
            }

            {
                Assert.True(Acceleration.TryParse("1 g", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.StandardGravity, StandardGravityTolerance);
                Assert.Equal(AccelerationUnit.StandardGravity, parsed.Unit);
            }

            {
                Assert.True(Acceleration.TryParse("1 g", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.StandardGravity, StandardGravityTolerance);
                Assert.Equal(AccelerationUnit.StandardGravity, parsed.Unit);
            }

        }

        [Fact]
        public void ParseUnit()
        {
            try
            {
                var parsedUnit = Acceleration.ParseUnit("cm/s²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(AccelerationUnit.CentimeterPerSecondSquared, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Acceleration.ParseUnit("см/с²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(AccelerationUnit.CentimeterPerSecondSquared, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Acceleration.ParseUnit("dm/s²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(AccelerationUnit.DecimeterPerSecondSquared, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Acceleration.ParseUnit("дм/с²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(AccelerationUnit.DecimeterPerSecondSquared, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Acceleration.ParseUnit("ft/s²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(AccelerationUnit.FootPerSecondSquared, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Acceleration.ParseUnit("фут/с²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(AccelerationUnit.FootPerSecondSquared, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Acceleration.ParseUnit("in/s²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(AccelerationUnit.InchPerSecondSquared, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Acceleration.ParseUnit("дюйм/с²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(AccelerationUnit.InchPerSecondSquared, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Acceleration.ParseUnit("km/s²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(AccelerationUnit.KilometerPerSecondSquared, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Acceleration.ParseUnit("км/с²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(AccelerationUnit.KilometerPerSecondSquared, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Acceleration.ParseUnit("kn/h", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(AccelerationUnit.KnotPerHour, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Acceleration.ParseUnit("узел/час", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(AccelerationUnit.KnotPerHour, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Acceleration.ParseUnit("kn/min", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(AccelerationUnit.KnotPerMinute, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Acceleration.ParseUnit("узел/мин", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(AccelerationUnit.KnotPerMinute, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Acceleration.ParseUnit("kn/s", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(AccelerationUnit.KnotPerSecond, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Acceleration.ParseUnit("узел/с", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(AccelerationUnit.KnotPerSecond, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Acceleration.ParseUnit("m/s²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(AccelerationUnit.MeterPerSecondSquared, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Acceleration.ParseUnit("м/с²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(AccelerationUnit.MeterPerSecondSquared, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Acceleration.ParseUnit("µm/s²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(AccelerationUnit.MicrometerPerSecondSquared, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Acceleration.ParseUnit("мкм/с²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(AccelerationUnit.MicrometerPerSecondSquared, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Acceleration.ParseUnit("mm/s²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(AccelerationUnit.MillimeterPerSecondSquared, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Acceleration.ParseUnit("мм/с²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(AccelerationUnit.MillimeterPerSecondSquared, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Acceleration.ParseUnit("mg", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(AccelerationUnit.MillistandardGravity, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Acceleration.ParseUnit("мg", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(AccelerationUnit.MillistandardGravity, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Acceleration.ParseUnit("nm/s²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(AccelerationUnit.NanometerPerSecondSquared, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Acceleration.ParseUnit("нм/с²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(AccelerationUnit.NanometerPerSecondSquared, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Acceleration.ParseUnit("g", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(AccelerationUnit.StandardGravity, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Acceleration.ParseUnit("g", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(AccelerationUnit.StandardGravity, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParseUnit()
        {
            {
                Assert.True(Acceleration.TryParseUnit("cm/s²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(AccelerationUnit.CentimeterPerSecondSquared, parsedUnit);
            }

            {
                Assert.True(Acceleration.TryParseUnit("см/с²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(AccelerationUnit.CentimeterPerSecondSquared, parsedUnit);
            }

            {
                Assert.True(Acceleration.TryParseUnit("dm/s²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(AccelerationUnit.DecimeterPerSecondSquared, parsedUnit);
            }

            {
                Assert.True(Acceleration.TryParseUnit("дм/с²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(AccelerationUnit.DecimeterPerSecondSquared, parsedUnit);
            }

            {
                Assert.True(Acceleration.TryParseUnit("ft/s²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(AccelerationUnit.FootPerSecondSquared, parsedUnit);
            }

            {
                Assert.True(Acceleration.TryParseUnit("фут/с²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(AccelerationUnit.FootPerSecondSquared, parsedUnit);
            }

            {
                Assert.True(Acceleration.TryParseUnit("in/s²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(AccelerationUnit.InchPerSecondSquared, parsedUnit);
            }

            {
                Assert.True(Acceleration.TryParseUnit("дюйм/с²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(AccelerationUnit.InchPerSecondSquared, parsedUnit);
            }

            {
                Assert.True(Acceleration.TryParseUnit("km/s²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(AccelerationUnit.KilometerPerSecondSquared, parsedUnit);
            }

            {
                Assert.True(Acceleration.TryParseUnit("км/с²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(AccelerationUnit.KilometerPerSecondSquared, parsedUnit);
            }

            {
                Assert.True(Acceleration.TryParseUnit("kn/h", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(AccelerationUnit.KnotPerHour, parsedUnit);
            }

            {
                Assert.True(Acceleration.TryParseUnit("узел/час", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(AccelerationUnit.KnotPerHour, parsedUnit);
            }

            {
                Assert.True(Acceleration.TryParseUnit("kn/min", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(AccelerationUnit.KnotPerMinute, parsedUnit);
            }

            {
                Assert.True(Acceleration.TryParseUnit("узел/мин", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(AccelerationUnit.KnotPerMinute, parsedUnit);
            }

            {
                Assert.True(Acceleration.TryParseUnit("kn/s", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(AccelerationUnit.KnotPerSecond, parsedUnit);
            }

            {
                Assert.True(Acceleration.TryParseUnit("узел/с", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(AccelerationUnit.KnotPerSecond, parsedUnit);
            }

            {
                Assert.True(Acceleration.TryParseUnit("m/s²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(AccelerationUnit.MeterPerSecondSquared, parsedUnit);
            }

            {
                Assert.True(Acceleration.TryParseUnit("м/с²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(AccelerationUnit.MeterPerSecondSquared, parsedUnit);
            }

            {
                Assert.True(Acceleration.TryParseUnit("µm/s²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(AccelerationUnit.MicrometerPerSecondSquared, parsedUnit);
            }

            {
                Assert.True(Acceleration.TryParseUnit("мкм/с²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(AccelerationUnit.MicrometerPerSecondSquared, parsedUnit);
            }

            {
                Assert.True(Acceleration.TryParseUnit("mm/s²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(AccelerationUnit.MillimeterPerSecondSquared, parsedUnit);
            }

            {
                Assert.True(Acceleration.TryParseUnit("мм/с²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(AccelerationUnit.MillimeterPerSecondSquared, parsedUnit);
            }

            {
                Assert.True(Acceleration.TryParseUnit("mg", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(AccelerationUnit.MillistandardGravity, parsedUnit);
            }

            {
                Assert.True(Acceleration.TryParseUnit("мg", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(AccelerationUnit.MillistandardGravity, parsedUnit);
            }

            {
                Assert.True(Acceleration.TryParseUnit("nm/s²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(AccelerationUnit.NanometerPerSecondSquared, parsedUnit);
            }

            {
                Assert.True(Acceleration.TryParseUnit("нм/с²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(AccelerationUnit.NanometerPerSecondSquared, parsedUnit);
            }

            {
                Assert.True(Acceleration.TryParseUnit("g", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(AccelerationUnit.StandardGravity, parsedUnit);
            }

            {
                Assert.True(Acceleration.TryParseUnit("g", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(AccelerationUnit.StandardGravity, parsedUnit);
            }

        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(AccelerationUnit unit)
        {
            var inBaseUnits = Acceleration.From(1.0, Acceleration.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, (double)converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(AccelerationUnit unit)
        {
            var quantity = Acceleration.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(AccelerationUnit unit)
        {
            // See if there is a unit available that is not the base unit.
            var fromUnit = Acceleration.Units.FirstOrDefault(u => u != Acceleration.BaseUnit && u != AccelerationUnit.Undefined);

            // If there is only one unit for the quantity, we must use the base unit.
            if (fromUnit == AccelerationUnit.Undefined)
                fromUnit = Acceleration.BaseUnit;

            var quantity = Acceleration.From(3.0, fromUnit);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Acceleration meterpersecondsquared = Acceleration.FromMetersPerSecondSquared(1);
            AssertEx.EqualTolerance(1, Acceleration.FromCentimetersPerSecondSquared(meterpersecondsquared.CentimetersPerSecondSquared).MetersPerSecondSquared, CentimetersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(1, Acceleration.FromDecimetersPerSecondSquared(meterpersecondsquared.DecimetersPerSecondSquared).MetersPerSecondSquared, DecimetersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(1, Acceleration.FromFeetPerSecondSquared(meterpersecondsquared.FeetPerSecondSquared).MetersPerSecondSquared, FeetPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(1, Acceleration.FromInchesPerSecondSquared(meterpersecondsquared.InchesPerSecondSquared).MetersPerSecondSquared, InchesPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(1, Acceleration.FromKilometersPerSecondSquared(meterpersecondsquared.KilometersPerSecondSquared).MetersPerSecondSquared, KilometersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(1, Acceleration.FromKnotsPerHour(meterpersecondsquared.KnotsPerHour).MetersPerSecondSquared, KnotsPerHourTolerance);
            AssertEx.EqualTolerance(1, Acceleration.FromKnotsPerMinute(meterpersecondsquared.KnotsPerMinute).MetersPerSecondSquared, KnotsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, Acceleration.FromKnotsPerSecond(meterpersecondsquared.KnotsPerSecond).MetersPerSecondSquared, KnotsPerSecondTolerance);
            AssertEx.EqualTolerance(1, Acceleration.FromMetersPerSecondSquared(meterpersecondsquared.MetersPerSecondSquared).MetersPerSecondSquared, MetersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(1, Acceleration.FromMicrometersPerSecondSquared(meterpersecondsquared.MicrometersPerSecondSquared).MetersPerSecondSquared, MicrometersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(1, Acceleration.FromMillimetersPerSecondSquared(meterpersecondsquared.MillimetersPerSecondSquared).MetersPerSecondSquared, MillimetersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(1, Acceleration.FromMillistandardGravity(meterpersecondsquared.MillistandardGravity).MetersPerSecondSquared, MillistandardGravityTolerance);
            AssertEx.EqualTolerance(1, Acceleration.FromNanometersPerSecondSquared(meterpersecondsquared.NanometersPerSecondSquared).MetersPerSecondSquared, NanometersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(1, Acceleration.FromStandardGravity(meterpersecondsquared.StandardGravity).MetersPerSecondSquared, StandardGravityTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Acceleration v = Acceleration.FromMetersPerSecondSquared(1);
            AssertEx.EqualTolerance(-1, -v.MetersPerSecondSquared, MetersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(2, (Acceleration.FromMetersPerSecondSquared(3)-v).MetersPerSecondSquared, MetersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(2, (v + v).MetersPerSecondSquared, MetersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(10, (v*10).MetersPerSecondSquared, MetersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(10, (10*v).MetersPerSecondSquared, MetersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(2, (Acceleration.FromMetersPerSecondSquared(10)/5).MetersPerSecondSquared, MetersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(2, Acceleration.FromMetersPerSecondSquared(10)/Acceleration.FromMetersPerSecondSquared(5), MetersPerSecondSquaredTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            Acceleration oneMeterPerSecondSquared = Acceleration.FromMetersPerSecondSquared(1);
            Acceleration twoMetersPerSecondSquared = Acceleration.FromMetersPerSecondSquared(2);

            Assert.True(oneMeterPerSecondSquared < twoMetersPerSecondSquared);
            Assert.True(oneMeterPerSecondSquared <= twoMetersPerSecondSquared);
            Assert.True(twoMetersPerSecondSquared > oneMeterPerSecondSquared);
            Assert.True(twoMetersPerSecondSquared >= oneMeterPerSecondSquared);

            Assert.False(oneMeterPerSecondSquared > twoMetersPerSecondSquared);
            Assert.False(oneMeterPerSecondSquared >= twoMetersPerSecondSquared);
            Assert.False(twoMetersPerSecondSquared < oneMeterPerSecondSquared);
            Assert.False(twoMetersPerSecondSquared <= oneMeterPerSecondSquared);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Acceleration meterpersecondsquared = Acceleration.FromMetersPerSecondSquared(1);
            Assert.Equal(0, meterpersecondsquared.CompareTo(meterpersecondsquared));
            Assert.True(meterpersecondsquared.CompareTo(Acceleration.Zero) > 0);
            Assert.True(Acceleration.Zero.CompareTo(meterpersecondsquared) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Acceleration meterpersecondsquared = Acceleration.FromMetersPerSecondSquared(1);
            Assert.Throws<ArgumentException>(() => meterpersecondsquared.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Acceleration meterpersecondsquared = Acceleration.FromMetersPerSecondSquared(1);
            Assert.Throws<ArgumentNullException>(() => meterpersecondsquared.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = Acceleration.FromMetersPerSecondSquared(1);
            var b = Acceleration.FromMetersPerSecondSquared(2);

#pragma warning disable CS8073
// ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
#pragma warning restore CS8073
        }

        [Fact]
        public void Equals_SameType_IsImplemented()
        {
            var a = Acceleration.FromMetersPerSecondSquared(1);
            var b = Acceleration.FromMetersPerSecondSquared(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
        }

        [Fact]
        public void Equals_QuantityAsObject_IsImplemented()
        {
            object a = Acceleration.FromMetersPerSecondSquared(1);
            object b = Acceleration.FromMetersPerSecondSquared(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals((object)null));
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = Acceleration.FromMetersPerSecondSquared(1);
            Assert.True(v.Equals(Acceleration.FromMetersPerSecondSquared(1), MetersPerSecondSquaredTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(Acceleration.Zero, MetersPerSecondSquaredTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = Acceleration.FromMetersPerSecondSquared(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(Acceleration.FromMetersPerSecondSquared(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Acceleration meterpersecondsquared = Acceleration.FromMetersPerSecondSquared(1);
            Assert.False(meterpersecondsquared.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Acceleration meterpersecondsquared = Acceleration.FromMetersPerSecondSquared(1);
            Assert.False(meterpersecondsquared.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(AccelerationUnit.Undefined, Acceleration.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(AccelerationUnit)).Cast<AccelerationUnit>();
            foreach(var unit in units)
            {
                if (unit == AccelerationUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Acceleration.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentUICulture;
            Thread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 cm/s²", new Acceleration(1, AccelerationUnit.CentimeterPerSecondSquared).ToString());
                Assert.Equal("1 dm/s²", new Acceleration(1, AccelerationUnit.DecimeterPerSecondSquared).ToString());
                Assert.Equal("1 ft/s²", new Acceleration(1, AccelerationUnit.FootPerSecondSquared).ToString());
                Assert.Equal("1 in/s²", new Acceleration(1, AccelerationUnit.InchPerSecondSquared).ToString());
                Assert.Equal("1 km/s²", new Acceleration(1, AccelerationUnit.KilometerPerSecondSquared).ToString());
                Assert.Equal("1 kn/h", new Acceleration(1, AccelerationUnit.KnotPerHour).ToString());
                Assert.Equal("1 kn/min", new Acceleration(1, AccelerationUnit.KnotPerMinute).ToString());
                Assert.Equal("1 kn/s", new Acceleration(1, AccelerationUnit.KnotPerSecond).ToString());
                Assert.Equal("1 m/s²", new Acceleration(1, AccelerationUnit.MeterPerSecondSquared).ToString());
                Assert.Equal("1 µm/s²", new Acceleration(1, AccelerationUnit.MicrometerPerSecondSquared).ToString());
                Assert.Equal("1 mm/s²", new Acceleration(1, AccelerationUnit.MillimeterPerSecondSquared).ToString());
                Assert.Equal("1 mg", new Acceleration(1, AccelerationUnit.MillistandardGravity).ToString());
                Assert.Equal("1 nm/s²", new Acceleration(1, AccelerationUnit.NanometerPerSecondSquared).ToString());
                Assert.Equal("1 g", new Acceleration(1, AccelerationUnit.StandardGravity).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentUICulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 cm/s²", new Acceleration(1, AccelerationUnit.CentimeterPerSecondSquared).ToString(swedishCulture));
            Assert.Equal("1 dm/s²", new Acceleration(1, AccelerationUnit.DecimeterPerSecondSquared).ToString(swedishCulture));
            Assert.Equal("1 ft/s²", new Acceleration(1, AccelerationUnit.FootPerSecondSquared).ToString(swedishCulture));
            Assert.Equal("1 in/s²", new Acceleration(1, AccelerationUnit.InchPerSecondSquared).ToString(swedishCulture));
            Assert.Equal("1 km/s²", new Acceleration(1, AccelerationUnit.KilometerPerSecondSquared).ToString(swedishCulture));
            Assert.Equal("1 kn/h", new Acceleration(1, AccelerationUnit.KnotPerHour).ToString(swedishCulture));
            Assert.Equal("1 kn/min", new Acceleration(1, AccelerationUnit.KnotPerMinute).ToString(swedishCulture));
            Assert.Equal("1 kn/s", new Acceleration(1, AccelerationUnit.KnotPerSecond).ToString(swedishCulture));
            Assert.Equal("1 m/s²", new Acceleration(1, AccelerationUnit.MeterPerSecondSquared).ToString(swedishCulture));
            Assert.Equal("1 µm/s²", new Acceleration(1, AccelerationUnit.MicrometerPerSecondSquared).ToString(swedishCulture));
            Assert.Equal("1 mm/s²", new Acceleration(1, AccelerationUnit.MillimeterPerSecondSquared).ToString(swedishCulture));
            Assert.Equal("1 mg", new Acceleration(1, AccelerationUnit.MillistandardGravity).ToString(swedishCulture));
            Assert.Equal("1 nm/s²", new Acceleration(1, AccelerationUnit.NanometerPerSecondSquared).ToString(swedishCulture));
            Assert.Equal("1 g", new Acceleration(1, AccelerationUnit.StandardGravity).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentUICulture;
            try
            {
                CultureInfo.CurrentUICulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 m/s²", new Acceleration(0.123456, AccelerationUnit.MeterPerSecondSquared).ToString("s1"));
                Assert.Equal("0.12 m/s²", new Acceleration(0.123456, AccelerationUnit.MeterPerSecondSquared).ToString("s2"));
                Assert.Equal("0.123 m/s²", new Acceleration(0.123456, AccelerationUnit.MeterPerSecondSquared).ToString("s3"));
                Assert.Equal("0.1235 m/s²", new Acceleration(0.123456, AccelerationUnit.MeterPerSecondSquared).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentUICulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 m/s²", new Acceleration(0.123456, AccelerationUnit.MeterPerSecondSquared).ToString("s1", culture));
            Assert.Equal("0.12 m/s²", new Acceleration(0.123456, AccelerationUnit.MeterPerSecondSquared).ToString("s2", culture));
            Assert.Equal("0.123 m/s²", new Acceleration(0.123456, AccelerationUnit.MeterPerSecondSquared).ToString("s3", culture));
            Assert.Equal("0.1235 m/s²", new Acceleration(0.123456, AccelerationUnit.MeterPerSecondSquared).ToString("s4", culture));
        }


        [Fact]
        public void ToString_NullFormat_ThrowsArgumentNullException()
        {
            var quantity = Acceleration.FromMetersPerSecondSquared(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, null, null));
        }

        [Fact]
        public void ToString_NullArgs_ThrowsArgumentNullException()
        {
            var quantity = Acceleration.FromMetersPerSecondSquared(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, "g", null));
        }

        [Fact]
        public void ToString_NullProvider_EqualsCurrentUICulture()
        {
            var quantity = Acceleration.FromMetersPerSecondSquared(1.0);
            Assert.Equal(quantity.ToString(CultureInfo.CurrentUICulture, "g"), quantity.ToString(null, "g"));
        }


        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = Acceleration.FromMetersPerSecondSquared(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = Acceleration.FromMetersPerSecondSquared(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = Acceleration.FromMetersPerSecondSquared(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = Acceleration.FromMetersPerSecondSquared(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = Acceleration.FromMetersPerSecondSquared(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = Acceleration.FromMetersPerSecondSquared(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = Acceleration.FromMetersPerSecondSquared(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = Acceleration.FromMetersPerSecondSquared(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = Acceleration.FromMetersPerSecondSquared(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = Acceleration.FromMetersPerSecondSquared(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = Acceleration.FromMetersPerSecondSquared(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = Acceleration.FromMetersPerSecondSquared(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = Acceleration.FromMetersPerSecondSquared(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = Acceleration.FromMetersPerSecondSquared(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = Acceleration.FromMetersPerSecondSquared(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = Acceleration.FromMetersPerSecondSquared(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(Acceleration)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = Acceleration.FromMetersPerSecondSquared(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(AccelerationUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityType_EqualsQuantityType()
        {
            var quantity = Acceleration.FromMetersPerSecondSquared(1.0);
            Assert.Equal(QuantityType.Acceleration, Convert.ChangeType(quantity, typeof(QuantityType)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = Acceleration.FromMetersPerSecondSquared(1.0);
            Assert.Equal(Acceleration.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = Acceleration.FromMetersPerSecondSquared(1.0);
            Assert.Equal(Acceleration.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = Acceleration.FromMetersPerSecondSquared(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = Acceleration.FromMetersPerSecondSquared(1.0);
            Assert.Equal(new {Acceleration.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = Acceleration.FromMetersPerSecondSquared(value);
            Assert.Equal(Acceleration.FromMetersPerSecondSquared(-value), -quantity);
        }
    }
}
