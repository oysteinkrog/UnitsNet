//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of VolumeConcentration.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class VolumeConcentrationTestsBase : QuantityTestsBase
    {
        protected abstract double CentilitersPerLiterInOneDecimalFraction { get; }
        protected abstract double CentilitersPerMililiterInOneDecimalFraction { get; }
        protected abstract double DecilitersPerLiterInOneDecimalFraction { get; }
        protected abstract double DecilitersPerMililiterInOneDecimalFraction { get; }
        protected abstract double DecimalFractionsInOneDecimalFraction { get; }
        protected abstract double LitersPerLiterInOneDecimalFraction { get; }
        protected abstract double LitersPerMililiterInOneDecimalFraction { get; }
        protected abstract double MicrolitersPerLiterInOneDecimalFraction { get; }
        protected abstract double MicrolitersPerMililiterInOneDecimalFraction { get; }
        protected abstract double MillilitersPerLiterInOneDecimalFraction { get; }
        protected abstract double MillilitersPerMililiterInOneDecimalFraction { get; }
        protected abstract double NanolitersPerLiterInOneDecimalFraction { get; }
        protected abstract double NanolitersPerMililiterInOneDecimalFraction { get; }
        protected abstract double PartsPerBillionInOneDecimalFraction { get; }
        protected abstract double PartsPerMillionInOneDecimalFraction { get; }
        protected abstract double PartsPerThousandInOneDecimalFraction { get; }
        protected abstract double PartsPerTrillionInOneDecimalFraction { get; }
        protected abstract double PercentInOneDecimalFraction { get; }
        protected abstract double PicolitersPerLiterInOneDecimalFraction { get; }
        protected abstract double PicolitersPerMililiterInOneDecimalFraction { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double CentilitersPerLiterTolerance { get { return 1e-5; } }
        protected virtual double CentilitersPerMililiterTolerance { get { return 1e-5; } }
        protected virtual double DecilitersPerLiterTolerance { get { return 1e-5; } }
        protected virtual double DecilitersPerMililiterTolerance { get { return 1e-5; } }
        protected virtual double DecimalFractionsTolerance { get { return 1e-5; } }
        protected virtual double LitersPerLiterTolerance { get { return 1e-5; } }
        protected virtual double LitersPerMililiterTolerance { get { return 1e-5; } }
        protected virtual double MicrolitersPerLiterTolerance { get { return 1e-5; } }
        protected virtual double MicrolitersPerMililiterTolerance { get { return 1e-5; } }
        protected virtual double MillilitersPerLiterTolerance { get { return 1e-5; } }
        protected virtual double MillilitersPerMililiterTolerance { get { return 1e-5; } }
        protected virtual double NanolitersPerLiterTolerance { get { return 1e-5; } }
        protected virtual double NanolitersPerMililiterTolerance { get { return 1e-5; } }
        protected virtual double PartsPerBillionTolerance { get { return 1e-5; } }
        protected virtual double PartsPerMillionTolerance { get { return 1e-5; } }
        protected virtual double PartsPerThousandTolerance { get { return 1e-5; } }
        protected virtual double PartsPerTrillionTolerance { get { return 1e-5; } }
        protected virtual double PercentTolerance { get { return 1e-5; } }
        protected virtual double PicolitersPerLiterTolerance { get { return 1e-5; } }
        protected virtual double PicolitersPerMililiterTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(VolumeConcentrationUnit unit)
        {
            return unit switch
            {
                VolumeConcentrationUnit.CentilitersPerLiter => (CentilitersPerLiterInOneDecimalFraction, CentilitersPerLiterTolerance),
                VolumeConcentrationUnit.CentilitersPerMililiter => (CentilitersPerMililiterInOneDecimalFraction, CentilitersPerMililiterTolerance),
                VolumeConcentrationUnit.DecilitersPerLiter => (DecilitersPerLiterInOneDecimalFraction, DecilitersPerLiterTolerance),
                VolumeConcentrationUnit.DecilitersPerMililiter => (DecilitersPerMililiterInOneDecimalFraction, DecilitersPerMililiterTolerance),
                VolumeConcentrationUnit.DecimalFraction => (DecimalFractionsInOneDecimalFraction, DecimalFractionsTolerance),
                VolumeConcentrationUnit.LitersPerLiter => (LitersPerLiterInOneDecimalFraction, LitersPerLiterTolerance),
                VolumeConcentrationUnit.LitersPerMililiter => (LitersPerMililiterInOneDecimalFraction, LitersPerMililiterTolerance),
                VolumeConcentrationUnit.MicrolitersPerLiter => (MicrolitersPerLiterInOneDecimalFraction, MicrolitersPerLiterTolerance),
                VolumeConcentrationUnit.MicrolitersPerMililiter => (MicrolitersPerMililiterInOneDecimalFraction, MicrolitersPerMililiterTolerance),
                VolumeConcentrationUnit.MillilitersPerLiter => (MillilitersPerLiterInOneDecimalFraction, MillilitersPerLiterTolerance),
                VolumeConcentrationUnit.MillilitersPerMililiter => (MillilitersPerMililiterInOneDecimalFraction, MillilitersPerMililiterTolerance),
                VolumeConcentrationUnit.NanolitersPerLiter => (NanolitersPerLiterInOneDecimalFraction, NanolitersPerLiterTolerance),
                VolumeConcentrationUnit.NanolitersPerMililiter => (NanolitersPerMililiterInOneDecimalFraction, NanolitersPerMililiterTolerance),
                VolumeConcentrationUnit.PartPerBillion => (PartsPerBillionInOneDecimalFraction, PartsPerBillionTolerance),
                VolumeConcentrationUnit.PartPerMillion => (PartsPerMillionInOneDecimalFraction, PartsPerMillionTolerance),
                VolumeConcentrationUnit.PartPerThousand => (PartsPerThousandInOneDecimalFraction, PartsPerThousandTolerance),
                VolumeConcentrationUnit.PartPerTrillion => (PartsPerTrillionInOneDecimalFraction, PartsPerTrillionTolerance),
                VolumeConcentrationUnit.Percent => (PercentInOneDecimalFraction, PercentTolerance),
                VolumeConcentrationUnit.PicolitersPerLiter => (PicolitersPerLiterInOneDecimalFraction, PicolitersPerLiterTolerance),
                VolumeConcentrationUnit.PicolitersPerMililiter => (PicolitersPerMililiterInOneDecimalFraction, PicolitersPerMililiterTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { VolumeConcentrationUnit.CentilitersPerLiter },
            new object[] { VolumeConcentrationUnit.CentilitersPerMililiter },
            new object[] { VolumeConcentrationUnit.DecilitersPerLiter },
            new object[] { VolumeConcentrationUnit.DecilitersPerMililiter },
            new object[] { VolumeConcentrationUnit.DecimalFraction },
            new object[] { VolumeConcentrationUnit.LitersPerLiter },
            new object[] { VolumeConcentrationUnit.LitersPerMililiter },
            new object[] { VolumeConcentrationUnit.MicrolitersPerLiter },
            new object[] { VolumeConcentrationUnit.MicrolitersPerMililiter },
            new object[] { VolumeConcentrationUnit.MillilitersPerLiter },
            new object[] { VolumeConcentrationUnit.MillilitersPerMililiter },
            new object[] { VolumeConcentrationUnit.NanolitersPerLiter },
            new object[] { VolumeConcentrationUnit.NanolitersPerMililiter },
            new object[] { VolumeConcentrationUnit.PartPerBillion },
            new object[] { VolumeConcentrationUnit.PartPerMillion },
            new object[] { VolumeConcentrationUnit.PartPerThousand },
            new object[] { VolumeConcentrationUnit.PartPerTrillion },
            new object[] { VolumeConcentrationUnit.Percent },
            new object[] { VolumeConcentrationUnit.PicolitersPerLiter },
            new object[] { VolumeConcentrationUnit.PicolitersPerMililiter },
        };

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new VolumeConcentration((double)0.0, VolumeConcentrationUnit.Undefined));
        }

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new VolumeConcentration();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(VolumeConcentrationUnit.DecimalFraction, quantity.Unit);
        }


        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new VolumeConcentration(double.PositiveInfinity, VolumeConcentrationUnit.DecimalFraction));
            Assert.Throws<ArgumentException>(() => new VolumeConcentration(double.NegativeInfinity, VolumeConcentrationUnit.DecimalFraction));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new VolumeConcentration(double.NaN, VolumeConcentrationUnit.DecimalFraction));
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new VolumeConcentration(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            Func<object> TestCode = () => new VolumeConcentration(value: 1, unitSystem: UnitSystem.SI);
            if (SupportsSIUnitSystem)
            {
                var quantity = (VolumeConcentration) TestCode();
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(TestCode);
            }
        }

        [Fact]
        public void VolumeConcentration_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new VolumeConcentration(1, VolumeConcentrationUnit.DecimalFraction);

            QuantityInfo<VolumeConcentrationUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(VolumeConcentration.Zero, quantityInfo.Zero);
            Assert.Equal("VolumeConcentration", quantityInfo.Name);
            Assert.Equal(QuantityType.VolumeConcentration, quantityInfo.QuantityType);

            var units = EnumUtils.GetEnumValues<VolumeConcentrationUnit>().Except(new[] {VolumeConcentrationUnit.Undefined}).OrderBy(x => x.ToString()).ToArray();
            var unitNames = units.Select(x => x.ToString());

            // Obsolete members
            Assert.Equal(units, quantityInfo.Units);
            Assert.Equal(unitNames, quantityInfo.UnitNames);
        }

        [Fact]
        public void DecimalFractionToVolumeConcentrationUnits()
        {
            VolumeConcentration decimalfraction = VolumeConcentration.FromDecimalFractions(1);
            AssertEx.EqualTolerance(CentilitersPerLiterInOneDecimalFraction, decimalfraction.CentilitersPerLiter, CentilitersPerLiterTolerance);
            AssertEx.EqualTolerance(CentilitersPerMililiterInOneDecimalFraction, decimalfraction.CentilitersPerMililiter, CentilitersPerMililiterTolerance);
            AssertEx.EqualTolerance(DecilitersPerLiterInOneDecimalFraction, decimalfraction.DecilitersPerLiter, DecilitersPerLiterTolerance);
            AssertEx.EqualTolerance(DecilitersPerMililiterInOneDecimalFraction, decimalfraction.DecilitersPerMililiter, DecilitersPerMililiterTolerance);
            AssertEx.EqualTolerance(DecimalFractionsInOneDecimalFraction, decimalfraction.DecimalFractions, DecimalFractionsTolerance);
            AssertEx.EqualTolerance(LitersPerLiterInOneDecimalFraction, decimalfraction.LitersPerLiter, LitersPerLiterTolerance);
            AssertEx.EqualTolerance(LitersPerMililiterInOneDecimalFraction, decimalfraction.LitersPerMililiter, LitersPerMililiterTolerance);
            AssertEx.EqualTolerance(MicrolitersPerLiterInOneDecimalFraction, decimalfraction.MicrolitersPerLiter, MicrolitersPerLiterTolerance);
            AssertEx.EqualTolerance(MicrolitersPerMililiterInOneDecimalFraction, decimalfraction.MicrolitersPerMililiter, MicrolitersPerMililiterTolerance);
            AssertEx.EqualTolerance(MillilitersPerLiterInOneDecimalFraction, decimalfraction.MillilitersPerLiter, MillilitersPerLiterTolerance);
            AssertEx.EqualTolerance(MillilitersPerMililiterInOneDecimalFraction, decimalfraction.MillilitersPerMililiter, MillilitersPerMililiterTolerance);
            AssertEx.EqualTolerance(NanolitersPerLiterInOneDecimalFraction, decimalfraction.NanolitersPerLiter, NanolitersPerLiterTolerance);
            AssertEx.EqualTolerance(NanolitersPerMililiterInOneDecimalFraction, decimalfraction.NanolitersPerMililiter, NanolitersPerMililiterTolerance);
            AssertEx.EqualTolerance(PartsPerBillionInOneDecimalFraction, decimalfraction.PartsPerBillion, PartsPerBillionTolerance);
            AssertEx.EqualTolerance(PartsPerMillionInOneDecimalFraction, decimalfraction.PartsPerMillion, PartsPerMillionTolerance);
            AssertEx.EqualTolerance(PartsPerThousandInOneDecimalFraction, decimalfraction.PartsPerThousand, PartsPerThousandTolerance);
            AssertEx.EqualTolerance(PartsPerTrillionInOneDecimalFraction, decimalfraction.PartsPerTrillion, PartsPerTrillionTolerance);
            AssertEx.EqualTolerance(PercentInOneDecimalFraction, decimalfraction.Percent, PercentTolerance);
            AssertEx.EqualTolerance(PicolitersPerLiterInOneDecimalFraction, decimalfraction.PicolitersPerLiter, PicolitersPerLiterTolerance);
            AssertEx.EqualTolerance(PicolitersPerMililiterInOneDecimalFraction, decimalfraction.PicolitersPerMililiter, PicolitersPerMililiterTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = VolumeConcentration.From(1, VolumeConcentrationUnit.CentilitersPerLiter);
            AssertEx.EqualTolerance(1, quantity00.CentilitersPerLiter, CentilitersPerLiterTolerance);
            Assert.Equal(VolumeConcentrationUnit.CentilitersPerLiter, quantity00.Unit);

            var quantity01 = VolumeConcentration.From(1, VolumeConcentrationUnit.CentilitersPerMililiter);
            AssertEx.EqualTolerance(1, quantity01.CentilitersPerMililiter, CentilitersPerMililiterTolerance);
            Assert.Equal(VolumeConcentrationUnit.CentilitersPerMililiter, quantity01.Unit);

            var quantity02 = VolumeConcentration.From(1, VolumeConcentrationUnit.DecilitersPerLiter);
            AssertEx.EqualTolerance(1, quantity02.DecilitersPerLiter, DecilitersPerLiterTolerance);
            Assert.Equal(VolumeConcentrationUnit.DecilitersPerLiter, quantity02.Unit);

            var quantity03 = VolumeConcentration.From(1, VolumeConcentrationUnit.DecilitersPerMililiter);
            AssertEx.EqualTolerance(1, quantity03.DecilitersPerMililiter, DecilitersPerMililiterTolerance);
            Assert.Equal(VolumeConcentrationUnit.DecilitersPerMililiter, quantity03.Unit);

            var quantity04 = VolumeConcentration.From(1, VolumeConcentrationUnit.DecimalFraction);
            AssertEx.EqualTolerance(1, quantity04.DecimalFractions, DecimalFractionsTolerance);
            Assert.Equal(VolumeConcentrationUnit.DecimalFraction, quantity04.Unit);

            var quantity05 = VolumeConcentration.From(1, VolumeConcentrationUnit.LitersPerLiter);
            AssertEx.EqualTolerance(1, quantity05.LitersPerLiter, LitersPerLiterTolerance);
            Assert.Equal(VolumeConcentrationUnit.LitersPerLiter, quantity05.Unit);

            var quantity06 = VolumeConcentration.From(1, VolumeConcentrationUnit.LitersPerMililiter);
            AssertEx.EqualTolerance(1, quantity06.LitersPerMililiter, LitersPerMililiterTolerance);
            Assert.Equal(VolumeConcentrationUnit.LitersPerMililiter, quantity06.Unit);

            var quantity07 = VolumeConcentration.From(1, VolumeConcentrationUnit.MicrolitersPerLiter);
            AssertEx.EqualTolerance(1, quantity07.MicrolitersPerLiter, MicrolitersPerLiterTolerance);
            Assert.Equal(VolumeConcentrationUnit.MicrolitersPerLiter, quantity07.Unit);

            var quantity08 = VolumeConcentration.From(1, VolumeConcentrationUnit.MicrolitersPerMililiter);
            AssertEx.EqualTolerance(1, quantity08.MicrolitersPerMililiter, MicrolitersPerMililiterTolerance);
            Assert.Equal(VolumeConcentrationUnit.MicrolitersPerMililiter, quantity08.Unit);

            var quantity09 = VolumeConcentration.From(1, VolumeConcentrationUnit.MillilitersPerLiter);
            AssertEx.EqualTolerance(1, quantity09.MillilitersPerLiter, MillilitersPerLiterTolerance);
            Assert.Equal(VolumeConcentrationUnit.MillilitersPerLiter, quantity09.Unit);

            var quantity10 = VolumeConcentration.From(1, VolumeConcentrationUnit.MillilitersPerMililiter);
            AssertEx.EqualTolerance(1, quantity10.MillilitersPerMililiter, MillilitersPerMililiterTolerance);
            Assert.Equal(VolumeConcentrationUnit.MillilitersPerMililiter, quantity10.Unit);

            var quantity11 = VolumeConcentration.From(1, VolumeConcentrationUnit.NanolitersPerLiter);
            AssertEx.EqualTolerance(1, quantity11.NanolitersPerLiter, NanolitersPerLiterTolerance);
            Assert.Equal(VolumeConcentrationUnit.NanolitersPerLiter, quantity11.Unit);

            var quantity12 = VolumeConcentration.From(1, VolumeConcentrationUnit.NanolitersPerMililiter);
            AssertEx.EqualTolerance(1, quantity12.NanolitersPerMililiter, NanolitersPerMililiterTolerance);
            Assert.Equal(VolumeConcentrationUnit.NanolitersPerMililiter, quantity12.Unit);

            var quantity13 = VolumeConcentration.From(1, VolumeConcentrationUnit.PartPerBillion);
            AssertEx.EqualTolerance(1, quantity13.PartsPerBillion, PartsPerBillionTolerance);
            Assert.Equal(VolumeConcentrationUnit.PartPerBillion, quantity13.Unit);

            var quantity14 = VolumeConcentration.From(1, VolumeConcentrationUnit.PartPerMillion);
            AssertEx.EqualTolerance(1, quantity14.PartsPerMillion, PartsPerMillionTolerance);
            Assert.Equal(VolumeConcentrationUnit.PartPerMillion, quantity14.Unit);

            var quantity15 = VolumeConcentration.From(1, VolumeConcentrationUnit.PartPerThousand);
            AssertEx.EqualTolerance(1, quantity15.PartsPerThousand, PartsPerThousandTolerance);
            Assert.Equal(VolumeConcentrationUnit.PartPerThousand, quantity15.Unit);

            var quantity16 = VolumeConcentration.From(1, VolumeConcentrationUnit.PartPerTrillion);
            AssertEx.EqualTolerance(1, quantity16.PartsPerTrillion, PartsPerTrillionTolerance);
            Assert.Equal(VolumeConcentrationUnit.PartPerTrillion, quantity16.Unit);

            var quantity17 = VolumeConcentration.From(1, VolumeConcentrationUnit.Percent);
            AssertEx.EqualTolerance(1, quantity17.Percent, PercentTolerance);
            Assert.Equal(VolumeConcentrationUnit.Percent, quantity17.Unit);

            var quantity18 = VolumeConcentration.From(1, VolumeConcentrationUnit.PicolitersPerLiter);
            AssertEx.EqualTolerance(1, quantity18.PicolitersPerLiter, PicolitersPerLiterTolerance);
            Assert.Equal(VolumeConcentrationUnit.PicolitersPerLiter, quantity18.Unit);

            var quantity19 = VolumeConcentration.From(1, VolumeConcentrationUnit.PicolitersPerMililiter);
            AssertEx.EqualTolerance(1, quantity19.PicolitersPerMililiter, PicolitersPerMililiterTolerance);
            Assert.Equal(VolumeConcentrationUnit.PicolitersPerMililiter, quantity19.Unit);

        }

        [Fact]
        public void FromDecimalFractions_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => VolumeConcentration.FromDecimalFractions(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => VolumeConcentration.FromDecimalFractions(double.NegativeInfinity));
        }

        [Fact]
        public void FromDecimalFractions_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => VolumeConcentration.FromDecimalFractions(double.NaN));
        }

        [Fact]
        public void As()
        {
            var decimalfraction = VolumeConcentration.FromDecimalFractions(1);
            AssertEx.EqualTolerance(CentilitersPerLiterInOneDecimalFraction, decimalfraction.As(VolumeConcentrationUnit.CentilitersPerLiter), CentilitersPerLiterTolerance);
            AssertEx.EqualTolerance(CentilitersPerMililiterInOneDecimalFraction, decimalfraction.As(VolumeConcentrationUnit.CentilitersPerMililiter), CentilitersPerMililiterTolerance);
            AssertEx.EqualTolerance(DecilitersPerLiterInOneDecimalFraction, decimalfraction.As(VolumeConcentrationUnit.DecilitersPerLiter), DecilitersPerLiterTolerance);
            AssertEx.EqualTolerance(DecilitersPerMililiterInOneDecimalFraction, decimalfraction.As(VolumeConcentrationUnit.DecilitersPerMililiter), DecilitersPerMililiterTolerance);
            AssertEx.EqualTolerance(DecimalFractionsInOneDecimalFraction, decimalfraction.As(VolumeConcentrationUnit.DecimalFraction), DecimalFractionsTolerance);
            AssertEx.EqualTolerance(LitersPerLiterInOneDecimalFraction, decimalfraction.As(VolumeConcentrationUnit.LitersPerLiter), LitersPerLiterTolerance);
            AssertEx.EqualTolerance(LitersPerMililiterInOneDecimalFraction, decimalfraction.As(VolumeConcentrationUnit.LitersPerMililiter), LitersPerMililiterTolerance);
            AssertEx.EqualTolerance(MicrolitersPerLiterInOneDecimalFraction, decimalfraction.As(VolumeConcentrationUnit.MicrolitersPerLiter), MicrolitersPerLiterTolerance);
            AssertEx.EqualTolerance(MicrolitersPerMililiterInOneDecimalFraction, decimalfraction.As(VolumeConcentrationUnit.MicrolitersPerMililiter), MicrolitersPerMililiterTolerance);
            AssertEx.EqualTolerance(MillilitersPerLiterInOneDecimalFraction, decimalfraction.As(VolumeConcentrationUnit.MillilitersPerLiter), MillilitersPerLiterTolerance);
            AssertEx.EqualTolerance(MillilitersPerMililiterInOneDecimalFraction, decimalfraction.As(VolumeConcentrationUnit.MillilitersPerMililiter), MillilitersPerMililiterTolerance);
            AssertEx.EqualTolerance(NanolitersPerLiterInOneDecimalFraction, decimalfraction.As(VolumeConcentrationUnit.NanolitersPerLiter), NanolitersPerLiterTolerance);
            AssertEx.EqualTolerance(NanolitersPerMililiterInOneDecimalFraction, decimalfraction.As(VolumeConcentrationUnit.NanolitersPerMililiter), NanolitersPerMililiterTolerance);
            AssertEx.EqualTolerance(PartsPerBillionInOneDecimalFraction, decimalfraction.As(VolumeConcentrationUnit.PartPerBillion), PartsPerBillionTolerance);
            AssertEx.EqualTolerance(PartsPerMillionInOneDecimalFraction, decimalfraction.As(VolumeConcentrationUnit.PartPerMillion), PartsPerMillionTolerance);
            AssertEx.EqualTolerance(PartsPerThousandInOneDecimalFraction, decimalfraction.As(VolumeConcentrationUnit.PartPerThousand), PartsPerThousandTolerance);
            AssertEx.EqualTolerance(PartsPerTrillionInOneDecimalFraction, decimalfraction.As(VolumeConcentrationUnit.PartPerTrillion), PartsPerTrillionTolerance);
            AssertEx.EqualTolerance(PercentInOneDecimalFraction, decimalfraction.As(VolumeConcentrationUnit.Percent), PercentTolerance);
            AssertEx.EqualTolerance(PicolitersPerLiterInOneDecimalFraction, decimalfraction.As(VolumeConcentrationUnit.PicolitersPerLiter), PicolitersPerLiterTolerance);
            AssertEx.EqualTolerance(PicolitersPerMililiterInOneDecimalFraction, decimalfraction.As(VolumeConcentrationUnit.PicolitersPerMililiter), PicolitersPerMililiterTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new VolumeConcentration(value: 1, unit: VolumeConcentration.BaseUnit);
            Func<object> AsWithSIUnitSystem = () => quantity.As(UnitSystem.SI);

            if (SupportsSIUnitSystem)
            {
                var value = (double) AsWithSIUnitSystem();
                Assert.Equal(1, value);
            }
            else
            {
                Assert.Throws<ArgumentException>(AsWithSIUnitSystem);
            }
        }

        [Fact]
        public void Parse()
        {
            try
            {
                var parsed = VolumeConcentration.Parse("1 cL/L", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.CentilitersPerLiter, CentilitersPerLiterTolerance);
                Assert.Equal(VolumeConcentrationUnit.CentilitersPerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = VolumeConcentration.Parse("1 cL/mL", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.CentilitersPerMililiter, CentilitersPerMililiterTolerance);
                Assert.Equal(VolumeConcentrationUnit.CentilitersPerMililiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = VolumeConcentration.Parse("1 dL/L", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.DecilitersPerLiter, DecilitersPerLiterTolerance);
                Assert.Equal(VolumeConcentrationUnit.DecilitersPerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = VolumeConcentration.Parse("1 dL/mL", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.DecilitersPerMililiter, DecilitersPerMililiterTolerance);
                Assert.Equal(VolumeConcentrationUnit.DecilitersPerMililiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = VolumeConcentration.Parse("1 ", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.DecimalFractions, DecimalFractionsTolerance);
                Assert.Equal(VolumeConcentrationUnit.DecimalFraction, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = VolumeConcentration.Parse("1 L/L", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.LitersPerLiter, LitersPerLiterTolerance);
                Assert.Equal(VolumeConcentrationUnit.LitersPerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = VolumeConcentration.Parse("1 L/mL", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.LitersPerMililiter, LitersPerMililiterTolerance);
                Assert.Equal(VolumeConcentrationUnit.LitersPerMililiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = VolumeConcentration.Parse("1 µL/L", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MicrolitersPerLiter, MicrolitersPerLiterTolerance);
                Assert.Equal(VolumeConcentrationUnit.MicrolitersPerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = VolumeConcentration.Parse("1 µL/mL", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MicrolitersPerMililiter, MicrolitersPerMililiterTolerance);
                Assert.Equal(VolumeConcentrationUnit.MicrolitersPerMililiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = VolumeConcentration.Parse("1 mL/L", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MillilitersPerLiter, MillilitersPerLiterTolerance);
                Assert.Equal(VolumeConcentrationUnit.MillilitersPerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = VolumeConcentration.Parse("1 mL/mL", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MillilitersPerMililiter, MillilitersPerMililiterTolerance);
                Assert.Equal(VolumeConcentrationUnit.MillilitersPerMililiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = VolumeConcentration.Parse("1 nL/L", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.NanolitersPerLiter, NanolitersPerLiterTolerance);
                Assert.Equal(VolumeConcentrationUnit.NanolitersPerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = VolumeConcentration.Parse("1 nL/mL", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.NanolitersPerMililiter, NanolitersPerMililiterTolerance);
                Assert.Equal(VolumeConcentrationUnit.NanolitersPerMililiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = VolumeConcentration.Parse("1 ppb", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PartsPerBillion, PartsPerBillionTolerance);
                Assert.Equal(VolumeConcentrationUnit.PartPerBillion, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = VolumeConcentration.Parse("1 ppm", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PartsPerMillion, PartsPerMillionTolerance);
                Assert.Equal(VolumeConcentrationUnit.PartPerMillion, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = VolumeConcentration.Parse("1 ‰", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PartsPerThousand, PartsPerThousandTolerance);
                Assert.Equal(VolumeConcentrationUnit.PartPerThousand, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = VolumeConcentration.Parse("1 ppt", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PartsPerTrillion, PartsPerTrillionTolerance);
                Assert.Equal(VolumeConcentrationUnit.PartPerTrillion, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = VolumeConcentration.Parse("1 %", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Percent, PercentTolerance);
                Assert.Equal(VolumeConcentrationUnit.Percent, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = VolumeConcentration.Parse("1 % (v/v)", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Percent, PercentTolerance);
                Assert.Equal(VolumeConcentrationUnit.Percent, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = VolumeConcentration.Parse("1 pL/L", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PicolitersPerLiter, PicolitersPerLiterTolerance);
                Assert.Equal(VolumeConcentrationUnit.PicolitersPerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = VolumeConcentration.Parse("1 pL/mL", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PicolitersPerMililiter, PicolitersPerMililiterTolerance);
                Assert.Equal(VolumeConcentrationUnit.PicolitersPerMililiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParse()
        {
            {
                Assert.True(VolumeConcentration.TryParse("1 cL/L", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.CentilitersPerLiter, CentilitersPerLiterTolerance);
                Assert.Equal(VolumeConcentrationUnit.CentilitersPerLiter, parsed.Unit);
            }

            {
                Assert.True(VolumeConcentration.TryParse("1 cL/mL", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.CentilitersPerMililiter, CentilitersPerMililiterTolerance);
                Assert.Equal(VolumeConcentrationUnit.CentilitersPerMililiter, parsed.Unit);
            }

            {
                Assert.True(VolumeConcentration.TryParse("1 dL/L", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DecilitersPerLiter, DecilitersPerLiterTolerance);
                Assert.Equal(VolumeConcentrationUnit.DecilitersPerLiter, parsed.Unit);
            }

            {
                Assert.True(VolumeConcentration.TryParse("1 dL/mL", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DecilitersPerMililiter, DecilitersPerMililiterTolerance);
                Assert.Equal(VolumeConcentrationUnit.DecilitersPerMililiter, parsed.Unit);
            }

            {
                Assert.True(VolumeConcentration.TryParse("1 ", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DecimalFractions, DecimalFractionsTolerance);
                Assert.Equal(VolumeConcentrationUnit.DecimalFraction, parsed.Unit);
            }

            {
                Assert.True(VolumeConcentration.TryParse("1 L/L", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.LitersPerLiter, LitersPerLiterTolerance);
                Assert.Equal(VolumeConcentrationUnit.LitersPerLiter, parsed.Unit);
            }

            {
                Assert.True(VolumeConcentration.TryParse("1 L/mL", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.LitersPerMililiter, LitersPerMililiterTolerance);
                Assert.Equal(VolumeConcentrationUnit.LitersPerMililiter, parsed.Unit);
            }

            {
                Assert.True(VolumeConcentration.TryParse("1 µL/L", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MicrolitersPerLiter, MicrolitersPerLiterTolerance);
                Assert.Equal(VolumeConcentrationUnit.MicrolitersPerLiter, parsed.Unit);
            }

            {
                Assert.True(VolumeConcentration.TryParse("1 µL/mL", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MicrolitersPerMililiter, MicrolitersPerMililiterTolerance);
                Assert.Equal(VolumeConcentrationUnit.MicrolitersPerMililiter, parsed.Unit);
            }

            {
                Assert.True(VolumeConcentration.TryParse("1 mL/L", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MillilitersPerLiter, MillilitersPerLiterTolerance);
                Assert.Equal(VolumeConcentrationUnit.MillilitersPerLiter, parsed.Unit);
            }

            {
                Assert.True(VolumeConcentration.TryParse("1 mL/mL", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MillilitersPerMililiter, MillilitersPerMililiterTolerance);
                Assert.Equal(VolumeConcentrationUnit.MillilitersPerMililiter, parsed.Unit);
            }

            {
                Assert.True(VolumeConcentration.TryParse("1 nL/L", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.NanolitersPerLiter, NanolitersPerLiterTolerance);
                Assert.Equal(VolumeConcentrationUnit.NanolitersPerLiter, parsed.Unit);
            }

            {
                Assert.True(VolumeConcentration.TryParse("1 nL/mL", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.NanolitersPerMililiter, NanolitersPerMililiterTolerance);
                Assert.Equal(VolumeConcentrationUnit.NanolitersPerMililiter, parsed.Unit);
            }

            {
                Assert.True(VolumeConcentration.TryParse("1 ppb", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PartsPerBillion, PartsPerBillionTolerance);
                Assert.Equal(VolumeConcentrationUnit.PartPerBillion, parsed.Unit);
            }

            {
                Assert.True(VolumeConcentration.TryParse("1 ppm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PartsPerMillion, PartsPerMillionTolerance);
                Assert.Equal(VolumeConcentrationUnit.PartPerMillion, parsed.Unit);
            }

            {
                Assert.True(VolumeConcentration.TryParse("1 ‰", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PartsPerThousand, PartsPerThousandTolerance);
                Assert.Equal(VolumeConcentrationUnit.PartPerThousand, parsed.Unit);
            }

            {
                Assert.True(VolumeConcentration.TryParse("1 ppt", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PartsPerTrillion, PartsPerTrillionTolerance);
                Assert.Equal(VolumeConcentrationUnit.PartPerTrillion, parsed.Unit);
            }

            {
                Assert.True(VolumeConcentration.TryParse("1 %", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Percent, PercentTolerance);
                Assert.Equal(VolumeConcentrationUnit.Percent, parsed.Unit);
            }

            {
                Assert.True(VolumeConcentration.TryParse("1 % (v/v)", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Percent, PercentTolerance);
                Assert.Equal(VolumeConcentrationUnit.Percent, parsed.Unit);
            }

            {
                Assert.True(VolumeConcentration.TryParse("1 pL/L", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PicolitersPerLiter, PicolitersPerLiterTolerance);
                Assert.Equal(VolumeConcentrationUnit.PicolitersPerLiter, parsed.Unit);
            }

            {
                Assert.True(VolumeConcentration.TryParse("1 pL/mL", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PicolitersPerMililiter, PicolitersPerMililiterTolerance);
                Assert.Equal(VolumeConcentrationUnit.PicolitersPerMililiter, parsed.Unit);
            }

        }

        [Fact]
        public void ParseUnit()
        {
            try
            {
                var parsedUnit = VolumeConcentration.ParseUnit("cL/L", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeConcentrationUnit.CentilitersPerLiter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = VolumeConcentration.ParseUnit("cL/mL", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeConcentrationUnit.CentilitersPerMililiter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = VolumeConcentration.ParseUnit("dL/L", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeConcentrationUnit.DecilitersPerLiter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = VolumeConcentration.ParseUnit("dL/mL", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeConcentrationUnit.DecilitersPerMililiter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = VolumeConcentration.ParseUnit("", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeConcentrationUnit.DecimalFraction, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = VolumeConcentration.ParseUnit("L/L", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeConcentrationUnit.LitersPerLiter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = VolumeConcentration.ParseUnit("L/mL", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeConcentrationUnit.LitersPerMililiter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = VolumeConcentration.ParseUnit("µL/L", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeConcentrationUnit.MicrolitersPerLiter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = VolumeConcentration.ParseUnit("µL/mL", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeConcentrationUnit.MicrolitersPerMililiter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = VolumeConcentration.ParseUnit("mL/L", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeConcentrationUnit.MillilitersPerLiter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = VolumeConcentration.ParseUnit("mL/mL", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeConcentrationUnit.MillilitersPerMililiter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = VolumeConcentration.ParseUnit("nL/L", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeConcentrationUnit.NanolitersPerLiter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = VolumeConcentration.ParseUnit("nL/mL", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeConcentrationUnit.NanolitersPerMililiter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = VolumeConcentration.ParseUnit("ppb", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeConcentrationUnit.PartPerBillion, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = VolumeConcentration.ParseUnit("ppm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeConcentrationUnit.PartPerMillion, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = VolumeConcentration.ParseUnit("‰", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeConcentrationUnit.PartPerThousand, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = VolumeConcentration.ParseUnit("ppt", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeConcentrationUnit.PartPerTrillion, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = VolumeConcentration.ParseUnit("%", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeConcentrationUnit.Percent, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = VolumeConcentration.ParseUnit("% (v/v)", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeConcentrationUnit.Percent, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = VolumeConcentration.ParseUnit("pL/L", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeConcentrationUnit.PicolitersPerLiter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = VolumeConcentration.ParseUnit("pL/mL", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(VolumeConcentrationUnit.PicolitersPerMililiter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParseUnit()
        {
            {
                Assert.True(VolumeConcentration.TryParseUnit("cL/L", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeConcentrationUnit.CentilitersPerLiter, parsedUnit);
            }

            {
                Assert.True(VolumeConcentration.TryParseUnit("cL/mL", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeConcentrationUnit.CentilitersPerMililiter, parsedUnit);
            }

            {
                Assert.True(VolumeConcentration.TryParseUnit("dL/L", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeConcentrationUnit.DecilitersPerLiter, parsedUnit);
            }

            {
                Assert.True(VolumeConcentration.TryParseUnit("dL/mL", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeConcentrationUnit.DecilitersPerMililiter, parsedUnit);
            }

            {
                Assert.True(VolumeConcentration.TryParseUnit("", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeConcentrationUnit.DecimalFraction, parsedUnit);
            }

            {
                Assert.True(VolumeConcentration.TryParseUnit("L/L", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeConcentrationUnit.LitersPerLiter, parsedUnit);
            }

            {
                Assert.True(VolumeConcentration.TryParseUnit("L/mL", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeConcentrationUnit.LitersPerMililiter, parsedUnit);
            }

            {
                Assert.True(VolumeConcentration.TryParseUnit("µL/L", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeConcentrationUnit.MicrolitersPerLiter, parsedUnit);
            }

            {
                Assert.True(VolumeConcentration.TryParseUnit("µL/mL", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeConcentrationUnit.MicrolitersPerMililiter, parsedUnit);
            }

            {
                Assert.True(VolumeConcentration.TryParseUnit("mL/L", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeConcentrationUnit.MillilitersPerLiter, parsedUnit);
            }

            {
                Assert.True(VolumeConcentration.TryParseUnit("mL/mL", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeConcentrationUnit.MillilitersPerMililiter, parsedUnit);
            }

            {
                Assert.True(VolumeConcentration.TryParseUnit("nL/L", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeConcentrationUnit.NanolitersPerLiter, parsedUnit);
            }

            {
                Assert.True(VolumeConcentration.TryParseUnit("nL/mL", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeConcentrationUnit.NanolitersPerMililiter, parsedUnit);
            }

            {
                Assert.True(VolumeConcentration.TryParseUnit("ppb", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeConcentrationUnit.PartPerBillion, parsedUnit);
            }

            {
                Assert.True(VolumeConcentration.TryParseUnit("ppm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeConcentrationUnit.PartPerMillion, parsedUnit);
            }

            {
                Assert.True(VolumeConcentration.TryParseUnit("‰", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeConcentrationUnit.PartPerThousand, parsedUnit);
            }

            {
                Assert.True(VolumeConcentration.TryParseUnit("ppt", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeConcentrationUnit.PartPerTrillion, parsedUnit);
            }

            {
                Assert.True(VolumeConcentration.TryParseUnit("%", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeConcentrationUnit.Percent, parsedUnit);
            }

            {
                Assert.True(VolumeConcentration.TryParseUnit("% (v/v)", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeConcentrationUnit.Percent, parsedUnit);
            }

            {
                Assert.True(VolumeConcentration.TryParseUnit("pL/L", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeConcentrationUnit.PicolitersPerLiter, parsedUnit);
            }

            {
                Assert.True(VolumeConcentration.TryParseUnit("pL/mL", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(VolumeConcentrationUnit.PicolitersPerMililiter, parsedUnit);
            }

        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(VolumeConcentrationUnit unit)
        {
            var inBaseUnits = VolumeConcentration.From(1.0, VolumeConcentration.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, (double)converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(VolumeConcentrationUnit unit)
        {
            var quantity = VolumeConcentration.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(VolumeConcentrationUnit unit)
        {
            // See if there is a unit available that is not the base unit.
            var fromUnit = VolumeConcentration.Units.FirstOrDefault(u => u != VolumeConcentration.BaseUnit && u != VolumeConcentrationUnit.Undefined);

            // If there is only one unit for the quantity, we must use the base unit.
            if (fromUnit == VolumeConcentrationUnit.Undefined)
                fromUnit = VolumeConcentration.BaseUnit;

            var quantity = VolumeConcentration.From(3.0, fromUnit);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            VolumeConcentration decimalfraction = VolumeConcentration.FromDecimalFractions(1);
            AssertEx.EqualTolerance(1, VolumeConcentration.FromCentilitersPerLiter(decimalfraction.CentilitersPerLiter).DecimalFractions, CentilitersPerLiterTolerance);
            AssertEx.EqualTolerance(1, VolumeConcentration.FromCentilitersPerMililiter(decimalfraction.CentilitersPerMililiter).DecimalFractions, CentilitersPerMililiterTolerance);
            AssertEx.EqualTolerance(1, VolumeConcentration.FromDecilitersPerLiter(decimalfraction.DecilitersPerLiter).DecimalFractions, DecilitersPerLiterTolerance);
            AssertEx.EqualTolerance(1, VolumeConcentration.FromDecilitersPerMililiter(decimalfraction.DecilitersPerMililiter).DecimalFractions, DecilitersPerMililiterTolerance);
            AssertEx.EqualTolerance(1, VolumeConcentration.FromDecimalFractions(decimalfraction.DecimalFractions).DecimalFractions, DecimalFractionsTolerance);
            AssertEx.EqualTolerance(1, VolumeConcentration.FromLitersPerLiter(decimalfraction.LitersPerLiter).DecimalFractions, LitersPerLiterTolerance);
            AssertEx.EqualTolerance(1, VolumeConcentration.FromLitersPerMililiter(decimalfraction.LitersPerMililiter).DecimalFractions, LitersPerMililiterTolerance);
            AssertEx.EqualTolerance(1, VolumeConcentration.FromMicrolitersPerLiter(decimalfraction.MicrolitersPerLiter).DecimalFractions, MicrolitersPerLiterTolerance);
            AssertEx.EqualTolerance(1, VolumeConcentration.FromMicrolitersPerMililiter(decimalfraction.MicrolitersPerMililiter).DecimalFractions, MicrolitersPerMililiterTolerance);
            AssertEx.EqualTolerance(1, VolumeConcentration.FromMillilitersPerLiter(decimalfraction.MillilitersPerLiter).DecimalFractions, MillilitersPerLiterTolerance);
            AssertEx.EqualTolerance(1, VolumeConcentration.FromMillilitersPerMililiter(decimalfraction.MillilitersPerMililiter).DecimalFractions, MillilitersPerMililiterTolerance);
            AssertEx.EqualTolerance(1, VolumeConcentration.FromNanolitersPerLiter(decimalfraction.NanolitersPerLiter).DecimalFractions, NanolitersPerLiterTolerance);
            AssertEx.EqualTolerance(1, VolumeConcentration.FromNanolitersPerMililiter(decimalfraction.NanolitersPerMililiter).DecimalFractions, NanolitersPerMililiterTolerance);
            AssertEx.EqualTolerance(1, VolumeConcentration.FromPartsPerBillion(decimalfraction.PartsPerBillion).DecimalFractions, PartsPerBillionTolerance);
            AssertEx.EqualTolerance(1, VolumeConcentration.FromPartsPerMillion(decimalfraction.PartsPerMillion).DecimalFractions, PartsPerMillionTolerance);
            AssertEx.EqualTolerance(1, VolumeConcentration.FromPartsPerThousand(decimalfraction.PartsPerThousand).DecimalFractions, PartsPerThousandTolerance);
            AssertEx.EqualTolerance(1, VolumeConcentration.FromPartsPerTrillion(decimalfraction.PartsPerTrillion).DecimalFractions, PartsPerTrillionTolerance);
            AssertEx.EqualTolerance(1, VolumeConcentration.FromPercent(decimalfraction.Percent).DecimalFractions, PercentTolerance);
            AssertEx.EqualTolerance(1, VolumeConcentration.FromPicolitersPerLiter(decimalfraction.PicolitersPerLiter).DecimalFractions, PicolitersPerLiterTolerance);
            AssertEx.EqualTolerance(1, VolumeConcentration.FromPicolitersPerMililiter(decimalfraction.PicolitersPerMililiter).DecimalFractions, PicolitersPerMililiterTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            VolumeConcentration v = VolumeConcentration.FromDecimalFractions(1);
            AssertEx.EqualTolerance(-1, -v.DecimalFractions, DecimalFractionsTolerance);
            AssertEx.EqualTolerance(2, (VolumeConcentration.FromDecimalFractions(3)-v).DecimalFractions, DecimalFractionsTolerance);
            AssertEx.EqualTolerance(2, (v + v).DecimalFractions, DecimalFractionsTolerance);
            AssertEx.EqualTolerance(10, (v*10).DecimalFractions, DecimalFractionsTolerance);
            AssertEx.EqualTolerance(10, (10*v).DecimalFractions, DecimalFractionsTolerance);
            AssertEx.EqualTolerance(2, (VolumeConcentration.FromDecimalFractions(10)/5).DecimalFractions, DecimalFractionsTolerance);
            AssertEx.EqualTolerance(2, VolumeConcentration.FromDecimalFractions(10)/VolumeConcentration.FromDecimalFractions(5), DecimalFractionsTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            VolumeConcentration oneDecimalFraction = VolumeConcentration.FromDecimalFractions(1);
            VolumeConcentration twoDecimalFractions = VolumeConcentration.FromDecimalFractions(2);

            Assert.True(oneDecimalFraction < twoDecimalFractions);
            Assert.True(oneDecimalFraction <= twoDecimalFractions);
            Assert.True(twoDecimalFractions > oneDecimalFraction);
            Assert.True(twoDecimalFractions >= oneDecimalFraction);

            Assert.False(oneDecimalFraction > twoDecimalFractions);
            Assert.False(oneDecimalFraction >= twoDecimalFractions);
            Assert.False(twoDecimalFractions < oneDecimalFraction);
            Assert.False(twoDecimalFractions <= oneDecimalFraction);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            VolumeConcentration decimalfraction = VolumeConcentration.FromDecimalFractions(1);
            Assert.Equal(0, decimalfraction.CompareTo(decimalfraction));
            Assert.True(decimalfraction.CompareTo(VolumeConcentration.Zero) > 0);
            Assert.True(VolumeConcentration.Zero.CompareTo(decimalfraction) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            VolumeConcentration decimalfraction = VolumeConcentration.FromDecimalFractions(1);
            Assert.Throws<ArgumentException>(() => decimalfraction.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            VolumeConcentration decimalfraction = VolumeConcentration.FromDecimalFractions(1);
            Assert.Throws<ArgumentNullException>(() => decimalfraction.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = VolumeConcentration.FromDecimalFractions(1);
            var b = VolumeConcentration.FromDecimalFractions(2);

#pragma warning disable CS8073
// ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
#pragma warning restore CS8073
        }

        [Fact]
        public void Equals_SameType_IsImplemented()
        {
            var a = VolumeConcentration.FromDecimalFractions(1);
            var b = VolumeConcentration.FromDecimalFractions(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
        }

        [Fact]
        public void Equals_QuantityAsObject_IsImplemented()
        {
            object a = VolumeConcentration.FromDecimalFractions(1);
            object b = VolumeConcentration.FromDecimalFractions(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals((object)null));
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = VolumeConcentration.FromDecimalFractions(1);
            Assert.True(v.Equals(VolumeConcentration.FromDecimalFractions(1), DecimalFractionsTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(VolumeConcentration.Zero, DecimalFractionsTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = VolumeConcentration.FromDecimalFractions(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(VolumeConcentration.FromDecimalFractions(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            VolumeConcentration decimalfraction = VolumeConcentration.FromDecimalFractions(1);
            Assert.False(decimalfraction.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            VolumeConcentration decimalfraction = VolumeConcentration.FromDecimalFractions(1);
            Assert.False(decimalfraction.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(VolumeConcentrationUnit.Undefined, VolumeConcentration.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(VolumeConcentrationUnit)).Cast<VolumeConcentrationUnit>();
            foreach(var unit in units)
            {
                if (unit == VolumeConcentrationUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(VolumeConcentration.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentUICulture;
            Thread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 cL/L", new VolumeConcentration(1, VolumeConcentrationUnit.CentilitersPerLiter).ToString());
                Assert.Equal("1 cL/mL", new VolumeConcentration(1, VolumeConcentrationUnit.CentilitersPerMililiter).ToString());
                Assert.Equal("1 dL/L", new VolumeConcentration(1, VolumeConcentrationUnit.DecilitersPerLiter).ToString());
                Assert.Equal("1 dL/mL", new VolumeConcentration(1, VolumeConcentrationUnit.DecilitersPerMililiter).ToString());
                Assert.Equal("1", new VolumeConcentration(1, VolumeConcentrationUnit.DecimalFraction).ToString());
                Assert.Equal("1 L/L", new VolumeConcentration(1, VolumeConcentrationUnit.LitersPerLiter).ToString());
                Assert.Equal("1 L/mL", new VolumeConcentration(1, VolumeConcentrationUnit.LitersPerMililiter).ToString());
                Assert.Equal("1 µL/L", new VolumeConcentration(1, VolumeConcentrationUnit.MicrolitersPerLiter).ToString());
                Assert.Equal("1 µL/mL", new VolumeConcentration(1, VolumeConcentrationUnit.MicrolitersPerMililiter).ToString());
                Assert.Equal("1 mL/L", new VolumeConcentration(1, VolumeConcentrationUnit.MillilitersPerLiter).ToString());
                Assert.Equal("1 mL/mL", new VolumeConcentration(1, VolumeConcentrationUnit.MillilitersPerMililiter).ToString());
                Assert.Equal("1 nL/L", new VolumeConcentration(1, VolumeConcentrationUnit.NanolitersPerLiter).ToString());
                Assert.Equal("1 nL/mL", new VolumeConcentration(1, VolumeConcentrationUnit.NanolitersPerMililiter).ToString());
                Assert.Equal("1 ppb", new VolumeConcentration(1, VolumeConcentrationUnit.PartPerBillion).ToString());
                Assert.Equal("1 ppm", new VolumeConcentration(1, VolumeConcentrationUnit.PartPerMillion).ToString());
                Assert.Equal("1 ‰", new VolumeConcentration(1, VolumeConcentrationUnit.PartPerThousand).ToString());
                Assert.Equal("1 ppt", new VolumeConcentration(1, VolumeConcentrationUnit.PartPerTrillion).ToString());
                Assert.Equal("1 %", new VolumeConcentration(1, VolumeConcentrationUnit.Percent).ToString());
                Assert.Equal("1 pL/L", new VolumeConcentration(1, VolumeConcentrationUnit.PicolitersPerLiter).ToString());
                Assert.Equal("1 pL/mL", new VolumeConcentration(1, VolumeConcentrationUnit.PicolitersPerMililiter).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentUICulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 cL/L", new VolumeConcentration(1, VolumeConcentrationUnit.CentilitersPerLiter).ToString(swedishCulture));
            Assert.Equal("1 cL/mL", new VolumeConcentration(1, VolumeConcentrationUnit.CentilitersPerMililiter).ToString(swedishCulture));
            Assert.Equal("1 dL/L", new VolumeConcentration(1, VolumeConcentrationUnit.DecilitersPerLiter).ToString(swedishCulture));
            Assert.Equal("1 dL/mL", new VolumeConcentration(1, VolumeConcentrationUnit.DecilitersPerMililiter).ToString(swedishCulture));
            Assert.Equal("1", new VolumeConcentration(1, VolumeConcentrationUnit.DecimalFraction).ToString(swedishCulture));
            Assert.Equal("1 L/L", new VolumeConcentration(1, VolumeConcentrationUnit.LitersPerLiter).ToString(swedishCulture));
            Assert.Equal("1 L/mL", new VolumeConcentration(1, VolumeConcentrationUnit.LitersPerMililiter).ToString(swedishCulture));
            Assert.Equal("1 µL/L", new VolumeConcentration(1, VolumeConcentrationUnit.MicrolitersPerLiter).ToString(swedishCulture));
            Assert.Equal("1 µL/mL", new VolumeConcentration(1, VolumeConcentrationUnit.MicrolitersPerMililiter).ToString(swedishCulture));
            Assert.Equal("1 mL/L", new VolumeConcentration(1, VolumeConcentrationUnit.MillilitersPerLiter).ToString(swedishCulture));
            Assert.Equal("1 mL/mL", new VolumeConcentration(1, VolumeConcentrationUnit.MillilitersPerMililiter).ToString(swedishCulture));
            Assert.Equal("1 nL/L", new VolumeConcentration(1, VolumeConcentrationUnit.NanolitersPerLiter).ToString(swedishCulture));
            Assert.Equal("1 nL/mL", new VolumeConcentration(1, VolumeConcentrationUnit.NanolitersPerMililiter).ToString(swedishCulture));
            Assert.Equal("1 ppb", new VolumeConcentration(1, VolumeConcentrationUnit.PartPerBillion).ToString(swedishCulture));
            Assert.Equal("1 ppm", new VolumeConcentration(1, VolumeConcentrationUnit.PartPerMillion).ToString(swedishCulture));
            Assert.Equal("1 ‰", new VolumeConcentration(1, VolumeConcentrationUnit.PartPerThousand).ToString(swedishCulture));
            Assert.Equal("1 ppt", new VolumeConcentration(1, VolumeConcentrationUnit.PartPerTrillion).ToString(swedishCulture));
            Assert.Equal("1 %", new VolumeConcentration(1, VolumeConcentrationUnit.Percent).ToString(swedishCulture));
            Assert.Equal("1 pL/L", new VolumeConcentration(1, VolumeConcentrationUnit.PicolitersPerLiter).ToString(swedishCulture));
            Assert.Equal("1 pL/mL", new VolumeConcentration(1, VolumeConcentrationUnit.PicolitersPerMililiter).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentUICulture;
            try
            {
                CultureInfo.CurrentUICulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1", new VolumeConcentration(0.123456, VolumeConcentrationUnit.DecimalFraction).ToString("s1"));
                Assert.Equal("0.12", new VolumeConcentration(0.123456, VolumeConcentrationUnit.DecimalFraction).ToString("s2"));
                Assert.Equal("0.123", new VolumeConcentration(0.123456, VolumeConcentrationUnit.DecimalFraction).ToString("s3"));
                Assert.Equal("0.1235", new VolumeConcentration(0.123456, VolumeConcentrationUnit.DecimalFraction).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentUICulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1", new VolumeConcentration(0.123456, VolumeConcentrationUnit.DecimalFraction).ToString("s1", culture));
            Assert.Equal("0.12", new VolumeConcentration(0.123456, VolumeConcentrationUnit.DecimalFraction).ToString("s2", culture));
            Assert.Equal("0.123", new VolumeConcentration(0.123456, VolumeConcentrationUnit.DecimalFraction).ToString("s3", culture));
            Assert.Equal("0.1235", new VolumeConcentration(0.123456, VolumeConcentrationUnit.DecimalFraction).ToString("s4", culture));
        }


        [Fact]
        public void ToString_NullFormat_ThrowsArgumentNullException()
        {
            var quantity = VolumeConcentration.FromDecimalFractions(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, null, null));
        }

        [Fact]
        public void ToString_NullArgs_ThrowsArgumentNullException()
        {
            var quantity = VolumeConcentration.FromDecimalFractions(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, "g", null));
        }

        [Fact]
        public void ToString_NullProvider_EqualsCurrentUICulture()
        {
            var quantity = VolumeConcentration.FromDecimalFractions(1.0);
            Assert.Equal(quantity.ToString(CultureInfo.CurrentUICulture, "g"), quantity.ToString(null, "g"));
        }


        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = VolumeConcentration.FromDecimalFractions(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = VolumeConcentration.FromDecimalFractions(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = VolumeConcentration.FromDecimalFractions(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = VolumeConcentration.FromDecimalFractions(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = VolumeConcentration.FromDecimalFractions(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = VolumeConcentration.FromDecimalFractions(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = VolumeConcentration.FromDecimalFractions(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = VolumeConcentration.FromDecimalFractions(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = VolumeConcentration.FromDecimalFractions(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = VolumeConcentration.FromDecimalFractions(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = VolumeConcentration.FromDecimalFractions(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = VolumeConcentration.FromDecimalFractions(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = VolumeConcentration.FromDecimalFractions(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = VolumeConcentration.FromDecimalFractions(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = VolumeConcentration.FromDecimalFractions(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = VolumeConcentration.FromDecimalFractions(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(VolumeConcentration)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = VolumeConcentration.FromDecimalFractions(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(VolumeConcentrationUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityType_EqualsQuantityType()
        {
            var quantity = VolumeConcentration.FromDecimalFractions(1.0);
            Assert.Equal(QuantityType.VolumeConcentration, Convert.ChangeType(quantity, typeof(QuantityType)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = VolumeConcentration.FromDecimalFractions(1.0);
            Assert.Equal(VolumeConcentration.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = VolumeConcentration.FromDecimalFractions(1.0);
            Assert.Equal(VolumeConcentration.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = VolumeConcentration.FromDecimalFractions(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = VolumeConcentration.FromDecimalFractions(1.0);
            Assert.Equal(new {VolumeConcentration.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = VolumeConcentration.FromDecimalFractions(value);
            Assert.Equal(VolumeConcentration.FromDecimalFractions(-value), -quantity);
        }
    }
}
