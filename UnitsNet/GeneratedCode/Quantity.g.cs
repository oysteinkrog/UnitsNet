//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using JetBrains.Annotations;
using UnitsNet.InternalHelpers;
using UnitsNet.Units;
using System.Collections.Generic;

#nullable enable

namespace UnitsNet
{
    /// <summary>
    ///     Dynamically parse or construct quantities when types are only known at runtime.
    /// </summary>
    public static partial class Quantity
    {
        /// <summary>
        /// All QuantityInfo instances mapped by quantity name that are present in UnitsNet by default.
        /// </summary>
        public static readonly IDictionary<string, QuantityInfo> ByName = new Dictionary<string, QuantityInfo>
        {
            { "Acceleration", Acceleration.Info },
            { "AmountOfSubstance", AmountOfSubstance.Info },
            { "AmplitudeRatio", AmplitudeRatio.Info },
            { "Angle", Angle.Info },
            { "ApparentEnergy", ApparentEnergy.Info },
            { "ApparentPower", ApparentPower.Info },
            { "Area", Area.Info },
            { "AreaDensity", AreaDensity.Info },
            { "AreaMomentOfInertia", AreaMomentOfInertia.Info },
            { "BitRate", BitRate.Info },
            { "BrakeSpecificFuelConsumption", BrakeSpecificFuelConsumption.Info },
            { "Capacitance", Capacitance.Info },
            { "CoefficientOfThermalExpansion", CoefficientOfThermalExpansion.Info },
            { "Compressibility", Compressibility.Info },
            { "Density", Density.Info },
            { "Duration", Duration.Info },
            { "DynamicViscosity", DynamicViscosity.Info },
            { "ElectricAdmittance", ElectricAdmittance.Info },
            { "ElectricCharge", ElectricCharge.Info },
            { "ElectricChargeDensity", ElectricChargeDensity.Info },
            { "ElectricConductance", ElectricConductance.Info },
            { "ElectricConductivity", ElectricConductivity.Info },
            { "ElectricCurrent", ElectricCurrent.Info },
            { "ElectricCurrentDensity", ElectricCurrentDensity.Info },
            { "ElectricCurrentGradient", ElectricCurrentGradient.Info },
            { "ElectricField", ElectricField.Info },
            { "ElectricInductance", ElectricInductance.Info },
            { "ElectricPotential", ElectricPotential.Info },
            { "ElectricPotentialAc", ElectricPotentialAc.Info },
            { "ElectricPotentialChangeRate", ElectricPotentialChangeRate.Info },
            { "ElectricPotentialDc", ElectricPotentialDc.Info },
            { "ElectricResistance", ElectricResistance.Info },
            { "ElectricResistivity", ElectricResistivity.Info },
            { "ElectricSurfaceChargeDensity", ElectricSurfaceChargeDensity.Info },
            { "Energy", Energy.Info },
            { "Entropy", Entropy.Info },
            { "Force", Force.Info },
            { "ForceChangeRate", ForceChangeRate.Info },
            { "ForcePerLength", ForcePerLength.Info },
            { "Frequency", Frequency.Info },
            { "FuelEfficiency", FuelEfficiency.Info },
            { "HeatFlux", HeatFlux.Info },
            { "HeatTransferCoefficient", HeatTransferCoefficient.Info },
            { "Illuminance", Illuminance.Info },
            { "Information", Information.Info },
            { "Irradiance", Irradiance.Info },
            { "Irradiation", Irradiation.Info },
            { "Jerk", Jerk.Info },
            { "KinematicViscosity", KinematicViscosity.Info },
            { "LapseRate", LapseRate.Info },
            { "Length", Length.Info },
            { "Level", Level.Info },
            { "LinearDensity", LinearDensity.Info },
            { "LinearPowerDensity", LinearPowerDensity.Info },
            { "Luminance", Luminance.Info },
            { "Luminosity", Luminosity.Info },
            { "LuminousFlux", LuminousFlux.Info },
            { "LuminousIntensity", LuminousIntensity.Info },
            { "MagneticField", MagneticField.Info },
            { "MagneticFlux", MagneticFlux.Info },
            { "Magnetization", Magnetization.Info },
            { "Mass", Mass.Info },
            { "MassConcentration", MassConcentration.Info },
            { "MassFlow", MassFlow.Info },
            { "MassFlux", MassFlux.Info },
            { "MassFraction", MassFraction.Info },
            { "MassMomentOfInertia", MassMomentOfInertia.Info },
            { "MolarEnergy", MolarEnergy.Info },
            { "MolarEntropy", MolarEntropy.Info },
            { "Molarity", Molarity.Info },
            { "MolarMass", MolarMass.Info },
            { "Permeability", Permeability.Info },
            { "Permittivity", Permittivity.Info },
            { "PorousMediumPermeability", PorousMediumPermeability.Info },
            { "Power", Power.Info },
            { "PowerDensity", PowerDensity.Info },
            { "PowerRatio", PowerRatio.Info },
            { "Pressure", Pressure.Info },
            { "PressureChangeRate", PressureChangeRate.Info },
            { "Ratio", Ratio.Info },
            { "RatioChangeRate", RatioChangeRate.Info },
            { "ReactiveEnergy", ReactiveEnergy.Info },
            { "ReactivePower", ReactivePower.Info },
            { "ReciprocalArea", ReciprocalArea.Info },
            { "ReciprocalLength", ReciprocalLength.Info },
            { "RelativeHumidity", RelativeHumidity.Info },
            { "RotationalAcceleration", RotationalAcceleration.Info },
            { "RotationalSpeed", RotationalSpeed.Info },
            { "RotationalStiffness", RotationalStiffness.Info },
            { "RotationalStiffnessPerLength", RotationalStiffnessPerLength.Info },
            { "Scalar", Scalar.Info },
            { "SolidAngle", SolidAngle.Info },
            { "SpecificEnergy", SpecificEnergy.Info },
            { "SpecificEntropy", SpecificEntropy.Info },
            { "SpecificFuelConsumption", SpecificFuelConsumption.Info },
            { "SpecificVolume", SpecificVolume.Info },
            { "SpecificWeight", SpecificWeight.Info },
            { "Speed", Speed.Info },
            { "StandardVolumeFlow", StandardVolumeFlow.Info },
            { "Temperature", Temperature.Info },
            { "TemperatureChangeRate", TemperatureChangeRate.Info },
            { "TemperatureDelta", TemperatureDelta.Info },
            { "TemperatureGradient", TemperatureGradient.Info },
            { "ThermalConductivity", ThermalConductivity.Info },
            { "ThermalResistance", ThermalResistance.Info },
            { "Torque", Torque.Info },
            { "TorquePerLength", TorquePerLength.Info },
            { "Turbidity", Turbidity.Info },
            { "VitaminA", VitaminA.Info },
            { "Volume", Volume.Info },
            { "VolumeConcentration", VolumeConcentration.Info },
            { "VolumeFlow", VolumeFlow.Info },
            { "VolumeFlowPerArea", VolumeFlowPerArea.Info },
            { "VolumePerLength", VolumePerLength.Info },
            { "VolumetricHeatCapacity", VolumetricHeatCapacity.Info },
            { "WarpingMomentOfInertia", WarpingMomentOfInertia.Info },
        };

        /// <summary>
        /// Dynamically constructs a quantity of the given <see cref="QuantityType"/> with the value in the quantity's base units.
        /// </summary>
        /// <param name="quantityType">The <see cref="QuantityType"/> of the quantity to create.</param>
        /// <param name="value">The value to construct the quantity with.</param>
        /// <returns>The created quantity.</returns>
        [Obsolete("QuantityType will be removed. Use FromQuantityInfo(QuantityInfo, QuantityValue) instead.")]
        public static IQuantity FromQuantityType(QuantityType quantityType, QuantityValue value)
        {
            return quantityType switch
            {
                QuantityType.Acceleration => Acceleration.From(value, Acceleration.BaseUnit),
                QuantityType.AmountOfSubstance => AmountOfSubstance.From(value, AmountOfSubstance.BaseUnit),
                QuantityType.AmplitudeRatio => AmplitudeRatio.From(value, AmplitudeRatio.BaseUnit),
                QuantityType.Angle => Angle.From(value, Angle.BaseUnit),
                QuantityType.ApparentEnergy => ApparentEnergy.From(value, ApparentEnergy.BaseUnit),
                QuantityType.ApparentPower => ApparentPower.From(value, ApparentPower.BaseUnit),
                QuantityType.Area => Area.From(value, Area.BaseUnit),
                QuantityType.AreaDensity => AreaDensity.From(value, AreaDensity.BaseUnit),
                QuantityType.AreaMomentOfInertia => AreaMomentOfInertia.From(value, AreaMomentOfInertia.BaseUnit),
                QuantityType.BitRate => BitRate.From(value, BitRate.BaseUnit),
                QuantityType.BrakeSpecificFuelConsumption => BrakeSpecificFuelConsumption.From(value, BrakeSpecificFuelConsumption.BaseUnit),
                QuantityType.Capacitance => Capacitance.From(value, Capacitance.BaseUnit),
                QuantityType.CoefficientOfThermalExpansion => CoefficientOfThermalExpansion.From(value, CoefficientOfThermalExpansion.BaseUnit),
                QuantityType.Compressibility => Compressibility.From(value, Compressibility.BaseUnit),
                QuantityType.Density => Density.From(value, Density.BaseUnit),
                QuantityType.Duration => Duration.From(value, Duration.BaseUnit),
                QuantityType.DynamicViscosity => DynamicViscosity.From(value, DynamicViscosity.BaseUnit),
                QuantityType.ElectricAdmittance => ElectricAdmittance.From(value, ElectricAdmittance.BaseUnit),
                QuantityType.ElectricCharge => ElectricCharge.From(value, ElectricCharge.BaseUnit),
                QuantityType.ElectricChargeDensity => ElectricChargeDensity.From(value, ElectricChargeDensity.BaseUnit),
                QuantityType.ElectricConductance => ElectricConductance.From(value, ElectricConductance.BaseUnit),
                QuantityType.ElectricConductivity => ElectricConductivity.From(value, ElectricConductivity.BaseUnit),
                QuantityType.ElectricCurrent => ElectricCurrent.From(value, ElectricCurrent.BaseUnit),
                QuantityType.ElectricCurrentDensity => ElectricCurrentDensity.From(value, ElectricCurrentDensity.BaseUnit),
                QuantityType.ElectricCurrentGradient => ElectricCurrentGradient.From(value, ElectricCurrentGradient.BaseUnit),
                QuantityType.ElectricField => ElectricField.From(value, ElectricField.BaseUnit),
                QuantityType.ElectricInductance => ElectricInductance.From(value, ElectricInductance.BaseUnit),
                QuantityType.ElectricPotential => ElectricPotential.From(value, ElectricPotential.BaseUnit),
                QuantityType.ElectricPotentialAc => ElectricPotentialAc.From(value, ElectricPotentialAc.BaseUnit),
                QuantityType.ElectricPotentialChangeRate => ElectricPotentialChangeRate.From(value, ElectricPotentialChangeRate.BaseUnit),
                QuantityType.ElectricPotentialDc => ElectricPotentialDc.From(value, ElectricPotentialDc.BaseUnit),
                QuantityType.ElectricResistance => ElectricResistance.From(value, ElectricResistance.BaseUnit),
                QuantityType.ElectricResistivity => ElectricResistivity.From(value, ElectricResistivity.BaseUnit),
                QuantityType.ElectricSurfaceChargeDensity => ElectricSurfaceChargeDensity.From(value, ElectricSurfaceChargeDensity.BaseUnit),
                QuantityType.Energy => Energy.From(value, Energy.BaseUnit),
                QuantityType.Entropy => Entropy.From(value, Entropy.BaseUnit),
                QuantityType.Force => Force.From(value, Force.BaseUnit),
                QuantityType.ForceChangeRate => ForceChangeRate.From(value, ForceChangeRate.BaseUnit),
                QuantityType.ForcePerLength => ForcePerLength.From(value, ForcePerLength.BaseUnit),
                QuantityType.Frequency => Frequency.From(value, Frequency.BaseUnit),
                QuantityType.FuelEfficiency => FuelEfficiency.From(value, FuelEfficiency.BaseUnit),
                QuantityType.HeatFlux => HeatFlux.From(value, HeatFlux.BaseUnit),
                QuantityType.HeatTransferCoefficient => HeatTransferCoefficient.From(value, HeatTransferCoefficient.BaseUnit),
                QuantityType.Illuminance => Illuminance.From(value, Illuminance.BaseUnit),
                QuantityType.Information => Information.From(value, Information.BaseUnit),
                QuantityType.Irradiance => Irradiance.From(value, Irradiance.BaseUnit),
                QuantityType.Irradiation => Irradiation.From(value, Irradiation.BaseUnit),
                QuantityType.Jerk => Jerk.From(value, Jerk.BaseUnit),
                QuantityType.KinematicViscosity => KinematicViscosity.From(value, KinematicViscosity.BaseUnit),
                QuantityType.LapseRate => LapseRate.From(value, LapseRate.BaseUnit),
                QuantityType.Length => Length.From(value, Length.BaseUnit),
                QuantityType.Level => Level.From(value, Level.BaseUnit),
                QuantityType.LinearDensity => LinearDensity.From(value, LinearDensity.BaseUnit),
                QuantityType.LinearPowerDensity => LinearPowerDensity.From(value, LinearPowerDensity.BaseUnit),
                QuantityType.Luminance => Luminance.From(value, Luminance.BaseUnit),
                QuantityType.Luminosity => Luminosity.From(value, Luminosity.BaseUnit),
                QuantityType.LuminousFlux => LuminousFlux.From(value, LuminousFlux.BaseUnit),
                QuantityType.LuminousIntensity => LuminousIntensity.From(value, LuminousIntensity.BaseUnit),
                QuantityType.MagneticField => MagneticField.From(value, MagneticField.BaseUnit),
                QuantityType.MagneticFlux => MagneticFlux.From(value, MagneticFlux.BaseUnit),
                QuantityType.Magnetization => Magnetization.From(value, Magnetization.BaseUnit),
                QuantityType.Mass => Mass.From(value, Mass.BaseUnit),
                QuantityType.MassConcentration => MassConcentration.From(value, MassConcentration.BaseUnit),
                QuantityType.MassFlow => MassFlow.From(value, MassFlow.BaseUnit),
                QuantityType.MassFlux => MassFlux.From(value, MassFlux.BaseUnit),
                QuantityType.MassFraction => MassFraction.From(value, MassFraction.BaseUnit),
                QuantityType.MassMomentOfInertia => MassMomentOfInertia.From(value, MassMomentOfInertia.BaseUnit),
                QuantityType.MolarEnergy => MolarEnergy.From(value, MolarEnergy.BaseUnit),
                QuantityType.MolarEntropy => MolarEntropy.From(value, MolarEntropy.BaseUnit),
                QuantityType.Molarity => Molarity.From(value, Molarity.BaseUnit),
                QuantityType.MolarMass => MolarMass.From(value, MolarMass.BaseUnit),
                QuantityType.Permeability => Permeability.From(value, Permeability.BaseUnit),
                QuantityType.Permittivity => Permittivity.From(value, Permittivity.BaseUnit),
                QuantityType.PorousMediumPermeability => PorousMediumPermeability.From(value, PorousMediumPermeability.BaseUnit),
                QuantityType.Power => Power.From(value, Power.BaseUnit),
                QuantityType.PowerDensity => PowerDensity.From(value, PowerDensity.BaseUnit),
                QuantityType.PowerRatio => PowerRatio.From(value, PowerRatio.BaseUnit),
                QuantityType.Pressure => Pressure.From(value, Pressure.BaseUnit),
                QuantityType.PressureChangeRate => PressureChangeRate.From(value, PressureChangeRate.BaseUnit),
                QuantityType.Ratio => Ratio.From(value, Ratio.BaseUnit),
                QuantityType.RatioChangeRate => RatioChangeRate.From(value, RatioChangeRate.BaseUnit),
                QuantityType.ReactiveEnergy => ReactiveEnergy.From(value, ReactiveEnergy.BaseUnit),
                QuantityType.ReactivePower => ReactivePower.From(value, ReactivePower.BaseUnit),
                QuantityType.ReciprocalArea => ReciprocalArea.From(value, ReciprocalArea.BaseUnit),
                QuantityType.ReciprocalLength => ReciprocalLength.From(value, ReciprocalLength.BaseUnit),
                QuantityType.RelativeHumidity => RelativeHumidity.From(value, RelativeHumidity.BaseUnit),
                QuantityType.RotationalAcceleration => RotationalAcceleration.From(value, RotationalAcceleration.BaseUnit),
                QuantityType.RotationalSpeed => RotationalSpeed.From(value, RotationalSpeed.BaseUnit),
                QuantityType.RotationalStiffness => RotationalStiffness.From(value, RotationalStiffness.BaseUnit),
                QuantityType.RotationalStiffnessPerLength => RotationalStiffnessPerLength.From(value, RotationalStiffnessPerLength.BaseUnit),
                QuantityType.Scalar => Scalar.From(value, Scalar.BaseUnit),
                QuantityType.SolidAngle => SolidAngle.From(value, SolidAngle.BaseUnit),
                QuantityType.SpecificEnergy => SpecificEnergy.From(value, SpecificEnergy.BaseUnit),
                QuantityType.SpecificEntropy => SpecificEntropy.From(value, SpecificEntropy.BaseUnit),
                QuantityType.SpecificFuelConsumption => SpecificFuelConsumption.From(value, SpecificFuelConsumption.BaseUnit),
                QuantityType.SpecificVolume => SpecificVolume.From(value, SpecificVolume.BaseUnit),
                QuantityType.SpecificWeight => SpecificWeight.From(value, SpecificWeight.BaseUnit),
                QuantityType.Speed => Speed.From(value, Speed.BaseUnit),
                QuantityType.StandardVolumeFlow => StandardVolumeFlow.From(value, StandardVolumeFlow.BaseUnit),
                QuantityType.Temperature => Temperature.From(value, Temperature.BaseUnit),
                QuantityType.TemperatureChangeRate => TemperatureChangeRate.From(value, TemperatureChangeRate.BaseUnit),
                QuantityType.TemperatureDelta => TemperatureDelta.From(value, TemperatureDelta.BaseUnit),
                QuantityType.TemperatureGradient => TemperatureGradient.From(value, TemperatureGradient.BaseUnit),
                QuantityType.ThermalConductivity => ThermalConductivity.From(value, ThermalConductivity.BaseUnit),
                QuantityType.ThermalResistance => ThermalResistance.From(value, ThermalResistance.BaseUnit),
                QuantityType.Torque => Torque.From(value, Torque.BaseUnit),
                QuantityType.TorquePerLength => TorquePerLength.From(value, TorquePerLength.BaseUnit),
                QuantityType.Turbidity => Turbidity.From(value, Turbidity.BaseUnit),
                QuantityType.VitaminA => VitaminA.From(value, VitaminA.BaseUnit),
                QuantityType.Volume => Volume.From(value, Volume.BaseUnit),
                QuantityType.VolumeConcentration => VolumeConcentration.From(value, VolumeConcentration.BaseUnit),
                QuantityType.VolumeFlow => VolumeFlow.From(value, VolumeFlow.BaseUnit),
                QuantityType.VolumeFlowPerArea => VolumeFlowPerArea.From(value, VolumeFlowPerArea.BaseUnit),
                QuantityType.VolumePerLength => VolumePerLength.From(value, VolumePerLength.BaseUnit),
                QuantityType.VolumetricHeatCapacity => VolumetricHeatCapacity.From(value, VolumetricHeatCapacity.BaseUnit),
                QuantityType.WarpingMomentOfInertia => WarpingMomentOfInertia.From(value, WarpingMomentOfInertia.BaseUnit),
                _ => throw new ArgumentException($"{quantityType} is not a supported quantity type.")
            };
        }

        /// <summary>
        /// Dynamically constructs a quantity of the given <see cref="QuantityInfo"/> with the value in the quantity's base units.
        /// </summary>
        /// <param name="quantityInfo">The <see cref="QuantityInfo"/> of the quantity to create.</param>
        /// <param name="value">The value to construct the quantity with.</param>
        /// <returns>The created quantity.</returns>
        public static IQuantity FromQuantityInfo(QuantityInfo quantityInfo, QuantityValue value)
        {
            return quantityInfo.Name switch
            {
                "Acceleration" => Acceleration.From(value, Acceleration.BaseUnit),
                "AmountOfSubstance" => AmountOfSubstance.From(value, AmountOfSubstance.BaseUnit),
                "AmplitudeRatio" => AmplitudeRatio.From(value, AmplitudeRatio.BaseUnit),
                "Angle" => Angle.From(value, Angle.BaseUnit),
                "ApparentEnergy" => ApparentEnergy.From(value, ApparentEnergy.BaseUnit),
                "ApparentPower" => ApparentPower.From(value, ApparentPower.BaseUnit),
                "Area" => Area.From(value, Area.BaseUnit),
                "AreaDensity" => AreaDensity.From(value, AreaDensity.BaseUnit),
                "AreaMomentOfInertia" => AreaMomentOfInertia.From(value, AreaMomentOfInertia.BaseUnit),
                "BitRate" => BitRate.From(value, BitRate.BaseUnit),
                "BrakeSpecificFuelConsumption" => BrakeSpecificFuelConsumption.From(value, BrakeSpecificFuelConsumption.BaseUnit),
                "Capacitance" => Capacitance.From(value, Capacitance.BaseUnit),
                "CoefficientOfThermalExpansion" => CoefficientOfThermalExpansion.From(value, CoefficientOfThermalExpansion.BaseUnit),
                "Compressibility" => Compressibility.From(value, Compressibility.BaseUnit),
                "Density" => Density.From(value, Density.BaseUnit),
                "Duration" => Duration.From(value, Duration.BaseUnit),
                "DynamicViscosity" => DynamicViscosity.From(value, DynamicViscosity.BaseUnit),
                "ElectricAdmittance" => ElectricAdmittance.From(value, ElectricAdmittance.BaseUnit),
                "ElectricCharge" => ElectricCharge.From(value, ElectricCharge.BaseUnit),
                "ElectricChargeDensity" => ElectricChargeDensity.From(value, ElectricChargeDensity.BaseUnit),
                "ElectricConductance" => ElectricConductance.From(value, ElectricConductance.BaseUnit),
                "ElectricConductivity" => ElectricConductivity.From(value, ElectricConductivity.BaseUnit),
                "ElectricCurrent" => ElectricCurrent.From(value, ElectricCurrent.BaseUnit),
                "ElectricCurrentDensity" => ElectricCurrentDensity.From(value, ElectricCurrentDensity.BaseUnit),
                "ElectricCurrentGradient" => ElectricCurrentGradient.From(value, ElectricCurrentGradient.BaseUnit),
                "ElectricField" => ElectricField.From(value, ElectricField.BaseUnit),
                "ElectricInductance" => ElectricInductance.From(value, ElectricInductance.BaseUnit),
                "ElectricPotential" => ElectricPotential.From(value, ElectricPotential.BaseUnit),
                "ElectricPotentialAc" => ElectricPotentialAc.From(value, ElectricPotentialAc.BaseUnit),
                "ElectricPotentialChangeRate" => ElectricPotentialChangeRate.From(value, ElectricPotentialChangeRate.BaseUnit),
                "ElectricPotentialDc" => ElectricPotentialDc.From(value, ElectricPotentialDc.BaseUnit),
                "ElectricResistance" => ElectricResistance.From(value, ElectricResistance.BaseUnit),
                "ElectricResistivity" => ElectricResistivity.From(value, ElectricResistivity.BaseUnit),
                "ElectricSurfaceChargeDensity" => ElectricSurfaceChargeDensity.From(value, ElectricSurfaceChargeDensity.BaseUnit),
                "Energy" => Energy.From(value, Energy.BaseUnit),
                "Entropy" => Entropy.From(value, Entropy.BaseUnit),
                "Force" => Force.From(value, Force.BaseUnit),
                "ForceChangeRate" => ForceChangeRate.From(value, ForceChangeRate.BaseUnit),
                "ForcePerLength" => ForcePerLength.From(value, ForcePerLength.BaseUnit),
                "Frequency" => Frequency.From(value, Frequency.BaseUnit),
                "FuelEfficiency" => FuelEfficiency.From(value, FuelEfficiency.BaseUnit),
                "HeatFlux" => HeatFlux.From(value, HeatFlux.BaseUnit),
                "HeatTransferCoefficient" => HeatTransferCoefficient.From(value, HeatTransferCoefficient.BaseUnit),
                "Illuminance" => Illuminance.From(value, Illuminance.BaseUnit),
                "Information" => Information.From(value, Information.BaseUnit),
                "Irradiance" => Irradiance.From(value, Irradiance.BaseUnit),
                "Irradiation" => Irradiation.From(value, Irradiation.BaseUnit),
                "Jerk" => Jerk.From(value, Jerk.BaseUnit),
                "KinematicViscosity" => KinematicViscosity.From(value, KinematicViscosity.BaseUnit),
                "LapseRate" => LapseRate.From(value, LapseRate.BaseUnit),
                "Length" => Length.From(value, Length.BaseUnit),
                "Level" => Level.From(value, Level.BaseUnit),
                "LinearDensity" => LinearDensity.From(value, LinearDensity.BaseUnit),
                "LinearPowerDensity" => LinearPowerDensity.From(value, LinearPowerDensity.BaseUnit),
                "Luminance" => Luminance.From(value, Luminance.BaseUnit),
                "Luminosity" => Luminosity.From(value, Luminosity.BaseUnit),
                "LuminousFlux" => LuminousFlux.From(value, LuminousFlux.BaseUnit),
                "LuminousIntensity" => LuminousIntensity.From(value, LuminousIntensity.BaseUnit),
                "MagneticField" => MagneticField.From(value, MagneticField.BaseUnit),
                "MagneticFlux" => MagneticFlux.From(value, MagneticFlux.BaseUnit),
                "Magnetization" => Magnetization.From(value, Magnetization.BaseUnit),
                "Mass" => Mass.From(value, Mass.BaseUnit),
                "MassConcentration" => MassConcentration.From(value, MassConcentration.BaseUnit),
                "MassFlow" => MassFlow.From(value, MassFlow.BaseUnit),
                "MassFlux" => MassFlux.From(value, MassFlux.BaseUnit),
                "MassFraction" => MassFraction.From(value, MassFraction.BaseUnit),
                "MassMomentOfInertia" => MassMomentOfInertia.From(value, MassMomentOfInertia.BaseUnit),
                "MolarEnergy" => MolarEnergy.From(value, MolarEnergy.BaseUnit),
                "MolarEntropy" => MolarEntropy.From(value, MolarEntropy.BaseUnit),
                "Molarity" => Molarity.From(value, Molarity.BaseUnit),
                "MolarMass" => MolarMass.From(value, MolarMass.BaseUnit),
                "Permeability" => Permeability.From(value, Permeability.BaseUnit),
                "Permittivity" => Permittivity.From(value, Permittivity.BaseUnit),
                "PorousMediumPermeability" => PorousMediumPermeability.From(value, PorousMediumPermeability.BaseUnit),
                "Power" => Power.From(value, Power.BaseUnit),
                "PowerDensity" => PowerDensity.From(value, PowerDensity.BaseUnit),
                "PowerRatio" => PowerRatio.From(value, PowerRatio.BaseUnit),
                "Pressure" => Pressure.From(value, Pressure.BaseUnit),
                "PressureChangeRate" => PressureChangeRate.From(value, PressureChangeRate.BaseUnit),
                "Ratio" => Ratio.From(value, Ratio.BaseUnit),
                "RatioChangeRate" => RatioChangeRate.From(value, RatioChangeRate.BaseUnit),
                "ReactiveEnergy" => ReactiveEnergy.From(value, ReactiveEnergy.BaseUnit),
                "ReactivePower" => ReactivePower.From(value, ReactivePower.BaseUnit),
                "ReciprocalArea" => ReciprocalArea.From(value, ReciprocalArea.BaseUnit),
                "ReciprocalLength" => ReciprocalLength.From(value, ReciprocalLength.BaseUnit),
                "RelativeHumidity" => RelativeHumidity.From(value, RelativeHumidity.BaseUnit),
                "RotationalAcceleration" => RotationalAcceleration.From(value, RotationalAcceleration.BaseUnit),
                "RotationalSpeed" => RotationalSpeed.From(value, RotationalSpeed.BaseUnit),
                "RotationalStiffness" => RotationalStiffness.From(value, RotationalStiffness.BaseUnit),
                "RotationalStiffnessPerLength" => RotationalStiffnessPerLength.From(value, RotationalStiffnessPerLength.BaseUnit),
                "Scalar" => Scalar.From(value, Scalar.BaseUnit),
                "SolidAngle" => SolidAngle.From(value, SolidAngle.BaseUnit),
                "SpecificEnergy" => SpecificEnergy.From(value, SpecificEnergy.BaseUnit),
                "SpecificEntropy" => SpecificEntropy.From(value, SpecificEntropy.BaseUnit),
                "SpecificFuelConsumption" => SpecificFuelConsumption.From(value, SpecificFuelConsumption.BaseUnit),
                "SpecificVolume" => SpecificVolume.From(value, SpecificVolume.BaseUnit),
                "SpecificWeight" => SpecificWeight.From(value, SpecificWeight.BaseUnit),
                "Speed" => Speed.From(value, Speed.BaseUnit),
                "StandardVolumeFlow" => StandardVolumeFlow.From(value, StandardVolumeFlow.BaseUnit),
                "Temperature" => Temperature.From(value, Temperature.BaseUnit),
                "TemperatureChangeRate" => TemperatureChangeRate.From(value, TemperatureChangeRate.BaseUnit),
                "TemperatureDelta" => TemperatureDelta.From(value, TemperatureDelta.BaseUnit),
                "TemperatureGradient" => TemperatureGradient.From(value, TemperatureGradient.BaseUnit),
                "ThermalConductivity" => ThermalConductivity.From(value, ThermalConductivity.BaseUnit),
                "ThermalResistance" => ThermalResistance.From(value, ThermalResistance.BaseUnit),
                "Torque" => Torque.From(value, Torque.BaseUnit),
                "TorquePerLength" => TorquePerLength.From(value, TorquePerLength.BaseUnit),
                "Turbidity" => Turbidity.From(value, Turbidity.BaseUnit),
                "VitaminA" => VitaminA.From(value, VitaminA.BaseUnit),
                "Volume" => Volume.From(value, Volume.BaseUnit),
                "VolumeConcentration" => VolumeConcentration.From(value, VolumeConcentration.BaseUnit),
                "VolumeFlow" => VolumeFlow.From(value, VolumeFlow.BaseUnit),
                "VolumeFlowPerArea" => VolumeFlowPerArea.From(value, VolumeFlowPerArea.BaseUnit),
                "VolumePerLength" => VolumePerLength.From(value, VolumePerLength.BaseUnit),
                "VolumetricHeatCapacity" => VolumetricHeatCapacity.From(value, VolumetricHeatCapacity.BaseUnit),
                "WarpingMomentOfInertia" => WarpingMomentOfInertia.From(value, WarpingMomentOfInertia.BaseUnit),
                _ => throw new ArgumentException($"{quantityInfo.Name} is not a supported quantity.")
            };
        }

        /// <summary>
        ///     Try to dynamically construct a quantity.
        /// </summary>
        /// <param name="value">Numeric value.</param>
        /// <param name="unit">Unit enum value.</param>
        /// <param name="quantity">The resulting quantity if successful, otherwise <c>default</c>.</param>
        /// <returns><c>True</c> if successful with <paramref name="quantity"/> assigned the value, otherwise <c>false</c>.</returns>
        public static bool TryFrom(QuantityValue value, Enum unit, out IQuantity? quantity)
        {
            switch (unit)
            {
                case AccelerationUnit accelerationUnit:
                    quantity = Acceleration.From(value, accelerationUnit);
                    return true;
                case AmountOfSubstanceUnit amountOfSubstanceUnit:
                    quantity = AmountOfSubstance.From(value, amountOfSubstanceUnit);
                    return true;
                case AmplitudeRatioUnit amplitudeRatioUnit:
                    quantity = AmplitudeRatio.From(value, amplitudeRatioUnit);
                    return true;
                case AngleUnit angleUnit:
                    quantity = Angle.From(value, angleUnit);
                    return true;
                case ApparentEnergyUnit apparentEnergyUnit:
                    quantity = ApparentEnergy.From(value, apparentEnergyUnit);
                    return true;
                case ApparentPowerUnit apparentPowerUnit:
                    quantity = ApparentPower.From(value, apparentPowerUnit);
                    return true;
                case AreaUnit areaUnit:
                    quantity = Area.From(value, areaUnit);
                    return true;
                case AreaDensityUnit areaDensityUnit:
                    quantity = AreaDensity.From(value, areaDensityUnit);
                    return true;
                case AreaMomentOfInertiaUnit areaMomentOfInertiaUnit:
                    quantity = AreaMomentOfInertia.From(value, areaMomentOfInertiaUnit);
                    return true;
                case BitRateUnit bitRateUnit:
                    quantity = BitRate.From(value, bitRateUnit);
                    return true;
                case BrakeSpecificFuelConsumptionUnit brakeSpecificFuelConsumptionUnit:
                    quantity = BrakeSpecificFuelConsumption.From(value, brakeSpecificFuelConsumptionUnit);
                    return true;
                case CapacitanceUnit capacitanceUnit:
                    quantity = Capacitance.From(value, capacitanceUnit);
                    return true;
                case CoefficientOfThermalExpansionUnit coefficientOfThermalExpansionUnit:
                    quantity = CoefficientOfThermalExpansion.From(value, coefficientOfThermalExpansionUnit);
                    return true;
                case CompressibilityUnit compressibilityUnit:
                    quantity = Compressibility.From(value, compressibilityUnit);
                    return true;
                case DensityUnit densityUnit:
                    quantity = Density.From(value, densityUnit);
                    return true;
                case DurationUnit durationUnit:
                    quantity = Duration.From(value, durationUnit);
                    return true;
                case DynamicViscosityUnit dynamicViscosityUnit:
                    quantity = DynamicViscosity.From(value, dynamicViscosityUnit);
                    return true;
                case ElectricAdmittanceUnit electricAdmittanceUnit:
                    quantity = ElectricAdmittance.From(value, electricAdmittanceUnit);
                    return true;
                case ElectricChargeUnit electricChargeUnit:
                    quantity = ElectricCharge.From(value, electricChargeUnit);
                    return true;
                case ElectricChargeDensityUnit electricChargeDensityUnit:
                    quantity = ElectricChargeDensity.From(value, electricChargeDensityUnit);
                    return true;
                case ElectricConductanceUnit electricConductanceUnit:
                    quantity = ElectricConductance.From(value, electricConductanceUnit);
                    return true;
                case ElectricConductivityUnit electricConductivityUnit:
                    quantity = ElectricConductivity.From(value, electricConductivityUnit);
                    return true;
                case ElectricCurrentUnit electricCurrentUnit:
                    quantity = ElectricCurrent.From(value, electricCurrentUnit);
                    return true;
                case ElectricCurrentDensityUnit electricCurrentDensityUnit:
                    quantity = ElectricCurrentDensity.From(value, electricCurrentDensityUnit);
                    return true;
                case ElectricCurrentGradientUnit electricCurrentGradientUnit:
                    quantity = ElectricCurrentGradient.From(value, electricCurrentGradientUnit);
                    return true;
                case ElectricFieldUnit electricFieldUnit:
                    quantity = ElectricField.From(value, electricFieldUnit);
                    return true;
                case ElectricInductanceUnit electricInductanceUnit:
                    quantity = ElectricInductance.From(value, electricInductanceUnit);
                    return true;
                case ElectricPotentialUnit electricPotentialUnit:
                    quantity = ElectricPotential.From(value, electricPotentialUnit);
                    return true;
                case ElectricPotentialAcUnit electricPotentialAcUnit:
                    quantity = ElectricPotentialAc.From(value, electricPotentialAcUnit);
                    return true;
                case ElectricPotentialChangeRateUnit electricPotentialChangeRateUnit:
                    quantity = ElectricPotentialChangeRate.From(value, electricPotentialChangeRateUnit);
                    return true;
                case ElectricPotentialDcUnit electricPotentialDcUnit:
                    quantity = ElectricPotentialDc.From(value, electricPotentialDcUnit);
                    return true;
                case ElectricResistanceUnit electricResistanceUnit:
                    quantity = ElectricResistance.From(value, electricResistanceUnit);
                    return true;
                case ElectricResistivityUnit electricResistivityUnit:
                    quantity = ElectricResistivity.From(value, electricResistivityUnit);
                    return true;
                case ElectricSurfaceChargeDensityUnit electricSurfaceChargeDensityUnit:
                    quantity = ElectricSurfaceChargeDensity.From(value, electricSurfaceChargeDensityUnit);
                    return true;
                case EnergyUnit energyUnit:
                    quantity = Energy.From(value, energyUnit);
                    return true;
                case EntropyUnit entropyUnit:
                    quantity = Entropy.From(value, entropyUnit);
                    return true;
                case ForceUnit forceUnit:
                    quantity = Force.From(value, forceUnit);
                    return true;
                case ForceChangeRateUnit forceChangeRateUnit:
                    quantity = ForceChangeRate.From(value, forceChangeRateUnit);
                    return true;
                case ForcePerLengthUnit forcePerLengthUnit:
                    quantity = ForcePerLength.From(value, forcePerLengthUnit);
                    return true;
                case FrequencyUnit frequencyUnit:
                    quantity = Frequency.From(value, frequencyUnit);
                    return true;
                case FuelEfficiencyUnit fuelEfficiencyUnit:
                    quantity = FuelEfficiency.From(value, fuelEfficiencyUnit);
                    return true;
                case HeatFluxUnit heatFluxUnit:
                    quantity = HeatFlux.From(value, heatFluxUnit);
                    return true;
                case HeatTransferCoefficientUnit heatTransferCoefficientUnit:
                    quantity = HeatTransferCoefficient.From(value, heatTransferCoefficientUnit);
                    return true;
                case IlluminanceUnit illuminanceUnit:
                    quantity = Illuminance.From(value, illuminanceUnit);
                    return true;
                case InformationUnit informationUnit:
                    quantity = Information.From(value, informationUnit);
                    return true;
                case IrradianceUnit irradianceUnit:
                    quantity = Irradiance.From(value, irradianceUnit);
                    return true;
                case IrradiationUnit irradiationUnit:
                    quantity = Irradiation.From(value, irradiationUnit);
                    return true;
                case JerkUnit jerkUnit:
                    quantity = Jerk.From(value, jerkUnit);
                    return true;
                case KinematicViscosityUnit kinematicViscosityUnit:
                    quantity = KinematicViscosity.From(value, kinematicViscosityUnit);
                    return true;
                case LapseRateUnit lapseRateUnit:
                    quantity = LapseRate.From(value, lapseRateUnit);
                    return true;
                case LengthUnit lengthUnit:
                    quantity = Length.From(value, lengthUnit);
                    return true;
                case LevelUnit levelUnit:
                    quantity = Level.From(value, levelUnit);
                    return true;
                case LinearDensityUnit linearDensityUnit:
                    quantity = LinearDensity.From(value, linearDensityUnit);
                    return true;
                case LinearPowerDensityUnit linearPowerDensityUnit:
                    quantity = LinearPowerDensity.From(value, linearPowerDensityUnit);
                    return true;
                case LuminanceUnit luminanceUnit:
                    quantity = Luminance.From(value, luminanceUnit);
                    return true;
                case LuminosityUnit luminosityUnit:
                    quantity = Luminosity.From(value, luminosityUnit);
                    return true;
                case LuminousFluxUnit luminousFluxUnit:
                    quantity = LuminousFlux.From(value, luminousFluxUnit);
                    return true;
                case LuminousIntensityUnit luminousIntensityUnit:
                    quantity = LuminousIntensity.From(value, luminousIntensityUnit);
                    return true;
                case MagneticFieldUnit magneticFieldUnit:
                    quantity = MagneticField.From(value, magneticFieldUnit);
                    return true;
                case MagneticFluxUnit magneticFluxUnit:
                    quantity = MagneticFlux.From(value, magneticFluxUnit);
                    return true;
                case MagnetizationUnit magnetizationUnit:
                    quantity = Magnetization.From(value, magnetizationUnit);
                    return true;
                case MassUnit massUnit:
                    quantity = Mass.From(value, massUnit);
                    return true;
                case MassConcentrationUnit massConcentrationUnit:
                    quantity = MassConcentration.From(value, massConcentrationUnit);
                    return true;
                case MassFlowUnit massFlowUnit:
                    quantity = MassFlow.From(value, massFlowUnit);
                    return true;
                case MassFluxUnit massFluxUnit:
                    quantity = MassFlux.From(value, massFluxUnit);
                    return true;
                case MassFractionUnit massFractionUnit:
                    quantity = MassFraction.From(value, massFractionUnit);
                    return true;
                case MassMomentOfInertiaUnit massMomentOfInertiaUnit:
                    quantity = MassMomentOfInertia.From(value, massMomentOfInertiaUnit);
                    return true;
                case MolarEnergyUnit molarEnergyUnit:
                    quantity = MolarEnergy.From(value, molarEnergyUnit);
                    return true;
                case MolarEntropyUnit molarEntropyUnit:
                    quantity = MolarEntropy.From(value, molarEntropyUnit);
                    return true;
                case MolarityUnit molarityUnit:
                    quantity = Molarity.From(value, molarityUnit);
                    return true;
                case MolarMassUnit molarMassUnit:
                    quantity = MolarMass.From(value, molarMassUnit);
                    return true;
                case PermeabilityUnit permeabilityUnit:
                    quantity = Permeability.From(value, permeabilityUnit);
                    return true;
                case PermittivityUnit permittivityUnit:
                    quantity = Permittivity.From(value, permittivityUnit);
                    return true;
                case PorousMediumPermeabilityUnit porousMediumPermeabilityUnit:
                    quantity = PorousMediumPermeability.From(value, porousMediumPermeabilityUnit);
                    return true;
                case PowerUnit powerUnit:
                    quantity = Power.From(value, powerUnit);
                    return true;
                case PowerDensityUnit powerDensityUnit:
                    quantity = PowerDensity.From(value, powerDensityUnit);
                    return true;
                case PowerRatioUnit powerRatioUnit:
                    quantity = PowerRatio.From(value, powerRatioUnit);
                    return true;
                case PressureUnit pressureUnit:
                    quantity = Pressure.From(value, pressureUnit);
                    return true;
                case PressureChangeRateUnit pressureChangeRateUnit:
                    quantity = PressureChangeRate.From(value, pressureChangeRateUnit);
                    return true;
                case RatioUnit ratioUnit:
                    quantity = Ratio.From(value, ratioUnit);
                    return true;
                case RatioChangeRateUnit ratioChangeRateUnit:
                    quantity = RatioChangeRate.From(value, ratioChangeRateUnit);
                    return true;
                case ReactiveEnergyUnit reactiveEnergyUnit:
                    quantity = ReactiveEnergy.From(value, reactiveEnergyUnit);
                    return true;
                case ReactivePowerUnit reactivePowerUnit:
                    quantity = ReactivePower.From(value, reactivePowerUnit);
                    return true;
                case ReciprocalAreaUnit reciprocalAreaUnit:
                    quantity = ReciprocalArea.From(value, reciprocalAreaUnit);
                    return true;
                case ReciprocalLengthUnit reciprocalLengthUnit:
                    quantity = ReciprocalLength.From(value, reciprocalLengthUnit);
                    return true;
                case RelativeHumidityUnit relativeHumidityUnit:
                    quantity = RelativeHumidity.From(value, relativeHumidityUnit);
                    return true;
                case RotationalAccelerationUnit rotationalAccelerationUnit:
                    quantity = RotationalAcceleration.From(value, rotationalAccelerationUnit);
                    return true;
                case RotationalSpeedUnit rotationalSpeedUnit:
                    quantity = RotationalSpeed.From(value, rotationalSpeedUnit);
                    return true;
                case RotationalStiffnessUnit rotationalStiffnessUnit:
                    quantity = RotationalStiffness.From(value, rotationalStiffnessUnit);
                    return true;
                case RotationalStiffnessPerLengthUnit rotationalStiffnessPerLengthUnit:
                    quantity = RotationalStiffnessPerLength.From(value, rotationalStiffnessPerLengthUnit);
                    return true;
                case ScalarUnit scalarUnit:
                    quantity = Scalar.From(value, scalarUnit);
                    return true;
                case SolidAngleUnit solidAngleUnit:
                    quantity = SolidAngle.From(value, solidAngleUnit);
                    return true;
                case SpecificEnergyUnit specificEnergyUnit:
                    quantity = SpecificEnergy.From(value, specificEnergyUnit);
                    return true;
                case SpecificEntropyUnit specificEntropyUnit:
                    quantity = SpecificEntropy.From(value, specificEntropyUnit);
                    return true;
                case SpecificFuelConsumptionUnit specificFuelConsumptionUnit:
                    quantity = SpecificFuelConsumption.From(value, specificFuelConsumptionUnit);
                    return true;
                case SpecificVolumeUnit specificVolumeUnit:
                    quantity = SpecificVolume.From(value, specificVolumeUnit);
                    return true;
                case SpecificWeightUnit specificWeightUnit:
                    quantity = SpecificWeight.From(value, specificWeightUnit);
                    return true;
                case SpeedUnit speedUnit:
                    quantity = Speed.From(value, speedUnit);
                    return true;
                case StandardVolumeFlowUnit standardVolumeFlowUnit:
                    quantity = StandardVolumeFlow.From(value, standardVolumeFlowUnit);
                    return true;
                case TemperatureUnit temperatureUnit:
                    quantity = Temperature.From(value, temperatureUnit);
                    return true;
                case TemperatureChangeRateUnit temperatureChangeRateUnit:
                    quantity = TemperatureChangeRate.From(value, temperatureChangeRateUnit);
                    return true;
                case TemperatureDeltaUnit temperatureDeltaUnit:
                    quantity = TemperatureDelta.From(value, temperatureDeltaUnit);
                    return true;
                case TemperatureGradientUnit temperatureGradientUnit:
                    quantity = TemperatureGradient.From(value, temperatureGradientUnit);
                    return true;
                case ThermalConductivityUnit thermalConductivityUnit:
                    quantity = ThermalConductivity.From(value, thermalConductivityUnit);
                    return true;
                case ThermalResistanceUnit thermalResistanceUnit:
                    quantity = ThermalResistance.From(value, thermalResistanceUnit);
                    return true;
                case TorqueUnit torqueUnit:
                    quantity = Torque.From(value, torqueUnit);
                    return true;
                case TorquePerLengthUnit torquePerLengthUnit:
                    quantity = TorquePerLength.From(value, torquePerLengthUnit);
                    return true;
                case TurbidityUnit turbidityUnit:
                    quantity = Turbidity.From(value, turbidityUnit);
                    return true;
                case VitaminAUnit vitaminAUnit:
                    quantity = VitaminA.From(value, vitaminAUnit);
                    return true;
                case VolumeUnit volumeUnit:
                    quantity = Volume.From(value, volumeUnit);
                    return true;
                case VolumeConcentrationUnit volumeConcentrationUnit:
                    quantity = VolumeConcentration.From(value, volumeConcentrationUnit);
                    return true;
                case VolumeFlowUnit volumeFlowUnit:
                    quantity = VolumeFlow.From(value, volumeFlowUnit);
                    return true;
                case VolumeFlowPerAreaUnit volumeFlowPerAreaUnit:
                    quantity = VolumeFlowPerArea.From(value, volumeFlowPerAreaUnit);
                    return true;
                case VolumePerLengthUnit volumePerLengthUnit:
                    quantity = VolumePerLength.From(value, volumePerLengthUnit);
                    return true;
                case VolumetricHeatCapacityUnit volumetricHeatCapacityUnit:
                    quantity = VolumetricHeatCapacity.From(value, volumetricHeatCapacityUnit);
                    return true;
                case WarpingMomentOfInertiaUnit warpingMomentOfInertiaUnit:
                    quantity = WarpingMomentOfInertia.From(value, warpingMomentOfInertiaUnit);
                    return true;
                default:
                {
                    quantity = default(IQuantity);
                    return false;
                }
            }
        }

        /// <summary>
        ///     Try to dynamically parse a quantity string representation.
        /// </summary>
        /// <param name="formatProvider">The format provider to use for lookup. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        /// <param name="quantityType">Type of quantity, such as <see cref="Length"/>.</param>
        /// <param name="quantityString">Quantity string representation, such as "1.5 kg". Must be compatible with given quantity type.</param>
        /// <param name="quantity">The resulting quantity if successful, otherwise <c>default</c>.</param>
        /// <returns>The parsed quantity.</returns>
        public static bool TryParse(IFormatProvider? formatProvider, Type quantityType, string quantityString, out IQuantity? quantity)
        {
            quantity = default(IQuantity);

            if (!typeof(IQuantity).Wrap().IsAssignableFrom(quantityType))
                return false;

            var parser = QuantityParser.Default;

            return quantityType switch
            {
                Type _ when quantityType == typeof(Acceleration) => parser.TryParse<Acceleration, AccelerationUnit>(quantityString, formatProvider, Acceleration.From, out quantity),
                Type _ when quantityType == typeof(AmountOfSubstance) => parser.TryParse<AmountOfSubstance, AmountOfSubstanceUnit>(quantityString, formatProvider, AmountOfSubstance.From, out quantity),
                Type _ when quantityType == typeof(AmplitudeRatio) => parser.TryParse<AmplitudeRatio, AmplitudeRatioUnit>(quantityString, formatProvider, AmplitudeRatio.From, out quantity),
                Type _ when quantityType == typeof(Angle) => parser.TryParse<Angle, AngleUnit>(quantityString, formatProvider, Angle.From, out quantity),
                Type _ when quantityType == typeof(ApparentEnergy) => parser.TryParse<ApparentEnergy, ApparentEnergyUnit>(quantityString, formatProvider, ApparentEnergy.From, out quantity),
                Type _ when quantityType == typeof(ApparentPower) => parser.TryParse<ApparentPower, ApparentPowerUnit>(quantityString, formatProvider, ApparentPower.From, out quantity),
                Type _ when quantityType == typeof(Area) => parser.TryParse<Area, AreaUnit>(quantityString, formatProvider, Area.From, out quantity),
                Type _ when quantityType == typeof(AreaDensity) => parser.TryParse<AreaDensity, AreaDensityUnit>(quantityString, formatProvider, AreaDensity.From, out quantity),
                Type _ when quantityType == typeof(AreaMomentOfInertia) => parser.TryParse<AreaMomentOfInertia, AreaMomentOfInertiaUnit>(quantityString, formatProvider, AreaMomentOfInertia.From, out quantity),
                Type _ when quantityType == typeof(BitRate) => parser.TryParse<BitRate, BitRateUnit>(quantityString, formatProvider, BitRate.From, out quantity),
                Type _ when quantityType == typeof(BrakeSpecificFuelConsumption) => parser.TryParse<BrakeSpecificFuelConsumption, BrakeSpecificFuelConsumptionUnit>(quantityString, formatProvider, BrakeSpecificFuelConsumption.From, out quantity),
                Type _ when quantityType == typeof(Capacitance) => parser.TryParse<Capacitance, CapacitanceUnit>(quantityString, formatProvider, Capacitance.From, out quantity),
                Type _ when quantityType == typeof(CoefficientOfThermalExpansion) => parser.TryParse<CoefficientOfThermalExpansion, CoefficientOfThermalExpansionUnit>(quantityString, formatProvider, CoefficientOfThermalExpansion.From, out quantity),
                Type _ when quantityType == typeof(Compressibility) => parser.TryParse<Compressibility, CompressibilityUnit>(quantityString, formatProvider, Compressibility.From, out quantity),
                Type _ when quantityType == typeof(Density) => parser.TryParse<Density, DensityUnit>(quantityString, formatProvider, Density.From, out quantity),
                Type _ when quantityType == typeof(Duration) => parser.TryParse<Duration, DurationUnit>(quantityString, formatProvider, Duration.From, out quantity),
                Type _ when quantityType == typeof(DynamicViscosity) => parser.TryParse<DynamicViscosity, DynamicViscosityUnit>(quantityString, formatProvider, DynamicViscosity.From, out quantity),
                Type _ when quantityType == typeof(ElectricAdmittance) => parser.TryParse<ElectricAdmittance, ElectricAdmittanceUnit>(quantityString, formatProvider, ElectricAdmittance.From, out quantity),
                Type _ when quantityType == typeof(ElectricCharge) => parser.TryParse<ElectricCharge, ElectricChargeUnit>(quantityString, formatProvider, ElectricCharge.From, out quantity),
                Type _ when quantityType == typeof(ElectricChargeDensity) => parser.TryParse<ElectricChargeDensity, ElectricChargeDensityUnit>(quantityString, formatProvider, ElectricChargeDensity.From, out quantity),
                Type _ when quantityType == typeof(ElectricConductance) => parser.TryParse<ElectricConductance, ElectricConductanceUnit>(quantityString, formatProvider, ElectricConductance.From, out quantity),
                Type _ when quantityType == typeof(ElectricConductivity) => parser.TryParse<ElectricConductivity, ElectricConductivityUnit>(quantityString, formatProvider, ElectricConductivity.From, out quantity),
                Type _ when quantityType == typeof(ElectricCurrent) => parser.TryParse<ElectricCurrent, ElectricCurrentUnit>(quantityString, formatProvider, ElectricCurrent.From, out quantity),
                Type _ when quantityType == typeof(ElectricCurrentDensity) => parser.TryParse<ElectricCurrentDensity, ElectricCurrentDensityUnit>(quantityString, formatProvider, ElectricCurrentDensity.From, out quantity),
                Type _ when quantityType == typeof(ElectricCurrentGradient) => parser.TryParse<ElectricCurrentGradient, ElectricCurrentGradientUnit>(quantityString, formatProvider, ElectricCurrentGradient.From, out quantity),
                Type _ when quantityType == typeof(ElectricField) => parser.TryParse<ElectricField, ElectricFieldUnit>(quantityString, formatProvider, ElectricField.From, out quantity),
                Type _ when quantityType == typeof(ElectricInductance) => parser.TryParse<ElectricInductance, ElectricInductanceUnit>(quantityString, formatProvider, ElectricInductance.From, out quantity),
                Type _ when quantityType == typeof(ElectricPotential) => parser.TryParse<ElectricPotential, ElectricPotentialUnit>(quantityString, formatProvider, ElectricPotential.From, out quantity),
                Type _ when quantityType == typeof(ElectricPotentialAc) => parser.TryParse<ElectricPotentialAc, ElectricPotentialAcUnit>(quantityString, formatProvider, ElectricPotentialAc.From, out quantity),
                Type _ when quantityType == typeof(ElectricPotentialChangeRate) => parser.TryParse<ElectricPotentialChangeRate, ElectricPotentialChangeRateUnit>(quantityString, formatProvider, ElectricPotentialChangeRate.From, out quantity),
                Type _ when quantityType == typeof(ElectricPotentialDc) => parser.TryParse<ElectricPotentialDc, ElectricPotentialDcUnit>(quantityString, formatProvider, ElectricPotentialDc.From, out quantity),
                Type _ when quantityType == typeof(ElectricResistance) => parser.TryParse<ElectricResistance, ElectricResistanceUnit>(quantityString, formatProvider, ElectricResistance.From, out quantity),
                Type _ when quantityType == typeof(ElectricResistivity) => parser.TryParse<ElectricResistivity, ElectricResistivityUnit>(quantityString, formatProvider, ElectricResistivity.From, out quantity),
                Type _ when quantityType == typeof(ElectricSurfaceChargeDensity) => parser.TryParse<ElectricSurfaceChargeDensity, ElectricSurfaceChargeDensityUnit>(quantityString, formatProvider, ElectricSurfaceChargeDensity.From, out quantity),
                Type _ when quantityType == typeof(Energy) => parser.TryParse<Energy, EnergyUnit>(quantityString, formatProvider, Energy.From, out quantity),
                Type _ when quantityType == typeof(Entropy) => parser.TryParse<Entropy, EntropyUnit>(quantityString, formatProvider, Entropy.From, out quantity),
                Type _ when quantityType == typeof(Force) => parser.TryParse<Force, ForceUnit>(quantityString, formatProvider, Force.From, out quantity),
                Type _ when quantityType == typeof(ForceChangeRate) => parser.TryParse<ForceChangeRate, ForceChangeRateUnit>(quantityString, formatProvider, ForceChangeRate.From, out quantity),
                Type _ when quantityType == typeof(ForcePerLength) => parser.TryParse<ForcePerLength, ForcePerLengthUnit>(quantityString, formatProvider, ForcePerLength.From, out quantity),
                Type _ when quantityType == typeof(Frequency) => parser.TryParse<Frequency, FrequencyUnit>(quantityString, formatProvider, Frequency.From, out quantity),
                Type _ when quantityType == typeof(FuelEfficiency) => parser.TryParse<FuelEfficiency, FuelEfficiencyUnit>(quantityString, formatProvider, FuelEfficiency.From, out quantity),
                Type _ when quantityType == typeof(HeatFlux) => parser.TryParse<HeatFlux, HeatFluxUnit>(quantityString, formatProvider, HeatFlux.From, out quantity),
                Type _ when quantityType == typeof(HeatTransferCoefficient) => parser.TryParse<HeatTransferCoefficient, HeatTransferCoefficientUnit>(quantityString, formatProvider, HeatTransferCoefficient.From, out quantity),
                Type _ when quantityType == typeof(Illuminance) => parser.TryParse<Illuminance, IlluminanceUnit>(quantityString, formatProvider, Illuminance.From, out quantity),
                Type _ when quantityType == typeof(Information) => parser.TryParse<Information, InformationUnit>(quantityString, formatProvider, Information.From, out quantity),
                Type _ when quantityType == typeof(Irradiance) => parser.TryParse<Irradiance, IrradianceUnit>(quantityString, formatProvider, Irradiance.From, out quantity),
                Type _ when quantityType == typeof(Irradiation) => parser.TryParse<Irradiation, IrradiationUnit>(quantityString, formatProvider, Irradiation.From, out quantity),
                Type _ when quantityType == typeof(Jerk) => parser.TryParse<Jerk, JerkUnit>(quantityString, formatProvider, Jerk.From, out quantity),
                Type _ when quantityType == typeof(KinematicViscosity) => parser.TryParse<KinematicViscosity, KinematicViscosityUnit>(quantityString, formatProvider, KinematicViscosity.From, out quantity),
                Type _ when quantityType == typeof(LapseRate) => parser.TryParse<LapseRate, LapseRateUnit>(quantityString, formatProvider, LapseRate.From, out quantity),
                Type _ when quantityType == typeof(Length) => parser.TryParse<Length, LengthUnit>(quantityString, formatProvider, Length.From, out quantity),
                Type _ when quantityType == typeof(Level) => parser.TryParse<Level, LevelUnit>(quantityString, formatProvider, Level.From, out quantity),
                Type _ when quantityType == typeof(LinearDensity) => parser.TryParse<LinearDensity, LinearDensityUnit>(quantityString, formatProvider, LinearDensity.From, out quantity),
                Type _ when quantityType == typeof(LinearPowerDensity) => parser.TryParse<LinearPowerDensity, LinearPowerDensityUnit>(quantityString, formatProvider, LinearPowerDensity.From, out quantity),
                Type _ when quantityType == typeof(Luminance) => parser.TryParse<Luminance, LuminanceUnit>(quantityString, formatProvider, Luminance.From, out quantity),
                Type _ when quantityType == typeof(Luminosity) => parser.TryParse<Luminosity, LuminosityUnit>(quantityString, formatProvider, Luminosity.From, out quantity),
                Type _ when quantityType == typeof(LuminousFlux) => parser.TryParse<LuminousFlux, LuminousFluxUnit>(quantityString, formatProvider, LuminousFlux.From, out quantity),
                Type _ when quantityType == typeof(LuminousIntensity) => parser.TryParse<LuminousIntensity, LuminousIntensityUnit>(quantityString, formatProvider, LuminousIntensity.From, out quantity),
                Type _ when quantityType == typeof(MagneticField) => parser.TryParse<MagneticField, MagneticFieldUnit>(quantityString, formatProvider, MagneticField.From, out quantity),
                Type _ when quantityType == typeof(MagneticFlux) => parser.TryParse<MagneticFlux, MagneticFluxUnit>(quantityString, formatProvider, MagneticFlux.From, out quantity),
                Type _ when quantityType == typeof(Magnetization) => parser.TryParse<Magnetization, MagnetizationUnit>(quantityString, formatProvider, Magnetization.From, out quantity),
                Type _ when quantityType == typeof(Mass) => parser.TryParse<Mass, MassUnit>(quantityString, formatProvider, Mass.From, out quantity),
                Type _ when quantityType == typeof(MassConcentration) => parser.TryParse<MassConcentration, MassConcentrationUnit>(quantityString, formatProvider, MassConcentration.From, out quantity),
                Type _ when quantityType == typeof(MassFlow) => parser.TryParse<MassFlow, MassFlowUnit>(quantityString, formatProvider, MassFlow.From, out quantity),
                Type _ when quantityType == typeof(MassFlux) => parser.TryParse<MassFlux, MassFluxUnit>(quantityString, formatProvider, MassFlux.From, out quantity),
                Type _ when quantityType == typeof(MassFraction) => parser.TryParse<MassFraction, MassFractionUnit>(quantityString, formatProvider, MassFraction.From, out quantity),
                Type _ when quantityType == typeof(MassMomentOfInertia) => parser.TryParse<MassMomentOfInertia, MassMomentOfInertiaUnit>(quantityString, formatProvider, MassMomentOfInertia.From, out quantity),
                Type _ when quantityType == typeof(MolarEnergy) => parser.TryParse<MolarEnergy, MolarEnergyUnit>(quantityString, formatProvider, MolarEnergy.From, out quantity),
                Type _ when quantityType == typeof(MolarEntropy) => parser.TryParse<MolarEntropy, MolarEntropyUnit>(quantityString, formatProvider, MolarEntropy.From, out quantity),
                Type _ when quantityType == typeof(Molarity) => parser.TryParse<Molarity, MolarityUnit>(quantityString, formatProvider, Molarity.From, out quantity),
                Type _ when quantityType == typeof(MolarMass) => parser.TryParse<MolarMass, MolarMassUnit>(quantityString, formatProvider, MolarMass.From, out quantity),
                Type _ when quantityType == typeof(Permeability) => parser.TryParse<Permeability, PermeabilityUnit>(quantityString, formatProvider, Permeability.From, out quantity),
                Type _ when quantityType == typeof(Permittivity) => parser.TryParse<Permittivity, PermittivityUnit>(quantityString, formatProvider, Permittivity.From, out quantity),
                Type _ when quantityType == typeof(PorousMediumPermeability) => parser.TryParse<PorousMediumPermeability, PorousMediumPermeabilityUnit>(quantityString, formatProvider, PorousMediumPermeability.From, out quantity),
                Type _ when quantityType == typeof(Power) => parser.TryParse<Power, PowerUnit>(quantityString, formatProvider, Power.From, out quantity),
                Type _ when quantityType == typeof(PowerDensity) => parser.TryParse<PowerDensity, PowerDensityUnit>(quantityString, formatProvider, PowerDensity.From, out quantity),
                Type _ when quantityType == typeof(PowerRatio) => parser.TryParse<PowerRatio, PowerRatioUnit>(quantityString, formatProvider, PowerRatio.From, out quantity),
                Type _ when quantityType == typeof(Pressure) => parser.TryParse<Pressure, PressureUnit>(quantityString, formatProvider, Pressure.From, out quantity),
                Type _ when quantityType == typeof(PressureChangeRate) => parser.TryParse<PressureChangeRate, PressureChangeRateUnit>(quantityString, formatProvider, PressureChangeRate.From, out quantity),
                Type _ when quantityType == typeof(Ratio) => parser.TryParse<Ratio, RatioUnit>(quantityString, formatProvider, Ratio.From, out quantity),
                Type _ when quantityType == typeof(RatioChangeRate) => parser.TryParse<RatioChangeRate, RatioChangeRateUnit>(quantityString, formatProvider, RatioChangeRate.From, out quantity),
                Type _ when quantityType == typeof(ReactiveEnergy) => parser.TryParse<ReactiveEnergy, ReactiveEnergyUnit>(quantityString, formatProvider, ReactiveEnergy.From, out quantity),
                Type _ when quantityType == typeof(ReactivePower) => parser.TryParse<ReactivePower, ReactivePowerUnit>(quantityString, formatProvider, ReactivePower.From, out quantity),
                Type _ when quantityType == typeof(ReciprocalArea) => parser.TryParse<ReciprocalArea, ReciprocalAreaUnit>(quantityString, formatProvider, ReciprocalArea.From, out quantity),
                Type _ when quantityType == typeof(ReciprocalLength) => parser.TryParse<ReciprocalLength, ReciprocalLengthUnit>(quantityString, formatProvider, ReciprocalLength.From, out quantity),
                Type _ when quantityType == typeof(RelativeHumidity) => parser.TryParse<RelativeHumidity, RelativeHumidityUnit>(quantityString, formatProvider, RelativeHumidity.From, out quantity),
                Type _ when quantityType == typeof(RotationalAcceleration) => parser.TryParse<RotationalAcceleration, RotationalAccelerationUnit>(quantityString, formatProvider, RotationalAcceleration.From, out quantity),
                Type _ when quantityType == typeof(RotationalSpeed) => parser.TryParse<RotationalSpeed, RotationalSpeedUnit>(quantityString, formatProvider, RotationalSpeed.From, out quantity),
                Type _ when quantityType == typeof(RotationalStiffness) => parser.TryParse<RotationalStiffness, RotationalStiffnessUnit>(quantityString, formatProvider, RotationalStiffness.From, out quantity),
                Type _ when quantityType == typeof(RotationalStiffnessPerLength) => parser.TryParse<RotationalStiffnessPerLength, RotationalStiffnessPerLengthUnit>(quantityString, formatProvider, RotationalStiffnessPerLength.From, out quantity),
                Type _ when quantityType == typeof(Scalar) => parser.TryParse<Scalar, ScalarUnit>(quantityString, formatProvider, Scalar.From, out quantity),
                Type _ when quantityType == typeof(SolidAngle) => parser.TryParse<SolidAngle, SolidAngleUnit>(quantityString, formatProvider, SolidAngle.From, out quantity),
                Type _ when quantityType == typeof(SpecificEnergy) => parser.TryParse<SpecificEnergy, SpecificEnergyUnit>(quantityString, formatProvider, SpecificEnergy.From, out quantity),
                Type _ when quantityType == typeof(SpecificEntropy) => parser.TryParse<SpecificEntropy, SpecificEntropyUnit>(quantityString, formatProvider, SpecificEntropy.From, out quantity),
                Type _ when quantityType == typeof(SpecificFuelConsumption) => parser.TryParse<SpecificFuelConsumption, SpecificFuelConsumptionUnit>(quantityString, formatProvider, SpecificFuelConsumption.From, out quantity),
                Type _ when quantityType == typeof(SpecificVolume) => parser.TryParse<SpecificVolume, SpecificVolumeUnit>(quantityString, formatProvider, SpecificVolume.From, out quantity),
                Type _ when quantityType == typeof(SpecificWeight) => parser.TryParse<SpecificWeight, SpecificWeightUnit>(quantityString, formatProvider, SpecificWeight.From, out quantity),
                Type _ when quantityType == typeof(Speed) => parser.TryParse<Speed, SpeedUnit>(quantityString, formatProvider, Speed.From, out quantity),
                Type _ when quantityType == typeof(StandardVolumeFlow) => parser.TryParse<StandardVolumeFlow, StandardVolumeFlowUnit>(quantityString, formatProvider, StandardVolumeFlow.From, out quantity),
                Type _ when quantityType == typeof(Temperature) => parser.TryParse<Temperature, TemperatureUnit>(quantityString, formatProvider, Temperature.From, out quantity),
                Type _ when quantityType == typeof(TemperatureChangeRate) => parser.TryParse<TemperatureChangeRate, TemperatureChangeRateUnit>(quantityString, formatProvider, TemperatureChangeRate.From, out quantity),
                Type _ when quantityType == typeof(TemperatureDelta) => parser.TryParse<TemperatureDelta, TemperatureDeltaUnit>(quantityString, formatProvider, TemperatureDelta.From, out quantity),
                Type _ when quantityType == typeof(TemperatureGradient) => parser.TryParse<TemperatureGradient, TemperatureGradientUnit>(quantityString, formatProvider, TemperatureGradient.From, out quantity),
                Type _ when quantityType == typeof(ThermalConductivity) => parser.TryParse<ThermalConductivity, ThermalConductivityUnit>(quantityString, formatProvider, ThermalConductivity.From, out quantity),
                Type _ when quantityType == typeof(ThermalResistance) => parser.TryParse<ThermalResistance, ThermalResistanceUnit>(quantityString, formatProvider, ThermalResistance.From, out quantity),
                Type _ when quantityType == typeof(Torque) => parser.TryParse<Torque, TorqueUnit>(quantityString, formatProvider, Torque.From, out quantity),
                Type _ when quantityType == typeof(TorquePerLength) => parser.TryParse<TorquePerLength, TorquePerLengthUnit>(quantityString, formatProvider, TorquePerLength.From, out quantity),
                Type _ when quantityType == typeof(Turbidity) => parser.TryParse<Turbidity, TurbidityUnit>(quantityString, formatProvider, Turbidity.From, out quantity),
                Type _ when quantityType == typeof(VitaminA) => parser.TryParse<VitaminA, VitaminAUnit>(quantityString, formatProvider, VitaminA.From, out quantity),
                Type _ when quantityType == typeof(Volume) => parser.TryParse<Volume, VolumeUnit>(quantityString, formatProvider, Volume.From, out quantity),
                Type _ when quantityType == typeof(VolumeConcentration) => parser.TryParse<VolumeConcentration, VolumeConcentrationUnit>(quantityString, formatProvider, VolumeConcentration.From, out quantity),
                Type _ when quantityType == typeof(VolumeFlow) => parser.TryParse<VolumeFlow, VolumeFlowUnit>(quantityString, formatProvider, VolumeFlow.From, out quantity),
                Type _ when quantityType == typeof(VolumeFlowPerArea) => parser.TryParse<VolumeFlowPerArea, VolumeFlowPerAreaUnit>(quantityString, formatProvider, VolumeFlowPerArea.From, out quantity),
                Type _ when quantityType == typeof(VolumePerLength) => parser.TryParse<VolumePerLength, VolumePerLengthUnit>(quantityString, formatProvider, VolumePerLength.From, out quantity),
                Type _ when quantityType == typeof(VolumetricHeatCapacity) => parser.TryParse<VolumetricHeatCapacity, VolumetricHeatCapacityUnit>(quantityString, formatProvider, VolumetricHeatCapacity.From, out quantity),
                Type _ when quantityType == typeof(WarpingMomentOfInertia) => parser.TryParse<WarpingMomentOfInertia, WarpingMomentOfInertiaUnit>(quantityString, formatProvider, WarpingMomentOfInertia.From, out quantity),
                _ => false
            };
        }

        internal static IEnumerable<Type> GetQuantityTypes()
        {
            yield return typeof(Acceleration);
            yield return typeof(AmountOfSubstance);
            yield return typeof(AmplitudeRatio);
            yield return typeof(Angle);
            yield return typeof(ApparentEnergy);
            yield return typeof(ApparentPower);
            yield return typeof(Area);
            yield return typeof(AreaDensity);
            yield return typeof(AreaMomentOfInertia);
            yield return typeof(BitRate);
            yield return typeof(BrakeSpecificFuelConsumption);
            yield return typeof(Capacitance);
            yield return typeof(CoefficientOfThermalExpansion);
            yield return typeof(Compressibility);
            yield return typeof(Density);
            yield return typeof(Duration);
            yield return typeof(DynamicViscosity);
            yield return typeof(ElectricAdmittance);
            yield return typeof(ElectricCharge);
            yield return typeof(ElectricChargeDensity);
            yield return typeof(ElectricConductance);
            yield return typeof(ElectricConductivity);
            yield return typeof(ElectricCurrent);
            yield return typeof(ElectricCurrentDensity);
            yield return typeof(ElectricCurrentGradient);
            yield return typeof(ElectricField);
            yield return typeof(ElectricInductance);
            yield return typeof(ElectricPotential);
            yield return typeof(ElectricPotentialAc);
            yield return typeof(ElectricPotentialChangeRate);
            yield return typeof(ElectricPotentialDc);
            yield return typeof(ElectricResistance);
            yield return typeof(ElectricResistivity);
            yield return typeof(ElectricSurfaceChargeDensity);
            yield return typeof(Energy);
            yield return typeof(Entropy);
            yield return typeof(Force);
            yield return typeof(ForceChangeRate);
            yield return typeof(ForcePerLength);
            yield return typeof(Frequency);
            yield return typeof(FuelEfficiency);
            yield return typeof(HeatFlux);
            yield return typeof(HeatTransferCoefficient);
            yield return typeof(Illuminance);
            yield return typeof(Information);
            yield return typeof(Irradiance);
            yield return typeof(Irradiation);
            yield return typeof(Jerk);
            yield return typeof(KinematicViscosity);
            yield return typeof(LapseRate);
            yield return typeof(Length);
            yield return typeof(Level);
            yield return typeof(LinearDensity);
            yield return typeof(LinearPowerDensity);
            yield return typeof(Luminance);
            yield return typeof(Luminosity);
            yield return typeof(LuminousFlux);
            yield return typeof(LuminousIntensity);
            yield return typeof(MagneticField);
            yield return typeof(MagneticFlux);
            yield return typeof(Magnetization);
            yield return typeof(Mass);
            yield return typeof(MassConcentration);
            yield return typeof(MassFlow);
            yield return typeof(MassFlux);
            yield return typeof(MassFraction);
            yield return typeof(MassMomentOfInertia);
            yield return typeof(MolarEnergy);
            yield return typeof(MolarEntropy);
            yield return typeof(Molarity);
            yield return typeof(MolarMass);
            yield return typeof(Permeability);
            yield return typeof(Permittivity);
            yield return typeof(PorousMediumPermeability);
            yield return typeof(Power);
            yield return typeof(PowerDensity);
            yield return typeof(PowerRatio);
            yield return typeof(Pressure);
            yield return typeof(PressureChangeRate);
            yield return typeof(Ratio);
            yield return typeof(RatioChangeRate);
            yield return typeof(ReactiveEnergy);
            yield return typeof(ReactivePower);
            yield return typeof(ReciprocalArea);
            yield return typeof(ReciprocalLength);
            yield return typeof(RelativeHumidity);
            yield return typeof(RotationalAcceleration);
            yield return typeof(RotationalSpeed);
            yield return typeof(RotationalStiffness);
            yield return typeof(RotationalStiffnessPerLength);
            yield return typeof(Scalar);
            yield return typeof(SolidAngle);
            yield return typeof(SpecificEnergy);
            yield return typeof(SpecificEntropy);
            yield return typeof(SpecificFuelConsumption);
            yield return typeof(SpecificVolume);
            yield return typeof(SpecificWeight);
            yield return typeof(Speed);
            yield return typeof(StandardVolumeFlow);
            yield return typeof(Temperature);
            yield return typeof(TemperatureChangeRate);
            yield return typeof(TemperatureDelta);
            yield return typeof(TemperatureGradient);
            yield return typeof(ThermalConductivity);
            yield return typeof(ThermalResistance);
            yield return typeof(Torque);
            yield return typeof(TorquePerLength);
            yield return typeof(Turbidity);
            yield return typeof(VitaminA);
            yield return typeof(Volume);
            yield return typeof(VolumeConcentration);
            yield return typeof(VolumeFlow);
            yield return typeof(VolumeFlowPerArea);
            yield return typeof(VolumePerLength);
            yield return typeof(VolumetricHeatCapacity);
            yield return typeof(WarpingMomentOfInertia);
        }
    }
}
