//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using UnitsNet.NumberExtensions.NumberToElectricPotentialChangeRate;
using Xunit;

namespace UnitsNet.Tests
{
    public class NumberToElectricPotentialChangeRateExtensionsTests
    {
        [Fact]
        public void NumberToKilovoltsPerHoursTest() =>
            Assert.Equal(ElectricPotentialChangeRate.FromKilovoltsPerHours(2), 2.KilovoltsPerHours());

        [Fact]
        public void NumberToKilovoltsPerMicrosecondsTest() =>
            Assert.Equal(ElectricPotentialChangeRate.FromKilovoltsPerMicroseconds(2), 2.KilovoltsPerMicroseconds());

        [Fact]
        public void NumberToKilovoltsPerMinutesTest() =>
            Assert.Equal(ElectricPotentialChangeRate.FromKilovoltsPerMinutes(2), 2.KilovoltsPerMinutes());

        [Fact]
        public void NumberToKilovoltsPerSecondsTest() =>
            Assert.Equal(ElectricPotentialChangeRate.FromKilovoltsPerSeconds(2), 2.KilovoltsPerSeconds());

        [Fact]
        public void NumberToMegavoltsPerHoursTest() =>
            Assert.Equal(ElectricPotentialChangeRate.FromMegavoltsPerHours(2), 2.MegavoltsPerHours());

        [Fact]
        public void NumberToMegavoltsPerMicrosecondsTest() =>
            Assert.Equal(ElectricPotentialChangeRate.FromMegavoltsPerMicroseconds(2), 2.MegavoltsPerMicroseconds());

        [Fact]
        public void NumberToMegavoltsPerMinutesTest() =>
            Assert.Equal(ElectricPotentialChangeRate.FromMegavoltsPerMinutes(2), 2.MegavoltsPerMinutes());

        [Fact]
        public void NumberToMegavoltsPerSecondsTest() =>
            Assert.Equal(ElectricPotentialChangeRate.FromMegavoltsPerSeconds(2), 2.MegavoltsPerSeconds());

        [Fact]
        public void NumberToMicrovoltsPerHoursTest() =>
            Assert.Equal(ElectricPotentialChangeRate.FromMicrovoltsPerHours(2), 2.MicrovoltsPerHours());

        [Fact]
        public void NumberToMicrovoltsPerMicrosecondsTest() =>
            Assert.Equal(ElectricPotentialChangeRate.FromMicrovoltsPerMicroseconds(2), 2.MicrovoltsPerMicroseconds());

        [Fact]
        public void NumberToMicrovoltsPerMinutesTest() =>
            Assert.Equal(ElectricPotentialChangeRate.FromMicrovoltsPerMinutes(2), 2.MicrovoltsPerMinutes());

        [Fact]
        public void NumberToMicrovoltsPerSecondsTest() =>
            Assert.Equal(ElectricPotentialChangeRate.FromMicrovoltsPerSeconds(2), 2.MicrovoltsPerSeconds());

        [Fact]
        public void NumberToMillivoltsPerHoursTest() =>
            Assert.Equal(ElectricPotentialChangeRate.FromMillivoltsPerHours(2), 2.MillivoltsPerHours());

        [Fact]
        public void NumberToMillivoltsPerMicrosecondsTest() =>
            Assert.Equal(ElectricPotentialChangeRate.FromMillivoltsPerMicroseconds(2), 2.MillivoltsPerMicroseconds());

        [Fact]
        public void NumberToMillivoltsPerMinutesTest() =>
            Assert.Equal(ElectricPotentialChangeRate.FromMillivoltsPerMinutes(2), 2.MillivoltsPerMinutes());

        [Fact]
        public void NumberToMillivoltsPerSecondsTest() =>
            Assert.Equal(ElectricPotentialChangeRate.FromMillivoltsPerSeconds(2), 2.MillivoltsPerSeconds());

        [Fact]
        public void NumberToVoltsPerHoursTest() =>
            Assert.Equal(ElectricPotentialChangeRate.FromVoltsPerHours(2), 2.VoltsPerHours());

        [Fact]
        public void NumberToVoltsPerMicrosecondsTest() =>
            Assert.Equal(ElectricPotentialChangeRate.FromVoltsPerMicroseconds(2), 2.VoltsPerMicroseconds());

        [Fact]
        public void NumberToVoltsPerMinutesTest() =>
            Assert.Equal(ElectricPotentialChangeRate.FromVoltsPerMinutes(2), 2.VoltsPerMinutes());

        [Fact]
        public void NumberToVoltsPerSecondsTest() =>
            Assert.Equal(ElectricPotentialChangeRate.FromVoltsPerSeconds(2), 2.VoltsPerSeconds());

    }
}
