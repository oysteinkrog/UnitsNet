//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using UnitsNet.NumberExtensions.NumberToBitRate;
using Xunit;

namespace UnitsNet.Tests
{
    public class NumberToBitRateExtensionsTests
    {
        [Fact]
        public void NumberToBitsPerSecondTest() =>
            Assert.Equal(BitRate.FromBitsPerSecond(2), 2.BitsPerSecond());

        [Fact]
        public void NumberToBytesPerSecondTest() =>
            Assert.Equal(BitRate.FromBytesPerSecond(2), 2.BytesPerSecond());

        [Fact]
        public void NumberToExabitsPerSecondTest() =>
            Assert.Equal(BitRate.FromExabitsPerSecond(2), 2.ExabitsPerSecond());

        [Fact]
        public void NumberToExabytesPerSecondTest() =>
            Assert.Equal(BitRate.FromExabytesPerSecond(2), 2.ExabytesPerSecond());

        [Fact]
        public void NumberToExbibitsPerSecondTest() =>
            Assert.Equal(BitRate.FromExbibitsPerSecond(2), 2.ExbibitsPerSecond());

        [Fact]
        public void NumberToExbibytesPerSecondTest() =>
            Assert.Equal(BitRate.FromExbibytesPerSecond(2), 2.ExbibytesPerSecond());

        [Fact]
        public void NumberToGibibitsPerSecondTest() =>
            Assert.Equal(BitRate.FromGibibitsPerSecond(2), 2.GibibitsPerSecond());

        [Fact]
        public void NumberToGibibytesPerSecondTest() =>
            Assert.Equal(BitRate.FromGibibytesPerSecond(2), 2.GibibytesPerSecond());

        [Fact]
        public void NumberToGigabitsPerSecondTest() =>
            Assert.Equal(BitRate.FromGigabitsPerSecond(2), 2.GigabitsPerSecond());

        [Fact]
        public void NumberToGigabytesPerSecondTest() =>
            Assert.Equal(BitRate.FromGigabytesPerSecond(2), 2.GigabytesPerSecond());

        [Fact]
        public void NumberToKibibitsPerSecondTest() =>
            Assert.Equal(BitRate.FromKibibitsPerSecond(2), 2.KibibitsPerSecond());

        [Fact]
        public void NumberToKibibytesPerSecondTest() =>
            Assert.Equal(BitRate.FromKibibytesPerSecond(2), 2.KibibytesPerSecond());

        [Fact]
        public void NumberToKilobitsPerSecondTest() =>
            Assert.Equal(BitRate.FromKilobitsPerSecond(2), 2.KilobitsPerSecond());

        [Fact]
        public void NumberToKilobytesPerSecondTest() =>
            Assert.Equal(BitRate.FromKilobytesPerSecond(2), 2.KilobytesPerSecond());

        [Fact]
        public void NumberToMebibitsPerSecondTest() =>
            Assert.Equal(BitRate.FromMebibitsPerSecond(2), 2.MebibitsPerSecond());

        [Fact]
        public void NumberToMebibytesPerSecondTest() =>
            Assert.Equal(BitRate.FromMebibytesPerSecond(2), 2.MebibytesPerSecond());

        [Fact]
        public void NumberToMegabitsPerSecondTest() =>
            Assert.Equal(BitRate.FromMegabitsPerSecond(2), 2.MegabitsPerSecond());

        [Fact]
        public void NumberToMegabytesPerSecondTest() =>
            Assert.Equal(BitRate.FromMegabytesPerSecond(2), 2.MegabytesPerSecond());

        [Fact]
        public void NumberToPebibitsPerSecondTest() =>
            Assert.Equal(BitRate.FromPebibitsPerSecond(2), 2.PebibitsPerSecond());

        [Fact]
        public void NumberToPebibytesPerSecondTest() =>
            Assert.Equal(BitRate.FromPebibytesPerSecond(2), 2.PebibytesPerSecond());

        [Fact]
        public void NumberToPetabitsPerSecondTest() =>
            Assert.Equal(BitRate.FromPetabitsPerSecond(2), 2.PetabitsPerSecond());

        [Fact]
        public void NumberToPetabytesPerSecondTest() =>
            Assert.Equal(BitRate.FromPetabytesPerSecond(2), 2.PetabytesPerSecond());

        [Fact]
        public void NumberToTebibitsPerSecondTest() =>
            Assert.Equal(BitRate.FromTebibitsPerSecond(2), 2.TebibitsPerSecond());

        [Fact]
        public void NumberToTebibytesPerSecondTest() =>
            Assert.Equal(BitRate.FromTebibytesPerSecond(2), 2.TebibytesPerSecond());

        [Fact]
        public void NumberToTerabitsPerSecondTest() =>
            Assert.Equal(BitRate.FromTerabitsPerSecond(2), 2.TerabitsPerSecond());

        [Fact]
        public void NumberToTerabytesPerSecondTest() =>
            Assert.Equal(BitRate.FromTerabytesPerSecond(2), 2.TerabytesPerSecond());

    }
}
